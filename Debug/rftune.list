
rftune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a4  080084a4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080084a4  080084a4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084a4  080084a4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080084ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  200001f4  080086a0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  080086a0  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf1c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039f5  00000000  00000000  0003d140  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  00040b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00041f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ec0c  00000000  00000000  00043120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013298  00000000  00000000  00071d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010359d  00000000  00000000  00084fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a0  00000000  00000000  001885dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008388 	.word	0x08008388

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08008388 	.word	0x08008388

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_Z8delay_usmP17TIM_HandleTypeDef>:

#include "main.h"
#include "delay.h"

void delay_us (uint32_t us, TIM_HandleTypeDef *htim)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2200      	movs	r2, #0
 80002b0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	bf8c      	ite	hi
 80002be:	2301      	movhi	r3, #1
 80002c0:	2300      	movls	r3, #0
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d000      	beq.n	80002ca <_Z8delay_usmP17TIM_HandleTypeDef+0x2a>
 80002c8:	e7f3      	b.n	80002b2 <_Z8delay_usmP17TIM_HandleTypeDef+0x12>
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b0b0      	sub	sp, #192	; 0xc0
 80002dc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t cdc_buf[] = "Sample Text From CDC Buffer";
 80002de:	4b4f      	ldr	r3, [pc, #316]	; (800041c <main+0x144>)
 80002e0:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80002e4:	461d      	mov	r5, r3
 80002e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char ch_buf1[100];
	int local_idx = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f8:	f000 fced 	bl	8000cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fc:	f000 f898 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000300:	f000 f994 	bl	800062c <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000304:	f000 f936 	bl	8000574 <_ZL12MX_TIM2_Initv>
  MX_USB_DEVICE_Init();
 8000308:	f006 fde0 	bl	8006ecc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MXEX_GPIO_INIT();
 800030c:	f000 f9fe 	bl	800070c <_ZL14MXEX_GPIO_INITv>
  HAL_TIM_Base_Start(&htim2);
 8000310:	4843      	ldr	r0, [pc, #268]	; (8000420 <main+0x148>)
 8000312:	f003 fc87 	bl	8003c24 <HAL_TIM_Base_Start>

  RFFC rffc(GPIOD, GPIO_PIN_1, GPIOD, GPIO_PIN_4, GPIOD, GPIO_PIN_2, GPIOD, GPIO_PIN_0);
 8000316:	4638      	mov	r0, r7
 8000318:	2301      	movs	r3, #1
 800031a:	9304      	str	r3, [sp, #16]
 800031c:	4b41      	ldr	r3, [pc, #260]	; (8000424 <main+0x14c>)
 800031e:	9303      	str	r3, [sp, #12]
 8000320:	2304      	movs	r3, #4
 8000322:	9302      	str	r3, [sp, #8]
 8000324:	4b3f      	ldr	r3, [pc, #252]	; (8000424 <main+0x14c>)
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	2310      	movs	r3, #16
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b3d      	ldr	r3, [pc, #244]	; (8000424 <main+0x14c>)
 800032e:	2202      	movs	r2, #2
 8000330:	493c      	ldr	r1, [pc, #240]	; (8000424 <main+0x14c>)
 8000332:	f000 fa23 	bl	800077c <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);

  uint16_t SDI_CTRL = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

  SDI_CTRL = rffc.read(0x15);
 800033c:	463b      	mov	r3, r7
 800033e:	2115      	movs	r1, #21
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fa43 	bl	80007cc <_ZN4RFFC4readEh>
 8000346:	4603      	mov	r3, r0
 8000348:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
  sprintf(ch_buf1,"REG(15) : %03d\r\n", SDI_CTRL);
 800034c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8000350:	f107 0320 	add.w	r3, r7, #32
 8000354:	4934      	ldr	r1, [pc, #208]	; (8000428 <main+0x150>)
 8000356:	4618      	mov	r0, r3
 8000358:	f007 fcc8 	bl	8007cec <siprintf>
  for(local_idx=0;local_idx<16;local_idx++)
 800035c:	2300      	movs	r3, #0
 800035e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000366:	2b0f      	cmp	r3, #15
 8000368:	dc26      	bgt.n	80003b8 <main+0xe0>
  {
	  SDI_CTRL = rffc.read(local_idx);
 800036a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800036e:	b2da      	uxtb	r2, r3
 8000370:	463b      	mov	r3, r7
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fa29 	bl	80007cc <_ZN4RFFC4readEh>
 800037a:	4603      	mov	r3, r0
 800037c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  sprintf(ch_buf1,"REG(0X%04X) : 0X%04X\r\n", local_idx,  SDI_CTRL);
 8000380:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8000384:	f107 0020 	add.w	r0, r7, #32
 8000388:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800038c:	4927      	ldr	r1, [pc, #156]	; (800042c <main+0x154>)
 800038e:	f007 fcad 	bl	8007cec <siprintf>
	  CDC_Transmit_FS((uint8_t *)ch_buf1, strlen(ch_buf1));
 8000392:	f107 0320 	add.w	r3, r7, #32
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff2a 	bl	80001f0 <strlen>
 800039c:	4603      	mov	r3, r0
 800039e:	b29a      	uxth	r2, r3
 80003a0:	f107 0320 	add.w	r3, r7, #32
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f006 fe4e 	bl	8007048 <CDC_Transmit_FS>
  for(local_idx=0;local_idx<16;local_idx++)
 80003ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003b0:	3301      	adds	r3, #1
 80003b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80003b6:	e7d4      	b.n	8000362 <main+0x8a>
	  delay_us(10000, &htim2);
	  */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(5000);
 80003b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80003bc:	f000 fd00 	bl	8000dc0 <HAL_Delay>
	for(local_idx=0;local_idx<16;local_idx++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80003c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003ca:	2b0f      	cmp	r3, #15
 80003cc:	dcf4      	bgt.n	80003b8 <main+0xe0>
	{
	  SDI_CTRL = rffc.read(local_idx);
 80003ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	463b      	mov	r3, r7
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f9f7 	bl	80007cc <_ZN4RFFC4readEh>
 80003de:	4603      	mov	r3, r0
 80003e0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  sprintf(ch_buf1,"REG(0X%04X) : 0X%04X\r\n", local_idx,  SDI_CTRL);
 80003e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80003e8:	f107 0020 	add.w	r0, r7, #32
 80003ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80003f0:	490e      	ldr	r1, [pc, #56]	; (800042c <main+0x154>)
 80003f2:	f007 fc7b 	bl	8007cec <siprintf>
	  CDC_Transmit_FS((uint8_t *)ch_buf1, strlen(ch_buf1));
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff fef8 	bl	80001f0 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	b29a      	uxth	r2, r3
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	4611      	mov	r1, r2
 800040a:	4618      	mov	r0, r3
 800040c:	f006 fe1c 	bl	8007048 <CDC_Transmit_FS>
	for(local_idx=0;local_idx<16;local_idx++)
 8000410:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000414:	3301      	adds	r3, #1
 8000416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800041a:	e7d4      	b.n	80003c6 <main+0xee>
 800041c:	080083cc 	.word	0x080083cc
 8000420:	20000210 	.word	0x20000210
 8000424:	48000c00 	.word	0x48000c00
 8000428:	080083a0 	.word	0x080083a0
 800042c:	080083b4 	.word	0x080083b4

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b0ba      	sub	sp, #232	; 0xe8
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800043a:	2244      	movs	r2, #68	; 0x44
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f007 fb94 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
 8000452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	228c      	movs	r2, #140	; 0x8c
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f007 fb86 	bl	8007b6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000460:	2314      	movs	r3, #20
 8000462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000466:	2300      	movs	r3, #0
 8000468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800046c:	2301      	movs	r3, #1
 800046e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000478:	2360      	movs	r3, #96	; 0x60
 800047a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000484:	2301      	movs	r3, #1
 8000486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000490:	2328      	movs	r3, #40	; 0x28
 8000492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000496:	2302      	movs	r3, #2
 8000498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800049c:	2302      	movs	r3, #2
 800049e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f002 f891 	bl	80025d4 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf14      	ite	ne
 80004b8:	2301      	movne	r3, #1
 80004ba:	2300      	moveq	r3, #0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004c2:	f000 f957 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	230f      	movs	r3, #15
 80004c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2303      	movs	r3, #3
 80004ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80004e8:	2104      	movs	r1, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f002 fc98 	bl	8002e20 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	bf14      	ite	ne
 80004f6:	2301      	movne	r3, #1
 80004f8:	2300      	moveq	r3, #0
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000500:	f000 f938 	bl	8000774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800050a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800050e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000510:	2301      	movs	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000514:	2301      	movs	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000518:	2318      	movs	r3, #24
 800051a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000520:	2302      	movs	r3, #2
 8000522:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000528:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800052c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f002 fe4d 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8000546:	f000 f915 	bl	8000774 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f001 ffdb 	bl	8002508 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000562:	f000 f907 	bl	8000774 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000566:	f003 f92b 	bl	80037c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800056a:	bf00      	nop
 800056c:	37e8      	adds	r7, #232	; 0xe8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 8000594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800059a:	4b23      	ldr	r3, [pc, #140]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 800059c:	2250      	movs	r2, #80	; 0x50
 800059e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 80005bc:	f003 fada 	bl	8003b74 <HAL_TIM_Base_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2301      	movne	r3, #1
 80005c8:	2300      	moveq	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80005d0:	f000 f8d0 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	4811      	ldr	r0, [pc, #68]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 80005e2:	f003 fb87 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80005f6:	f000 f8bd 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <_ZL12MX_TIM2_Initv+0xb4>)
 8000608:	f003 fd62 	bl	80040d0 <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 800061c:	f000 f8aa 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000210 	.word	0x20000210

0800062c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2e      	ldr	r2, [pc, #184]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a28      	ldr	r2, [pc, #160]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <_ZL12MX_GPIO_Initv+0xd4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a8:	4816      	ldr	r0, [pc, #88]	; (8000704 <_ZL12MX_GPIO_Initv+0xd8>)
 80006aa:	f000 fe67 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_ON_GPIO_Port, LDO_ON_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <_ZL12MX_GPIO_Initv+0xdc>)
 80006b6:	f000 fe61 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <_ZL12MX_GPIO_Initv+0xd8>)
 80006d4:	f000 fca8 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_ON_Pin */
  GPIO_InitStruct.Pin = LDO_ON_Pin;
 80006d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDO_ON_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <_ZL12MX_GPIO_Initv+0xdc>)
 80006f2:	f000 fc99 	bl	8001028 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000c00 	.word	0x48000c00

0800070c <_ZL14MXEX_GPIO_INITv>:

/* USER CODE BEGIN 4 */

static void MXEX_GPIO_INIT(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);   //ENX - NORMALLY HIGH. ACTIVE LOW.
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <_ZL14MXEX_GPIO_INITv+0x60>)
 8000726:	f000 fe29 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); //SCLK
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <_ZL14MXEX_GPIO_INITv+0x60>)
 8000730:	f000 fe24 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //RESETX
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <_ZL14MXEX_GPIO_INITv+0x60>)
 800073a:	f000 fe1f 	bl	800137c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //SDATA
 800073e:	2200      	movs	r2, #0
 8000740:	2110      	movs	r1, #16
 8000742:	480a      	ldr	r0, [pc, #40]	; (800076c <_ZL14MXEX_GPIO_INITv+0x60>)
 8000744:	f000 fe1a 	bl	800137c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000748:	2317      	movs	r3, #23
 800074a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <_ZL14MXEX_GPIO_INITv+0x64>)
 800075e:	f000 fc63 	bl	8001028 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	48000c00 	.word	0x48000c00
 8000770:	48000400 	.word	0x48000400

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077a:	e7fe      	b.n	800077a <Error_Handler+0x6>

0800077c <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>:
						delay_us(RFFC5071_FSCL, &htim2);\
						HAL_GPIO_WritePin(Port_sclk, Pin_sclk, GPIO_PIN_RESET)

extern TIM_HandleTypeDef htim2;

RFFC::RFFC(GPIO_TypeDef *port_sclk, uint16_t pin_sclk, GPIO_TypeDef *port_sdata, uint16_t pin_sdata, GPIO_TypeDef *port_resetx, uint16_t pin_resetx, GPIO_TypeDef *port_enx, uint16_t pin_enx)
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	80fb      	strh	r3, [r7, #6]
{
	Port_sclk = port_sclk;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	601a      	str	r2, [r3, #0]
	Pin_sclk = pin_sclk;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	88fa      	ldrh	r2, [r7, #6]
 8000796:	809a      	strh	r2, [r3, #4]
	Port_sdata = port_sdata;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	609a      	str	r2, [r3, #8]
	Pin_sdata = pin_sdata;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	8b3a      	ldrh	r2, [r7, #24]
 80007a2:	819a      	strh	r2, [r3, #12]
	Port_resetx = port_resetx;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	69fa      	ldr	r2, [r7, #28]
 80007a8:	611a      	str	r2, [r3, #16]
	Pin_resetx = pin_resetx;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	8c3a      	ldrh	r2, [r7, #32]
 80007ae:	829a      	strh	r2, [r3, #20]
	Port_enx = port_enx;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007b4:	619a      	str	r2, [r3, #24]
	Pin_enx = pin_enx;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80007ba:	839a      	strh	r2, [r3, #28]
}
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <_ZN4RFFC4readEh>:
	RFFC5071_SCL();
	*/
}

uint16_t RFFC::read(uint8_t reg)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	uint8_t rmask = 0x80;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	73bb      	strb	r3, [r7, #14]
	uint16_t vmask = 0x8000;
 80007e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e4:	81bb      	strh	r3, [r7, #12]
	uint16_t val = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	817b      	strh	r3, [r7, #10]
	uint8_t ireg = 0x80 | reg;
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007f0:	727b      	strb	r3, [r7, #9]
	 *
	 *
	 */

	//two clocks before enx goes low, undocumented
	RFFC5071_SCL();
 80007f2:	499c      	ldr	r1, [pc, #624]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 80007f4:	200a      	movs	r0, #10
 80007f6:	f7ff fd53 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fdb9 	bl	800137c <HAL_GPIO_WritePin>
 800080a:	4996      	ldr	r1, [pc, #600]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 800080c:	200a      	movs	r0, #10
 800080e:	f7ff fd47 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	889b      	ldrh	r3, [r3, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	4619      	mov	r1, r3
 800081e:	f000 fdad 	bl	800137c <HAL_GPIO_WritePin>
	RFFC5071_SCL();
 8000822:	4990      	ldr	r1, [pc, #576]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 8000824:	200a      	movs	r0, #10
 8000826:	f7ff fd3b 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	889b      	ldrh	r3, [r3, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	f000 fda1 	bl	800137c <HAL_GPIO_WritePin>
 800083a:	498a      	ldr	r1, [pc, #552]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 800083c:	200a      	movs	r0, #10
 800083e:	f7ff fd2f 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	889b      	ldrh	r3, [r3, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	f000 fd95 	bl	800137c <HAL_GPIO_WritePin>

	//gpio_set_pin_low(chip->enx);
	HAL_GPIO_WritePin(Port_enx, Pin_enx, GPIO_PIN_RESET);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6998      	ldr	r0, [r3, #24]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	8b9b      	ldrh	r3, [r3, #28]
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	f000 fd8d 	bl	800137c <HAL_GPIO_WritePin>

	//clock out the undefined bit, set sda = 0
	//gpio_set_pin_low(chip->sda);
	HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_RESET);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6898      	ldr	r0, [r3, #8]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	899b      	ldrh	r3, [r3, #12]
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	f000 fd85 	bl	800137c <HAL_GPIO_WritePin>

	RFFC5071_SCL();
 8000872:	497c      	ldr	r1, [pc, #496]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 8000874:	200a      	movs	r0, #10
 8000876:	f7ff fd13 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	4619      	mov	r1, r3
 8000886:	f000 fd79 	bl	800137c <HAL_GPIO_WritePin>
 800088a:	4976      	ldr	r1, [pc, #472]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 800088c:	200a      	movs	r0, #10
 800088e:	f7ff fd07 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	f000 fd6d 	bl	800137c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_SET); //it was reset before
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6898      	ldr	r0, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	899b      	ldrh	r3, [r3, #12]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	f000 fd65 	bl	800137c <HAL_GPIO_WritePin>
	RFFC5071_SCL();
 80008b2:	496c      	ldr	r1, [pc, #432]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff fcf3 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	889b      	ldrh	r3, [r3, #4]
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	f000 fd59 	bl	800137c <HAL_GPIO_WritePin>
 80008ca:	4966      	ldr	r1, [pc, #408]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 80008cc:	200a      	movs	r0, #10
 80008ce:	f7ff fce7 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	889b      	ldrh	r3, [r3, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f000 fd4d 	bl	800137c <HAL_GPIO_WritePin>

	//ireg is reg with R bit set
	for(i=0; i<8; i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	d835      	bhi.n	8000958 <_ZN4RFFC4readEh+0x18c>
	{
		if(rmask & ireg)
 80008ec:	7bba      	ldrb	r2, [r7, #14]
 80008ee:	7a7b      	ldrb	r3, [r7, #9]
 80008f0:	4013      	ands	r3, r2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d008      	beq.n	800090a <_ZN4RFFC4readEh+0x13e>
		{
			//gpio_set_pin_high(chip->sda);
			HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_SET);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6898      	ldr	r0, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	899b      	ldrh	r3, [r3, #12]
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fd3a 	bl	800137c <HAL_GPIO_WritePin>
 8000908:	e007      	b.n	800091a <_ZN4RFFC4readEh+0x14e>
		}
		else
		{
			//gpio_set_pin_low(chip->sda);
			HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_RESET);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6898      	ldr	r0, [r3, #8]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	899b      	ldrh	r3, [r3, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	f000 fd31 	bl	800137c <HAL_GPIO_WritePin>
		}
		RFFC5071_SCL();
 800091a:	4952      	ldr	r1, [pc, #328]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 800091c:	200a      	movs	r0, #10
 800091e:	f7ff fcbf 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	2201      	movs	r2, #1
 800092c:	4619      	mov	r1, r3
 800092e:	f000 fd25 	bl	800137c <HAL_GPIO_WritePin>
 8000932:	494c      	ldr	r1, [pc, #304]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 8000934:	200a      	movs	r0, #10
 8000936:	f7ff fcb3 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	4619      	mov	r1, r3
 8000946:	f000 fd19 	bl	800137c <HAL_GPIO_WritePin>
		rmask >>= 1;
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	105b      	asrs	r3, r3, #1
 800094e:	73bb      	strb	r3, [r7, #14]
	for(i=0; i<8; i++)
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	3301      	adds	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e7c6      	b.n	80008e6 <_ZN4RFFC4readEh+0x11a>
	}
	//1.5 clocks delay
	RFFC5071_SCL();
 8000958:	4942      	ldr	r1, [pc, #264]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 800095a:	200a      	movs	r0, #10
 800095c:	f7ff fca0 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	889b      	ldrh	r3, [r3, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	4619      	mov	r1, r3
 800096c:	f000 fd06 	bl	800137c <HAL_GPIO_WritePin>
 8000970:	493c      	ldr	r1, [pc, #240]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 8000972:	200a      	movs	r0, #10
 8000974:	f7ff fc94 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	889b      	ldrh	r3, [r3, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	f000 fcfa 	bl	800137c <HAL_GPIO_WritePin>
	//set SDA to input for a while
	//ioport_set_pin_dir(chip->sda,IOPORT_DIR_INPUT);
	changePinDirection(Port_sdata, Pin_sdata, 0); //0 for input
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6899      	ldr	r1, [r3, #8]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	899a      	ldrh	r2, [r3, #12]
 8000990:	2300      	movs	r3, #0
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f868 	bl	8000a68 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>
	//now the value
	for(i=0; i<16; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d832      	bhi.n	8000a08 <_ZN4RFFC4readEh+0x23c>
	{
		RFFC5071_SCL();
 80009a2:	4930      	ldr	r1, [pc, #192]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 80009a4:	200a      	movs	r0, #10
 80009a6:	f7ff fc7b 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	889b      	ldrh	r3, [r3, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	f000 fce1 	bl	800137c <HAL_GPIO_WritePin>
 80009ba:	492a      	ldr	r1, [pc, #168]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 80009bc:	200a      	movs	r0, #10
 80009be:	f7ff fc6f 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	889b      	ldrh	r3, [r3, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 fcd5 	bl	800137c <HAL_GPIO_WritePin>
		//if(gpio_pin_is_high(chip->sda))
		if(HAL_GPIO_ReadPin(Port_sdata, Pin_sdata) == GPIO_PIN_SET)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	899b      	ldrh	r3, [r3, #12]
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f000 fcb5 	bl	800134c <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <_ZN4RFFC4readEh+0x22e>
		{
			val |= vmask;
 80009f2:	897a      	ldrh	r2, [r7, #10]
 80009f4:	89bb      	ldrh	r3, [r7, #12]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	817b      	strh	r3, [r7, #10]
		}
		vmask >>= 1;
 80009fa:	89bb      	ldrh	r3, [r7, #12]
 80009fc:	105b      	asrs	r3, r3, #1
 80009fe:	81bb      	strh	r3, [r7, #12]
	for(i=0; i<16; i++)
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	3301      	adds	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e7c9      	b.n	800099c <_ZN4RFFC4readEh+0x1d0>
	}

	HAL_GPIO_WritePin(Port_enx, Pin_enx, GPIO_PIN_SET);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6998      	ldr	r0, [r3, #24]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	8b9b      	ldrh	r3, [r3, #28]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	f000 fcb2 	bl	800137c <HAL_GPIO_WritePin>
	//pull enx high again
	RFFC5071_SCL();
 8000a18:	4912      	ldr	r1, [pc, #72]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f7ff fc40 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f000 fca6 	bl	800137c <HAL_GPIO_WritePin>
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <_ZN4RFFC4readEh+0x298>)
 8000a32:	200a      	movs	r0, #10
 8000a34:	f7ff fc34 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	889b      	ldrh	r3, [r3, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	f000 fc9a 	bl	800137c <HAL_GPIO_WritePin>

	changePinDirection(Port_sdata, Pin_sdata, 1); //1 for output
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6899      	ldr	r1, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	899a      	ldrh	r2, [r3, #12]
 8000a50:	2301      	movs	r3, #1
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f808 	bl	8000a68 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>

	return val;
 8000a58:	897b      	ldrh	r3, [r7, #10]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000210 	.word	0x20000210

08000a68 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>:

//#define PIN_MODE_OUTPUT	1
//#define PIN_MODE_INPUT	0
void RFFC::changePinDirection(GPIO_TypeDef *port, uint16_t pin, uint16_t dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	460b      	mov	r3, r1
 8000a78:	80fb      	strh	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80bb      	strh	r3, [r7, #4]
	if(dir == PIN_MODE_OUTPUT)
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d109      	bne.n	8000a98 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x30>
	{
		port->MODER |= (0x0001<<pin); // GPIO_MODER_MODE8_0;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	88fa      	ldrh	r2, [r7, #6]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	431a      	orrs	r2, r3
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	601a      	str	r2, [r3, #0]
	}
	else if(dir == PIN_MODE_INPUT)
	{
		port->MODER &= ~(0x0003<<pin);
	}
}
 8000a96:	e00c      	b.n	8000ab2 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x4a>
	else if(dir == PIN_MODE_INPUT)
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d109      	bne.n	8000ab2 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x4a>
		port->MODER &= ~(0x0003<<pin);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	43d2      	mvns	r2, r2
 8000aac:	401a      	ands	r2, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b18:	d10b      	bne.n	8000b32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_TIM_Base_MspInit+0x38>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_TIM_Base_MspInit+0x38>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_TIM_Base_MspInit+0x38>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8f6 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <OTG_FS_IRQHandler+0x10>)
 8000b9e:	f000 fd58 	bl	8001652 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20001740 	.word	0x20001740

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f006 ff8c 	bl	8007af8 <__errno>
 8000be0:	4602      	mov	r2, r0
 8000be2:	230c      	movs	r3, #12
 8000be4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20050000 	.word	0x20050000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	2000025c 	.word	0x2000025c
 8000c14:	20001b50 	.word	0x20001b50

08000c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <SystemInit+0x64>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <SystemInit+0x64>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <SystemInit+0x68>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <SystemInit+0x68>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <SystemInit+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <SystemInit+0x68>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <SystemInit+0x68>)
 8000c44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <SystemInit+0x68>)
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SystemInit+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <SystemInit+0x68>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <SystemInit+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SystemInit+0x64>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	40021000 	.word	0x40021000

08000c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c88:	f7ff ffc6 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ca6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <LoopForever+0x16>)
	cmp	r2, r3
 8000cae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f006 ff27 	bl	8007b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb6:	f7ff fb0f 	bl	80002d8 <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000cc0:	080084ac 	.word	0x080084ac
	ldr	r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc8:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000ccc:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000cd0:	20001b4c 	.word	0x20001b4c

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>

08000cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f95f 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f80e 	bl	8000d08 <HAL_InitTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	e001      	b.n	8000cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf8:	f7ff fee2 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d023      	beq.n	8000d64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_InitTick+0x70>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f96b 	bl	800100e <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d809      	bhi.n	8000d58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f935 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_InitTick+0x74>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e004      	b.n	8000d68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e001      	b.n	8000d68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000026c 	.word	0x2000026c

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000026c 	.word	0x2000026c

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_Delay+0x40>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e166      	b.n	8001306 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8158 	beq.w	8001300 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d00b      	beq.n	8001070 <HAL_GPIO_Init+0x48>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	2b11      	cmp	r3, #17
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b12      	cmp	r3, #18
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 0201 	and.w	r2, r3, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0xea>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b12      	cmp	r3, #18
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80b2 	beq.w	8001300 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	4a60      	ldr	r2, [pc, #384]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6613      	str	r3, [r2, #96]	; 0x60
 80011a8:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <HAL_GPIO_Init+0x300>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011de:	d02b      	beq.n	8001238 <HAL_GPIO_Init+0x210>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_GPIO_Init+0x304>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d025      	beq.n	8001234 <HAL_GPIO_Init+0x20c>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x308>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d01f      	beq.n	8001230 <HAL_GPIO_Init+0x208>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_GPIO_Init+0x30c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d019      	beq.n	800122c <HAL_GPIO_Init+0x204>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x310>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_GPIO_Init+0x200>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x314>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00d      	beq.n	8001224 <HAL_GPIO_Init+0x1fc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x318>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d007      	beq.n	8001220 <HAL_GPIO_Init+0x1f8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x31c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d101      	bne.n	800121c <HAL_GPIO_Init+0x1f4>
 8001218:	2307      	movs	r3, #7
 800121a:	e00e      	b.n	800123a <HAL_GPIO_Init+0x212>
 800121c:	2308      	movs	r3, #8
 800121e:	e00c      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001220:	2306      	movs	r3, #6
 8001222:	e00a      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001224:	2305      	movs	r3, #5
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001228:	2304      	movs	r3, #4
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x212>
 800122c:	2303      	movs	r3, #3
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x212>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x300>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_GPIO_Init+0x320>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x320>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_GPIO_Init+0x320>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_GPIO_Init+0x320>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae91 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48001000 	.word	0x48001000
 800133c:	48001400 	.word	0x48001400
 8001340:	48001800 	.word	0x48001800
 8001344:	48001c00 	.word	0x48001c00
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b08f      	sub	sp, #60	; 0x3c
 80013b0:	af0a      	add	r7, sp, #40	; 0x28
 80013b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e116      	b.n	80015ec <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f005 ff8d 	bl	80072f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 ffee 	bl	80043de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	466d      	mov	r5, sp
 800140c:	f106 0410 	add.w	r4, r6, #16
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800141c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001420:	1d33      	adds	r3, r6, #4
 8001422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f002 fedb 	bl	80041e0 <USB_CoreInit>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0d7      	b.n	80015ec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 ffdc 	bl	8004400 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e04a      	b.n	80014e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	333d      	adds	r3, #61	; 0x3d
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	333c      	adds	r3, #60	; 0x3c
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	b298      	uxth	r0, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	3342      	adds	r3, #66	; 0x42
 800148a:	4602      	mov	r2, r0
 800148c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	333f      	adds	r3, #63	; 0x3f
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3344      	adds	r3, #68	; 0x44
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	3348      	adds	r3, #72	; 0x48
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	3350      	adds	r3, #80	; 0x50
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3af      	bcc.n	800144e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e044      	b.n	800157e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	3301      	adds	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3b5      	bcc.n	80014f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	687e      	ldr	r6, [r7, #4]
 8001590:	466d      	mov	r5, sp
 8001592:	f106 0410 	add.w	r4, r6, #16
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a6:	1d33      	adds	r3, r6, #4
 80015a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f002 ff52 	bl	8004454 <USB_DevInit>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e014      	b.n	80015ec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d102      	bne.n	80015e0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 ff62 	bl	80024a4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fed4 	bl	8005392 <USB_DevDisconnect>

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_PCD_Start+0x1c>
 800160c:	2302      	movs	r3, #2
 800160e:	e01c      	b.n	800164a <HAL_PCD_Start+0x56>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fec3 	bl	80043bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fe88 	bl	8005350 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b08d      	sub	sp, #52	; 0x34
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f003 ff46 	bl	80054fa <USB_GetMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 838f 	bne.w	8001d94 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f003 feaa 	bl	80053d4 <USB_ReadInterrupts>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8385 	beq.w	8001d92 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fea1 	bl	80053d4 <USB_ReadInterrupts>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d107      	bne.n	80016ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f002 0202 	and.w	r2, r2, #2
 80016aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fe8f 	bl	80053d4 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b10      	cmp	r3, #16
 80016be:	d161      	bne.n	8001784 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0210 	bic.w	r2, r2, #16
 80016ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f003 020f 	and.w	r2, r3, #15
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	0c5b      	lsrs	r3, r3, #17
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d124      	bne.n	8001746 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d035      	beq.n	8001774 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	6a38      	ldr	r0, [r7, #32]
 800171c:	f003 fcf5 	bl	800510a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800172c:	441a      	add	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173e:	441a      	add	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	e016      	b.n	8001774 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	0c5b      	lsrs	r3, r3, #17
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	2b06      	cmp	r3, #6
 8001750:	d110      	bne.n	8001774 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001758:	2208      	movs	r2, #8
 800175a:	4619      	mov	r1, r3
 800175c:	6a38      	ldr	r0, [r7, #32]
 800175e:	f003 fcd4 	bl	800510a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800176e:	441a      	add	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fe23 	bl	80053d4 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001798:	d16e      	bne.n	8001878 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fe29 	bl	80053fa <USB_ReadDevAllOutEpInterrupt>
 80017a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017aa:	e062      	b.n	8001872 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d057      	beq.n	8001866 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fe4e 	bl	8005462 <USB_ReadDevOutEPInterrupt>
 80017c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017de:	461a      	mov	r2, r3
 80017e0:	2301      	movs	r3, #1
 80017e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fd82 	bl	80022f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	2308      	movs	r3, #8
 8001806:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fdbe 	bl	800238c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	461a      	mov	r2, r3
 8001828:	2310      	movs	r3, #16
 800182a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	461a      	mov	r2, r3
 8001844:	2320      	movs	r3, #32
 8001846:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	461a      	mov	r2, r3
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d199      	bne.n	80017ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fda9 	bl	80053d4 <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800188c:	f040 8087 	bne.w	800199e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fdca 	bl	800542e <USB_ReadDevAllInEpInterrupt>
 800189a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018a0:	e07a      	b.n	8001998 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d06f      	beq.n	800198c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fdf1 	bl	800549e <USB_ReadDevInEPInterrupt>
 80018bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	2201      	movs	r2, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69f9      	ldr	r1, [r7, #28]
 80018e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018e8:	4013      	ands	r3, r2
 80018ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f8:	461a      	mov	r2, r3
 80018fa:	2301      	movs	r3, #1
 80018fc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f005 fd8a 	bl	800741e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4413      	add	r3, r2
 800191c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001920:	461a      	mov	r2, r3
 8001922:	2308      	movs	r3, #8
 8001924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193c:	461a      	mov	r2, r3
 800193e:	2310      	movs	r3, #16
 8001940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001958:	461a      	mov	r2, r3
 800195a:	2340      	movs	r3, #64	; 0x40
 800195c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	2302      	movs	r3, #2
 8001978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fc29 	bl	80021de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	2b00      	cmp	r3, #0
 800199c:	d181      	bne.n	80018a2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fd16 	bl	80053d4 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019b2:	d122      	bne.n	80019fa <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019da:	2100      	movs	r1, #0
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f006 f837 	bl	8007a50 <HAL_PCDEx_LPM_Callback>
 80019e2:	e002      	b.n	80019ea <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f005 fd87 	bl	80074f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fce8 	bl	80053d4 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0e:	d112      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d102      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f005 fd43 	bl	80074ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a34:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fcca 	bl	80053d4 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a4a:	d121      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a5a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d111      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	f003 020f 	and.w	r2, r3, #15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a80:	2101      	movs	r1, #1
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f005 ffe4 	bl	8007a50 <HAL_PCDEx_LPM_Callback>
 8001a88:	e002      	b.n	8001a90 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f005 fd0e 	bl	80074ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fc9d 	bl	80053d4 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa4:	f040 80c5 	bne.w	8001c32 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fe12 	bl	80046ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001acc:	e056      	b.n	8001b7c <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ada:	461a      	mov	r2, r3
 8001adc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ae0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af2:	0151      	lsls	r1, r2, #5
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	440a      	add	r2, r1
 8001af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001afc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b00:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	0151      	lsls	r1, r2, #5
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	440a      	add	r2, r1
 8001b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	0151      	lsls	r1, r2, #5
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	440a      	add	r2, r1
 8001b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b66:	0151      	lsls	r1, r2, #5
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	440a      	add	r2, r1
 8001b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	3301      	adds	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3a3      	bcc.n	8001ace <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f043 030b 	orr.w	r3, r3, #11
 8001bb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc8:	f043 030b 	orr.w	r3, r3, #11
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	e015      	b.n	8001bfc <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001be6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf6:	f043 030b 	orr.w	r3, r3, #11
 8001bfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f003 fc9d 	bl	800555c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fbcc 	bl	80053d4 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d124      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fc62 	bl	8005516 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fda9 	bl	80047ae <USB_GetDevSpeed>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	f001 fa46 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	4620      	mov	r0, r4
 8001c78:	f002 fb04 	bl	8004284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f005 fbf6 	bl	800746e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fb9c 	bl	80053d4 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d10a      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f005 fbd3 	bl	8007452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f002 0208 	and.w	r2, r2, #8
 8001cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fb87 	bl	80053d4 <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f005 fc45 	bl	800756c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fb6c 	bl	80053d4 <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d06:	d10f      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f005 fc18 	bl	8007548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fb51 	bl	80053d4 <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d10a      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f005 fc26 	bl	8007590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fb3b 	bl	80053d4 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d115      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f005 fc16 	bl	80075ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	e000      	b.n	8001d94 <HAL_PCD_IRQHandler+0x742>
      return;
 8001d92:	bf00      	nop
    }
  }
}
 8001d94:	3734      	adds	r7, #52	; 0x34
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}

08001d9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_PCD_SetAddress+0x1a>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e013      	b.n	8001ddc <HAL_PCD_SetAddress+0x42>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fa99 	bl	8005304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	70fb      	strb	r3, [r7, #3]
 8001df6:	460b      	mov	r3, r1
 8001df8:	803b      	strh	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da0f      	bge.n	8001e2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3338      	adds	r3, #56	; 0x38
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
 8001e28:	e00f      	b.n	8001e4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e56:	883a      	ldrh	r2, [r7, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	78ba      	ldrb	r2, [r7, #2]
 8001e60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e74:	78bb      	ldrb	r3, [r7, #2]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d102      	bne.n	8001e80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_PCD_EP_Open+0xaa>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_Open+0xc8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fca5 	bl	80047ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0f      	bge.n	8001ee8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3338      	adds	r3, #56	; 0x38
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
 8001ee6:	e00f      	b.n	8001f08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 020f 	and.w	r2, r3, #15
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_PCD_EP_Close+0x6e>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e00e      	b.n	8001f40 <HAL_PCD_EP_Close+0x8c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fce3 	bl	80048fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	460b      	mov	r3, r1
 8001f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2200      	movs	r2, #0
 8001f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	7afb      	ldrb	r3, [r7, #11]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f96:	7afb      	ldrb	r3, [r7, #11]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6979      	ldr	r1, [r7, #20]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 ff60 	bl	8004e6c <USB_EP0StartXfer>
 8001fac:	e005      	b.n	8001fba <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fd7d 	bl	8004ab4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 020f 	and.w	r2, r3, #15
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	460b      	mov	r3, r1
 8002002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	f003 020f 	and.w	r2, r3, #15
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	3338      	adds	r3, #56	; 0x38
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	3304      	adds	r3, #4
 800201a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2201      	movs	r2, #1
 8002032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002034:	7afb      	ldrb	r3, [r7, #11]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	b2da      	uxtb	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	4618      	mov	r0, r3
 8002052:	f002 ff0b 	bl	8004e6c <USB_EP0StartXfer>
 8002056:	e005      	b.n	8002064 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6979      	ldr	r1, [r7, #20]
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fd28 	bl	8004ab4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d901      	bls.n	800208c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e04e      	b.n	800212a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800208c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da0f      	bge.n	80020b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	705a      	strb	r2, [r3, #1]
 80020b2:	e00d      	b.n	80020d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	3304      	adds	r3, #4
 80020c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_EP_SetStall+0x82>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e01c      	b.n	800212a <HAL_PCD_EP_SetStall+0xbc>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 f82c 	bl	800515c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f003 fa1e 	bl	800555c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d901      	bls.n	8002150 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e042      	b.n	80021d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0f      	bge.n	8002178 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 020f 	and.w	r2, r3, #15
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3338      	adds	r3, #56	; 0x38
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00f      	b.n	8002198 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 020f 	and.w	r2, r3, #15
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_PCD_EP_ClrStall+0x86>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e00e      	b.n	80021d6 <HAL_PCD_EP_ClrStall+0xa4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f836 	bl	8005238 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b088      	sub	sp, #32
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d901      	bls.n	8002216 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	d902      	bls.n	8002232 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3303      	adds	r3, #3
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223a:	e026      	b.n	800228a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	429a      	cmp	r2, r3
 8002250:	d902      	bls.n	8002258 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3303      	adds	r3, #3
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68d9      	ldr	r1, [r3, #12]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	b29b      	uxth	r3, r3
 800226c:	6978      	ldr	r0, [r7, #20]
 800226e:	f002 ff1b 	bl	80050a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	441a      	add	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	441a      	add	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	b29b      	uxth	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	429a      	cmp	r2, r3
 800229e:	d809      	bhi.n	80022b4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d203      	bcs.n	80022b4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1c3      	bne.n	800223c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d811      	bhi.n	80022e4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	2201      	movs	r2, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	43db      	mvns	r3, r3
 80022da:	6939      	ldr	r1, [r7, #16]
 80022dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e0:	4013      	ands	r3, r2
 80022e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	333c      	adds	r3, #60	; 0x3c
 8002308:	3304      	adds	r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <PCD_EP_OutXfrComplete_int+0x98>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d124      	bne.n	8002370 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e01a      	b.n	800237c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	2320      	movs	r3, #32
 8002360:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f005 f83d 	bl	80073e8 <HAL_PCD_DataOutStageCallback>
 800236e:	e005      	b.n	800237c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f005 f836 	bl	80073e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	4f54310a 	.word	0x4f54310a

0800238c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	333c      	adds	r3, #60	; 0x3c
 80023a4:	3304      	adds	r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <PCD_EP_OutSetupPacket_int+0x64>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d90e      	bls.n	80023e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f004 ffef 	bl	80073c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	4f54300a 	.word	0x4f54300a

080023f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
 8002400:	4613      	mov	r3, r2
 8002402:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002412:	883b      	ldrh	r3, [r7, #0]
 8002414:	0419      	lsls	r1, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	430a      	orrs	r2, r1
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
 8002420:	e028      	b.n	8002474 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e00d      	b.n	8002452 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	3340      	adds	r3, #64	; 0x40
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4413      	add	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	3b01      	subs	r3, #1
 8002458:	429a      	cmp	r2, r3
 800245a:	d3ec      	bcc.n	8002436 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800245c:	883b      	ldrh	r3, [r7, #0]
 800245e:	0418      	lsls	r0, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	3b01      	subs	r3, #1
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	4302      	orrs	r2, r0
 800246c:	3340      	adds	r3, #64	; 0x40
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	f043 0303 	orr.w	r3, r3, #3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <HAL_PWREx_GetVoltageRange+0x18>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000

08002508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002516:	d130      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002524:	d038      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2232      	movs	r2, #50	; 0x32
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9b      	lsrs	r3, r3, #18
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800254c:	e002      	b.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3b01      	subs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d102      	bne.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f2      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002574:	d110      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e00f      	b.n	800259a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d007      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002596:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40007000 	.word	0x40007000
 80025ac:	20000000 	.word	0x20000000
 80025b0:	431bde83 	.word	0x431bde83

080025b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c2:	6053      	str	r3, [r2, #4]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40007000 	.word	0x40007000

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f000 bc16 	b.w	8002e14 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4ba0      	ldr	r3, [pc, #640]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f2:	4b9e      	ldr	r3, [pc, #632]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80e4 	beq.w	80027d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x4c>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	f040 808b 	bne.w	800272e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 8087 	bne.w	800272e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002620:	4b92      	ldr	r3, [pc, #584]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x64>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e3ed      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1a      	ldr	r2, [r3, #32]
 800263c:	4b8b      	ldr	r3, [pc, #556]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_RCC_OscConfig+0x7e>
 8002648:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002650:	e005      	b.n	800265e <HAL_RCC_OscConfig+0x8a>
 8002652:	4b86      	ldr	r3, [pc, #536]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265e:	4293      	cmp	r3, r2
 8002660:	d223      	bcs.n	80026aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd52 	bl	8003110 <RCC_SetFlashLatencyFromMSIRange>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e3ce      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002676:	4b7d      	ldr	r3, [pc, #500]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7c      	ldr	r2, [pc, #496]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b7a      	ldr	r3, [pc, #488]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4977      	ldr	r1, [pc, #476]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002694:	4b75      	ldr	r3, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	4972      	ldr	r1, [pc, #456]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
 80026a8:	e025      	b.n	80026f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6f      	ldr	r2, [pc, #444]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	496a      	ldr	r1, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c8:	4b68      	ldr	r3, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	4965      	ldr	r1, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fd12 	bl	8003110 <RCC_SetFlashLatencyFromMSIRange>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e38e      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f6:	f000 fc75 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 80026fa:	4601      	mov	r1, r0
 80026fc:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a5a      	ldr	r2, [pc, #360]	; (8002870 <HAL_RCC_OscConfig+0x29c>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	fa21 f303 	lsr.w	r3, r1, r3
 8002712:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_RCC_OscConfig+0x2a0>)
 8002714:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002716:	4b58      	ldr	r3, [pc, #352]	; (8002878 <HAL_RCC_OscConfig+0x2a4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe faf4 	bl	8000d08 <HAL_InitTick>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d052      	beq.n	80027d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	e372      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d032      	beq.n	800279c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002736:	4b4d      	ldr	r3, [pc, #308]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4c      	ldr	r2, [pc, #304]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002742:	f7fe fb31 	bl	8000da8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800274a:	f7fe fb2d 	bl	8000da8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e35b      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002768:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3f      	ldr	r2, [pc, #252]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800276e:	f043 0308 	orr.w	r3, r3, #8
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	493a      	ldr	r1, [pc, #232]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	4935      	ldr	r1, [pc, #212]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	e01a      	b.n	80027d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800279c:	4b33      	ldr	r3, [pc, #204]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fafe 	bl	8000da8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b0:	f7fe fafa 	bl	8000da8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e328      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1dc>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d073      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_OscConfig+0x21c>
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d10e      	bne.n	8002808 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d10b      	bne.n	8002808 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <HAL_RCC_OscConfig+0x298>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d063      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2f0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d15f      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e305      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x24c>
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a15      	ldr	r2, [pc, #84]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e01d      	b.n	800285c <HAL_RCC_OscConfig+0x288>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x270>
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0c      	ldr	r2, [pc, #48]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0x288>
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_RCC_OscConfig+0x298>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a05      	ldr	r2, [pc, #20]	; (800286c <HAL_RCC_OscConfig+0x298>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe faa0 	bl	8000da8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286a:	e010      	b.n	800288e <HAL_RCC_OscConfig+0x2ba>
 800286c:	40021000 	.word	0x40021000
 8002870:	08008430 	.word	0x08008430
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fa94 	bl	8000da8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e2c2      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288e:	4baf      	ldr	r3, [pc, #700]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x2a8>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fa84 	bl	8000da8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fa80 	bl	8000da8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e2ae      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b6:	4ba5      	ldr	r3, [pc, #660]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2d0>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d060      	beq.n	8002994 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_OscConfig+0x310>
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d119      	bne.n	8002912 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d116      	bne.n	8002912 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e4:	4b99      	ldr	r3, [pc, #612]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_OscConfig+0x328>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e28b      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b93      	ldr	r3, [pc, #588]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	4990      	ldr	r1, [pc, #576]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	e040      	b.n	8002994 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d023      	beq.n	8002962 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800291a:	4b8c      	ldr	r3, [pc, #560]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a8b      	ldr	r2, [pc, #556]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002926:	f7fe fa3f 	bl	8000da8 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe fa3b 	bl	8000da8 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e269      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002940:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b7f      	ldr	r3, [pc, #508]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	497c      	ldr	r1, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
 8002960:	e018      	b.n	8002994 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a79      	ldr	r2, [pc, #484]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fa1b 	bl	8000da8 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe fa17 	bl	8000da8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e245      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002988:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d03c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80029aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ae:	4a67      	ldr	r2, [pc, #412]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe f9f6 	bl	8000da8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe f9f2 	bl	8000da8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e220      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80029d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ef      	beq.n	80029c0 <HAL_RCC_OscConfig+0x3ec>
 80029e0:	e01b      	b.n	8002a1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e2:	4b5a      	ldr	r3, [pc, #360]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80029e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e8:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe f9d9 	bl	8000da8 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fa:	f7fe f9d5 	bl	8000da8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e203      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ef      	bne.n	80029fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80a6 	beq.w	8002b74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a2c:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b44      	ldr	r3, [pc, #272]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	4a43      	ldr	r2, [pc, #268]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6593      	str	r3, [r2, #88]	; 0x58
 8002a44:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a50:	2301      	movs	r3, #1
 8002a52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a54:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <HAL_RCC_OscConfig+0x57c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d118      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x57c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <HAL_RCC_OscConfig+0x57c>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe f99c 	bl	8000da8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a74:	f7fe f998 	bl	8000da8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1c6      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_RCC_OscConfig+0x57c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d108      	bne.n	8002aac <HAL_RCC_OscConfig+0x4d8>
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aaa:	e024      	b.n	8002af6 <HAL_RCC_OscConfig+0x522>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d110      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x502>
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad4:	e00f      	b.n	8002af6 <HAL_RCC_OscConfig+0x522>
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7fe f953 	bl	8000da8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe f94f 	bl	8000da8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e17b      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ed      	beq.n	8002b06 <HAL_RCC_OscConfig+0x532>
 8002b2a:	e01a      	b.n	8002b62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f93c 	bl	8000da8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b32:	e00f      	b.n	8002b54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe f938 	bl	8000da8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d906      	bls.n	8002b54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e164      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	4ba8      	ldr	r3, [pc, #672]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e8      	bne.n	8002b34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b62:	7ffb      	ldrb	r3, [r7, #31]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4ba3      	ldr	r3, [pc, #652]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	4aa2      	ldr	r2, [pc, #648]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d03c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b88:	4b9b      	ldr	r3, [pc, #620]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8e:	4a9a      	ldr	r2, [pc, #616]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe f906 	bl	8000da8 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba0:	f7fe f902 	bl	8000da8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e130      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bb2:	4b91      	ldr	r3, [pc, #580]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x5cc>
 8002bc0:	e01b      	b.n	8002bfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bc8:	4a8b      	ldr	r2, [pc, #556]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f8e9 	bl	8000da8 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bda:	f7fe f8e5 	bl	8000da8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e113      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bec:	4b82      	ldr	r3, [pc, #520]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8107 	beq.w	8002e12 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	f040 80cb 	bne.w	8002da4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c0e:	4b7a      	ldr	r3, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d12c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d123      	bne.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d11b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d113      	bne.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	3b01      	subs	r3, #1
 8002c62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d06d      	beq.n	8002d58 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d068      	beq.n	8002d54 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c8e:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0ba      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002caa:	f7fe f87d 	bl	8000da8 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe f879 	bl	8000da8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0a7      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd0:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b49      	ldr	r3, [pc, #292]	; (8002dfc <HAL_RCC_OscConfig+0x828>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cea:	0212      	lsls	r2, r2, #8
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0552      	lsls	r2, r2, #21
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0652      	lsls	r2, r2, #25
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d0a:	06d2      	lsls	r2, r2, #27
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	493a      	ldr	r1, [pc, #232]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d14:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a37      	ldr	r2, [pc, #220]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d2c:	f7fe f83c 	bl	8000da8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f838 	bl	8000da8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e066      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d52:	e05e      	b.n	8002e12 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e05d      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d156      	bne.n	8002e12 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7c:	f7fe f814 	bl	8000da8 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe f810 	bl	8000da8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e03e      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x7b0>
 8002da2:	e036      	b.n	8002e12 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d031      	beq.n	8002e0e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x824>)
 8002dd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fd ffe3 	bl	8000da8 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e00c      	b.n	8002e00 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fd ffdf 	bl	8000da8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d905      	bls.n	8002e00 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e00d      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x848>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ec      	bne.n	8002de6 <HAL_RCC_OscConfig+0x812>
 8002e0c:	e001      	b.n	8002e12 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0c8      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4961      	ldr	r1, [pc, #388]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b0      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d04c      	beq.n	8002f0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e78:	4b56      	ldr	r3, [pc, #344]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d121      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e09e      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d115      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e092      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e086      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb8:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e07e      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 0203 	bic.w	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	493f      	ldr	r1, [pc, #252]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eda:	f7fd ff65 	bl	8000da8 <HAL_GetTick>
 8002ede:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee2:	f7fd ff61 	bl	8000da8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e066      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 020c 	and.w	r2, r3, #12
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d1eb      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	492c      	ldr	r1, [pc, #176]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d210      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4924      	ldr	r1, [pc, #144]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e036      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4918      	ldr	r1, [pc, #96]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4910      	ldr	r1, [pc, #64]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f96:	f000 f825 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	fa21 f303 	lsr.w	r3, r1, r3
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fea4 	bl	8000d08 <HAL_InitTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08008430 	.word	0x08008430
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x34>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d121      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d11e      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e005      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003040:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003054:	e00a      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d102      	bne.n	8003062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e004      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d101      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003068:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800306a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d133      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0xa4>
 8003082:	2b03      	cmp	r3, #3
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0xaa>
 8003086:	e005      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800308a:	617b      	str	r3, [r7, #20]
      break;
 800308c:	e005      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003090:	617b      	str	r3, [r7, #20]
      break;
 8003092:	e002      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	617b      	str	r3, [r7, #20]
      break;
 8003098:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	3301      	adds	r3, #1
 80030a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	fb02 f203 	mul.w	r2, r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0e5b      	lsrs	r3, r3, #25
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030da:	69bb      	ldr	r3, [r7, #24]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3724      	adds	r7, #36	; 0x24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08008440 	.word	0x08008440
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200

080030f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000

08003110 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003128:	f7ff f9e0 	bl	80024ec <HAL_PWREx_GetVoltageRange>
 800312c:	6178      	str	r0, [r7, #20]
 800312e:	e014      	b.n	800315a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003148:	f7ff f9d0 	bl	80024ec <HAL_PWREx_GetVoltageRange>
 800314c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003160:	d10b      	bne.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d919      	bls.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2ba0      	cmp	r3, #160	; 0xa0
 800316c:	d902      	bls.n	8003174 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800316e:	2302      	movs	r3, #2
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e013      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003174:	2301      	movs	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e010      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d902      	bls.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003180:	2303      	movs	r3, #3
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e00a      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d102      	bne.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800318c:	2302      	movs	r3, #2
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e004      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d101      	bne.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003198:	2301      	movs	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 0207 	bic.w	r2, r3, #7
 80031a4:	4909      	ldr	r1, [pc, #36]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40022000 	.word	0x40022000

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d8:	2300      	movs	r3, #0
 80031da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031dc:	2300      	movs	r3, #0
 80031de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d03f      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f4:	d01c      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fa:	d802      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003200:	e01f      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003206:	d003      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320c:	d01c      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800320e:	e018      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003210:	4b85      	ldr	r3, [pc, #532]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a84      	ldr	r2, [pc, #528]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321c:	e015      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fadb 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322e:	e00c      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3320      	adds	r3, #32
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fbc2 	bl	80039c0 <RCCEx_PLLSAI2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	74fb      	strb	r3, [r7, #19]
      break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003250:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800325e:	4972      	ldr	r1, [pc, #456]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d03f      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d01c      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003286:	d802      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00e      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xda>
 800328c:	e01f      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800328e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003292:	d003      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003298:	d01c      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800329a:	e018      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800329c:	4b62      	ldr	r3, [pc, #392]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a61      	ldr	r2, [pc, #388]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a8:	e015      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fa95 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ba:	e00c      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3320      	adds	r3, #32
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fb7c 	bl	80039c0 <RCCEx_PLLSAI2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032cc:	e003      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	74fb      	strb	r3, [r7, #19]
      break;
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ea:	494f      	ldr	r1, [pc, #316]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032f2:	e001      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a0 	beq.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	4a40      	ldr	r2, [pc, #256]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003338:	2301      	movs	r3, #1
 800333a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3a      	ldr	r2, [pc, #232]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003348:	f7fd fd2e 	bl	8000da8 <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800334e:	e009      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7fd fd2a 	bl	8000da8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d902      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	74fb      	strb	r3, [r7, #19]
        break;
 8003362:	e005      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d15c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d019      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	4a20      	ldr	r2, [pc, #128]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fd fce9 	bl	8000da8 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	e00b      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fd fce5 	bl	8000da8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d902      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	74fb      	strb	r3, [r7, #19]
            break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ec      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003434:	7c7b      	ldrb	r3, [r7, #17]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4ba6      	ldr	r3, [pc, #664]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	4aa5      	ldr	r2, [pc, #660]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003452:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f023 0203 	bic.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	499c      	ldr	r1, [pc, #624]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003474:	4b97      	ldr	r3, [pc, #604]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 020c 	bic.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	4994      	ldr	r1, [pc, #592]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003496:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	498b      	ldr	r1, [pc, #556]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b8:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	4983      	ldr	r1, [pc, #524]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034da:	4b7e      	ldr	r3, [pc, #504]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e8:	497a      	ldr	r1, [pc, #488]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034fc:	4b75      	ldr	r3, [pc, #468]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	4972      	ldr	r1, [pc, #456]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351e:	4b6d      	ldr	r3, [pc, #436]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352c:	4969      	ldr	r1, [pc, #420]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003540:	4b64      	ldr	r3, [pc, #400]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354e:	4961      	ldr	r1, [pc, #388]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	4958      	ldr	r1, [pc, #352]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	4950      	ldr	r1, [pc, #320]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a6:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4947      	ldr	r1, [pc, #284]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035c8:	4b42      	ldr	r3, [pc, #264]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	493f      	ldr	r1, [pc, #252]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d028      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4936      	ldr	r1, [pc, #216]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003608:	d106      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360a:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003614:	60d3      	str	r3, [r2, #12]
 8003616:	e011      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003620:	d10c      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f8d9 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d028      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	491f      	ldr	r1, [pc, #124]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003666:	d106      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800366e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003672:	60d3      	str	r3, [r2, #12]
 8003674:	e011      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367e:	d10c      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	2101      	movs	r1, #1
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f8aa 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c4:	d108      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c6:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a02      	ldr	r2, [pc, #8]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d0:	60d3      	str	r3, [r2, #12]
 80036d2:	e013      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80036d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2101      	movs	r1, #1
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f879 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02f      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	4929      	ldr	r1, [pc, #164]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003726:	d10d      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f856 	bl	80037e0 <RCCEx_PLLSAI1_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	74bb      	strb	r3, [r7, #18]
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3320      	adds	r3, #32
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f933 	bl	80039c0 <RCCEx_PLLSAI2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003784:	490d      	ldr	r1, [pc, #52]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	4904      	ldr	r1, [pc, #16]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000

080037e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ee:	4b73      	ldr	r3, [pc, #460]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d018      	beq.n	800382c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037fa:	4b70      	ldr	r3, [pc, #448]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d10d      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
       ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003812:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
       ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d044      	beq.n	80038b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e041      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d00c      	beq.n	800384e <RCCEx_PLLSAI1_Config+0x6e>
 8003834:	2b03      	cmp	r3, #3
 8003836:	d013      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x80>
 8003838:	2b01      	cmp	r3, #1
 800383a:	d120      	bne.n	800387e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800383c:	4b5f      	ldr	r3, [pc, #380]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11d      	bne.n	8003884 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e01a      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800384e:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385e:	e013      	b.n	8003888 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003860:	4b56      	ldr	r3, [pc, #344]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10f      	bne.n	800388c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800387c:	e006      	b.n	800388c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      break;
 8003882:	e004      	b.n	800388e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003884:	bf00      	nop
 8003886:	e002      	b.n	800388e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800388c:	bf00      	nop
    }

    if(status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003894:	4b49      	ldr	r3, [pc, #292]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	430b      	orrs	r3, r1
 80038aa:	4944      	ldr	r1, [pc, #272]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d17c      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038b6:	4b41      	ldr	r3, [pc, #260]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a40      	ldr	r2, [pc, #256]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c2:	f7fd fa71 	bl	8000da8 <HAL_GetTick>
 80038c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c8:	e009      	b.n	80038de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ca:	f7fd fa6d 	bl	8000da8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d902      	bls.n	80038de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	73fb      	strb	r3, [r7, #15]
        break;
 80038dc:	e005      	b.n	80038ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ef      	bne.n	80038ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d15f      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d110      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80038fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68d2      	ldr	r2, [r2, #12]
 800390c:	06d2      	lsls	r2, r2, #27
 800390e:	430a      	orrs	r2, r1
 8003910:	492a      	ldr	r1, [pc, #168]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
 8003916:	e027      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d112      	bne.n	8003944 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003926:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	0211      	lsls	r1, r2, #8
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6912      	ldr	r2, [r2, #16]
 8003934:	0852      	lsrs	r2, r2, #1
 8003936:	3a01      	subs	r2, #1
 8003938:	0552      	lsls	r2, r2, #21
 800393a:	430a      	orrs	r2, r1
 800393c:	491f      	ldr	r1, [pc, #124]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	610b      	str	r3, [r1, #16]
 8003942:	e011      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800394c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6952      	ldr	r2, [r2, #20]
 800395a:	0852      	lsrs	r2, r2, #1
 800395c:	3a01      	subs	r2, #1
 800395e:	0652      	lsls	r2, r2, #25
 8003960:	430a      	orrs	r2, r1
 8003962:	4916      	ldr	r1, [pc, #88]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a13      	ldr	r2, [pc, #76]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800396e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003972:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fa18 	bl	8000da8 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800397a:	e009      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800397c:	f7fd fa14 	bl	8000da8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	73fb      	strb	r3, [r7, #15]
          break;
 800398e:	e005      	b.n	800399c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4904      	ldr	r1, [pc, #16]	; (80039bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000

080039c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ce:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0203 	and.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
       ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
       ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d044      	beq.n	8003a90 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e041      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d00c      	beq.n	8003a2e <RCCEx_PLLSAI2_Config+0x6e>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d013      	beq.n	8003a40 <RCCEx_PLLSAI2_Config+0x80>
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d120      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a1c:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11d      	bne.n	8003a64 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e01a      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a2e:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3e:	e013      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a40:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a4c:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a5c:	e006      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      break;
 8003a62:	e004      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a64:	bf00      	nop
 8003a66:	e002      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a68:	bf00      	nop
 8003a6a:	e000      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003a6c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a74:	4b3e      	ldr	r3, [pc, #248]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	4939      	ldr	r1, [pc, #228]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d166      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa2:	f7fd f981 	bl	8000da8 <HAL_GetTick>
 8003aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa8:	e009      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aaa:	f7fd f97d 	bl	8000da8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	73fb      	strb	r3, [r7, #15]
        break;
 8003abc:	e005      	b.n	8003aca <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ef      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d149      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d110      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	0211      	lsls	r1, r2, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68d2      	ldr	r2, [r2, #12]
 8003aec:	06d2      	lsls	r2, r2, #27
 8003aee:	430a      	orrs	r2, r1
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	614b      	str	r3, [r1, #20]
 8003af6:	e011      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6892      	ldr	r2, [r2, #8]
 8003b08:	0211      	lsls	r1, r2, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6912      	ldr	r2, [r2, #16]
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	3a01      	subs	r2, #1
 8003b12:	0652      	lsls	r2, r2, #25
 8003b14:	430a      	orrs	r2, r1
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd f93e 	bl	8000da8 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b30:	f7fd f93a 	bl	8000da8 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
          break;
 8003b42:	e005      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e049      	b.n	8003c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc ffb4 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 f958 	bl	8003e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e047      	b.n	8003ccc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <HAL_TIM_Base_Start+0xb4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d018      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_TIM_Base_Start+0xb8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_TIM_Base_Start+0xbc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_TIM_Base_Start+0xc0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_TIM_Base_Start+0xc4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_TIM_Base_Start+0xc8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d115      	bne.n	8003cb6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_TIM_Base_Start+0xcc>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d015      	beq.n	8003cc8 <HAL_TIM_Base_Start+0xa4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	d011      	beq.n	8003cc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	e008      	b.n	8003cc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e000      	b.n	8003cca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	00010007 	.word	0x00010007

08003cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0a8      	b.n	8003e5e <HAL_TIM_ConfigClockSource+0x16a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d067      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0x124>
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d80b      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x70>
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d073      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0x144>
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d802      	bhi.n	8003d5a <HAL_TIM_ConfigClockSource+0x66>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d06f      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d58:	e078      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d06c      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0x144>
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	d06a      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003d62:	e073      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d64:	2b70      	cmp	r3, #112	; 0x70
 8003d66:	d00d      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0x90>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d804      	bhi.n	8003d76 <HAL_TIM_ConfigClockSource+0x82>
 8003d6c:	2b50      	cmp	r3, #80	; 0x50
 8003d6e:	d033      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0xe4>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d041      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003d74:	e06a      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	d066      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x156>
 8003d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d80:	d017      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003d82:	e063      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6899      	ldr	r1, [r3, #8]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f000 f97c 	bl	8004090 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003da6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]
      break;
 8003db0:	e04c      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f000 f965 	bl	8004090 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd4:	609a      	str	r2, [r3, #8]
      break;
 8003dd6:	e039      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	461a      	mov	r2, r3
 8003de6:	f000 f8d9 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2150      	movs	r1, #80	; 0x50
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f932 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003df6:	e029      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f000 f8f8 	bl	8003ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2160      	movs	r1, #96	; 0x60
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f922 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003e16:	e019      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f000 f8b9 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2140      	movs	r1, #64	; 0x40
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f912 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003e36:	e009      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 f909 	bl	800405a <TIM_ITRx_SetConfig>
        break;
 8003e48:	e000      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a40      	ldr	r2, [pc, #256]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d00f      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3d      	ldr	r2, [pc, #244]	; (8003f80 <TIM_Base_SetConfig+0x118>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <TIM_Base_SetConfig+0x11c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <TIM_Base_SetConfig+0x120>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <TIM_Base_SetConfig+0x124>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d01b      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <TIM_Base_SetConfig+0x118>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d017      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <TIM_Base_SetConfig+0x11c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <TIM_Base_SetConfig+0x120>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <TIM_Base_SetConfig+0x124>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a28      	ldr	r2, [pc, #160]	; (8003f90 <TIM_Base_SetConfig+0x128>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <TIM_Base_SetConfig+0x12c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_Base_SetConfig+0x9a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <TIM_Base_SetConfig+0x130>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d108      	bne.n	8003f14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00f      	beq.n	8003f60 <TIM_Base_SetConfig+0xf8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <TIM_Base_SetConfig+0x124>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0xf8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <TIM_Base_SetConfig+0x128>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0xf8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <TIM_Base_SetConfig+0x12c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0xf8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <TIM_Base_SetConfig+0x130>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d103      	bne.n	8003f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	615a      	str	r2, [r3, #20]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014800 	.word	0x40014800

08003f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0201 	bic.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 030a 	bic.w	r3, r3, #10
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 0210 	bic.w	r2, r3, #16
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	031b      	lsls	r3, r3, #12
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	f043 0307 	orr.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	609a      	str	r2, [r3, #8]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e068      	b.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2e      	ldr	r2, [pc, #184]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01d      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d018      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10c      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40013400 	.word	0x40013400
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40014000 	.word	0x40014000

080041e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041e0:	b084      	sub	sp, #16
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	f107 001c 	add.w	r0, r7, #28
 80041ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d122      	bne.n	800423e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800420c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f001 f9da 	bl	80055ec <USB_CoreReset>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e01a      	b.n	8004274 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f001 f9ce 	bl	80055ec <USB_CoreReset>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
 8004266:	e005      	b.n	8004274 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004280:	b004      	add	sp, #16
 8004282:	4770      	bx	lr

08004284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d165      	bne.n	8004364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a3e      	ldr	r2, [pc, #248]	; (8004394 <USB_SetTurnaroundTime+0x110>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0x2a>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a3d      	ldr	r2, [pc, #244]	; (8004398 <USB_SetTurnaroundTime+0x114>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d802      	bhi.n	80042ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042a8:	230f      	movs	r3, #15
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e05c      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a39      	ldr	r2, [pc, #228]	; (8004398 <USB_SetTurnaroundTime+0x114>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d906      	bls.n	80042c4 <USB_SetTurnaroundTime+0x40>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a38      	ldr	r2, [pc, #224]	; (800439c <USB_SetTurnaroundTime+0x118>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042be:	230e      	movs	r3, #14
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e051      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a35      	ldr	r2, [pc, #212]	; (800439c <USB_SetTurnaroundTime+0x118>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0x56>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a34      	ldr	r2, [pc, #208]	; (80043a0 <USB_SetTurnaroundTime+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d802      	bhi.n	80042da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042d4:	230d      	movs	r3, #13
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e046      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a30      	ldr	r2, [pc, #192]	; (80043a0 <USB_SetTurnaroundTime+0x11c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d906      	bls.n	80042f0 <USB_SetTurnaroundTime+0x6c>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <USB_SetTurnaroundTime+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042ea:	230c      	movs	r3, #12
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e03b      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <USB_SetTurnaroundTime+0x120>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0x82>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <USB_SetTurnaroundTime+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d802      	bhi.n	8004306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004300:	230b      	movs	r3, #11
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e030      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <USB_SetTurnaroundTime+0x124>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d906      	bls.n	800431c <USB_SetTurnaroundTime+0x98>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <USB_SetTurnaroundTime+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004316:	230a      	movs	r3, #10
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e025      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a23      	ldr	r2, [pc, #140]	; (80043ac <USB_SetTurnaroundTime+0x128>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d906      	bls.n	8004332 <USB_SetTurnaroundTime+0xae>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <USB_SetTurnaroundTime+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d802      	bhi.n	8004332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800432c:	2309      	movs	r3, #9
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e01a      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <USB_SetTurnaroundTime+0x12c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d906      	bls.n	8004348 <USB_SetTurnaroundTime+0xc4>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <USB_SetTurnaroundTime+0x130>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d802      	bhi.n	8004348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004342:	2308      	movs	r3, #8
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e00f      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4a1a      	ldr	r2, [pc, #104]	; (80043b4 <USB_SetTurnaroundTime+0x130>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d906      	bls.n	800435e <USB_SetTurnaroundTime+0xda>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <USB_SetTurnaroundTime+0x134>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d802      	bhi.n	800435e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004358:	2307      	movs	r3, #7
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e004      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800435e:	2306      	movs	r3, #6
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e001      	b.n	8004368 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004364:	2309      	movs	r3, #9
 8004366:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	00d8acbf 	.word	0x00d8acbf
 8004398:	00e4e1bf 	.word	0x00e4e1bf
 800439c:	00f423ff 	.word	0x00f423ff
 80043a0:	0106737f 	.word	0x0106737f
 80043a4:	011a499f 	.word	0x011a499f
 80043a8:	01312cff 	.word	0x01312cff
 80043ac:	014ca43f 	.word	0x014ca43f
 80043b0:	016e35ff 	.word	0x016e35ff
 80043b4:	01a6ab1f 	.word	0x01a6ab1f
 80043b8:	01e847ff 	.word	0x01e847ff

080043bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d106      	bne.n	800442c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	e00b      	b.n	8004444 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	e001      	b.n	8004444 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e003      	b.n	800444c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004444:	2032      	movs	r0, #50	; 0x32
 8004446:	f7fc fcbb 	bl	8000dc0 <HAL_Delay>

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004454:	b084      	sub	sp, #16
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	e009      	b.n	8004488 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3340      	adds	r3, #64	; 0x40
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	2200      	movs	r2, #0
 8004480:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	3301      	adds	r3, #1
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b0e      	cmp	r3, #14
 800448c:	d9f2      	bls.n	8004474 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11c      	bne.n	80044ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044a2:	f043 0302 	orr.w	r3, r3, #2
 80044a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e005      	b.n	80044da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044e0:	461a      	mov	r2, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	4619      	mov	r1, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f4:	461a      	mov	r2, r3
 80044f6:	680b      	ldr	r3, [r1, #0]
 80044f8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044fa:	2103      	movs	r1, #3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f93d 	bl	800477c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004502:	2110      	movs	r1, #16
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8f1 	bl	80046ec <USB_FlushTxFifo>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f90f 	bl	8004738 <USB_FlushRxFifo>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	461a      	mov	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e043      	b.n	80045d6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004564:	d118      	bne.n	8004598 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	461a      	mov	r2, r3
 800457a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	e013      	b.n	80045aa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	461a      	mov	r2, r3
 8004590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e008      	b.n	80045aa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	461a      	mov	r2, r3
 80045a6:	2300      	movs	r3, #0
 80045a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	461a      	mov	r2, r3
 80045b8:	2300      	movs	r3, #0
 80045ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	461a      	mov	r2, r3
 80045ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3301      	adds	r3, #1
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3b7      	bcc.n	800454e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	e043      	b.n	800466c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fa:	d118      	bne.n	800462e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	461a      	mov	r2, r3
 8004610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e013      	b.n	8004640 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	461a      	mov	r2, r3
 8004626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	e008      	b.n	8004640 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3b7      	bcc.n	80045e4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004686:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <USB_DevInit+0x294>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f043 0208 	orr.w	r2, r3, #8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046e2:	b004      	add	sp, #16
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	803c3800 	.word	0x803c3800

080046ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <USB_FlushTxFifo+0x48>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e006      	b.n	8004726 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d0f0      	beq.n	8004706 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	00030d40 	.word	0x00030d40

08004738 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2210      	movs	r2, #16
 8004748:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <USB_FlushRxFifo+0x40>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e006      	b.n	800476a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b10      	cmp	r3, #16
 8004766:	d0f0      	beq.n	800474a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	00030d40 	.word	0x00030d40

0800477c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0306 	and.w	r3, r3, #6
 80047c6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d002      	beq.n	80047d4 <USB_GetDevSpeed+0x26>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d102      	bne.n	80047da <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047d4:	2302      	movs	r3, #2
 80047d6:	75fb      	strb	r3, [r7, #23]
 80047d8:	e001      	b.n	80047de <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80047da:	230f      	movs	r3, #15
 80047dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047de:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d13a      	bne.n	800487e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	68f9      	ldr	r1, [r7, #12]
 8004822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004826:	4313      	orrs	r3, r2
 8004828:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d155      	bne.n	80048ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	78db      	ldrb	r3, [r3, #3]
 800485a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800485c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	059b      	lsls	r3, r3, #22
 8004862:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004864:	4313      	orrs	r3, r2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e036      	b.n	80048ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	2101      	movs	r1, #1
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	68f9      	ldr	r1, [r7, #12]
 8004898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800489c:	4313      	orrs	r3, r2
 800489e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	78db      	ldrb	r3, [r3, #3]
 80048d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048d2:	430b      	orrs	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	785b      	ldrb	r3, [r3, #1]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d161      	bne.n	80049dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492e:	d11f      	bne.n	8004970 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800494e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800496e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004990:	4013      	ands	r3, r2
 8004992:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b4:	4013      	ands	r3, r2
 80049b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	0159      	lsls	r1, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	440b      	add	r3, r1
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	4619      	mov	r1, r3
 80049d4:	4b35      	ldr	r3, [pc, #212]	; (8004aac <USB_DeactivateEndpoint+0x1b0>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]
 80049da:	e060      	b.n	8004a9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f2:	d11f      	bne.n	8004a34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	2101      	movs	r1, #1
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a54:	4013      	ands	r3, r2
 8004a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	43db      	mvns	r3, r3
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0159      	lsls	r1, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	440b      	add	r3, r1
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	4619      	mov	r1, r3
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <USB_DeactivateEndpoint+0x1b4>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	ec337800 	.word	0xec337800
 8004ab0:	eff37800 	.word	0xeff37800

08004ab4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f040 810a 	bne.w	8004ce6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d132      	bne.n	8004b40 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004afc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	0151      	lsls	r1, r2, #5
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	440a      	add	r2, r1
 8004b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	0cdb      	lsrs	r3, r3, #19
 8004b3a:	04db      	lsls	r3, r3, #19
 8004b3c:	6113      	str	r3, [r2, #16]
 8004b3e:	e074      	b.n	8004c2a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5a:	0cdb      	lsrs	r3, r3, #19
 8004b5c:	04db      	lsls	r3, r3, #19
 8004b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6959      	ldr	r1, [r3, #20]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	440b      	add	r3, r1
 8004b9c:	1e59      	subs	r1, r3, #1
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	04d9      	lsls	r1, r3, #19
 8004ba8:	4baf      	ldr	r3, [pc, #700]	; (8004e68 <USB_EPStartXfer+0x3b4>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6939      	ldr	r1, [r7, #16]
 8004bae:	0148      	lsls	r0, r1, #5
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	4401      	add	r1, r0
 8004bb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd2:	6939      	ldr	r1, [r7, #16]
 8004bd4:	0148      	lsls	r0, r1, #5
 8004bd6:	6979      	ldr	r1, [r7, #20]
 8004bd8:	4401      	add	r1, r0
 8004bda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bde:	4313      	orrs	r3, r2
 8004be0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	78db      	ldrb	r3, [r3, #3]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11f      	bne.n	8004c2a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c28:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c48:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	78db      	ldrb	r3, [r3, #3]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d015      	beq.n	8004c7e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8100 	beq.w	8004e5c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	634b      	str	r3, [r1, #52]	; 0x34
 8004c7c:	e0ee      	b.n	8004e5c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d110      	bne.n	8004cb0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e00f      	b.n	8004cd0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f9e2 	bl	80050a8 <USB_WritePacket>
 8004ce4:	e0ba      	b.n	8004e5c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d00:	0cdb      	lsrs	r3, r3, #19
 8004d02:	04db      	lsls	r3, r3, #19
 8004d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d123      	bne.n	8004d7a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	6939      	ldr	r1, [r7, #16]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	6979      	ldr	r1, [r7, #20]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d76:	6113      	str	r3, [r2, #16]
 8004d78:	e033      	b.n	8004de2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4413      	add	r3, r2
 8004d84:	1e5a      	subs	r2, r3, #1
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	89fb      	ldrh	r3, [r7, #14]
 8004da0:	04d9      	lsls	r1, r3, #19
 8004da2:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <USB_EPStartXfer+0x3b4>)
 8004da4:	400b      	ands	r3, r1
 8004da6:	6939      	ldr	r1, [r7, #16]
 8004da8:	0148      	lsls	r0, r1, #5
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	4401      	add	r1, r0
 8004dae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	89f9      	ldrh	r1, [r7, #14]
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd2:	6939      	ldr	r1, [r7, #16]
 8004dd4:	0148      	lsls	r0, r1, #5
 8004dd6:	6979      	ldr	r1, [r7, #20]
 8004dd8:	4401      	add	r1, r0
 8004dda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dde:	4313      	orrs	r3, r2
 8004de0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	78db      	ldrb	r3, [r3, #3]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d128      	bne.n	8004e3c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d110      	bne.n	8004e1c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e00f      	b.n	8004e3c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	1ff80000 	.word	0x1ff80000

08004e6c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f040 80ab 	bne.w	8004fe0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d132      	bne.n	8004ef8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef0:	0cdb      	lsrs	r3, r3, #19
 8004ef2:	04db      	lsls	r3, r3, #19
 8004ef4:	6113      	str	r3, [r2, #16]
 8004ef6:	e04e      	b.n	8004f96 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f12:	0cdb      	lsrs	r3, r3, #19
 8004f14:	04db      	lsls	r3, r3, #19
 8004f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d903      	bls.n	8004f50 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	0148      	lsls	r0, r1, #5
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	4401      	add	r1, r0
 8004f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d06d      	beq.n	800509a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	68f9      	ldr	r1, [r7, #12]
 8004fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	634b      	str	r3, [r1, #52]	; 0x34
 8004fde:	e05c      	b.n	800509a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	0cdb      	lsrs	r3, r3, #19
 8004ffc:	04db      	lsls	r3, r3, #19
 8004ffe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800501e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005022:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	0148      	lsls	r0, r1, #5
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	4401      	add	r1, r0
 8005072:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005094:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005098:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	460b      	mov	r3, r1
 80050b8:	71fb      	strb	r3, [r7, #7]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80050c6:	88bb      	ldrh	r3, [r7, #4]
 80050c8:	3303      	adds	r3, #3
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e00f      	b.n	80050f4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	031a      	lsls	r2, r3, #12
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e0:	461a      	mov	r2, r3
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3304      	adds	r3, #4
 80050ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3301      	adds	r3, #1
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3eb      	bcc.n	80050d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	; 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800510a:	b480      	push	{r7}
 800510c:	b089      	sub	sp, #36	; 0x24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	3303      	adds	r3, #3
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e00b      	b.n	8005146 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	601a      	str	r2, [r3, #0]
    pDest++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	3301      	adds	r3, #1
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d3ef      	bcc.n	800512e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800514e:	69fb      	ldr	r3, [r7, #28]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3724      	adds	r7, #36	; 0x24
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d12c      	bne.n	80051d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	db12      	blt.n	80051b0 <USB_EPSetStall+0x54>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00f      	beq.n	80051b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e02b      	b.n	800522a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db12      	blt.n	800520a <USB_EPSetStall+0xae>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00f      	beq.n	800520a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005204:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005208:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d128      	bne.n	80052a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	78db      	ldrb	r3, [r3, #3]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d003      	beq.n	8005284 <USB_EPClearStall+0x4c>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d138      	bne.n	80052f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e027      	b.n	80052f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d003      	beq.n	80052d6 <USB_EPClearStall+0x9e>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d10f      	bne.n	80052f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005322:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005326:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537e:	f023 0302 	bic.w	r3, r3, #2
 8005382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053ac:	f023 0303 	bic.w	r3, r3, #3
 80053b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c0:	f043 0302 	orr.w	r3, r3, #2
 80053c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4013      	ands	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	0c1b      	lsrs	r3, r3, #16
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	b29b      	uxth	r3, r3
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005490:	68bb      	ldr	r3, [r7, #8]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800549e:	b480      	push	{r7}
 80054a0:	b087      	sub	sp, #28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	01db      	lsls	r3, r3, #7
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4013      	ands	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054ec:	68bb      	ldr	r3, [r7, #8]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0301 	and.w	r3, r3, #1
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005530:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	333c      	adds	r3, #60	; 0x3c
 800556e:	3304      	adds	r3, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <USB_EP0_OutStart+0x8c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d90a      	bls.n	8005592 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558c:	d101      	bne.n	8005592 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e024      	b.n	80055dc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	f043 0318 	orr.w	r3, r3, #24
 80055c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055d8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	4f54300a 	.word	0x4f54300a

080055ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a13      	ldr	r2, [pc, #76]	; (8005650 <USB_CoreReset+0x64>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e01b      	b.n	8005642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	daf2      	bge.n	80055f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a09      	ldr	r2, [pc, #36]	; (8005650 <USB_CoreReset+0x64>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b01      	cmp	r3, #1
 800563e:	d0f0      	beq.n	8005622 <USB_CoreReset+0x36>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	00030d40 	.word	0x00030d40

08005654 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005660:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005664:	f002 fa72 	bl	8007b4c <malloc>
 8005668:	4603      	mov	r3, r0
 800566a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d105      	bne.n	800567e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800567a:	2302      	movs	r3, #2
 800567c:	e066      	b.n	800574c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	7c1b      	ldrb	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d119      	bne.n	80056c2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800568e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005692:	2202      	movs	r2, #2
 8005694:	2181      	movs	r1, #129	; 0x81
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f002 f814 	bl	80076c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a6:	2202      	movs	r2, #2
 80056a8:	2101      	movs	r1, #1
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f002 f80a 	bl	80076c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2210      	movs	r2, #16
 80056bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80056c0:	e016      	b.n	80056f0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	2202      	movs	r2, #2
 80056c6:	2181      	movs	r1, #129	; 0x81
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fffb 	bl	80076c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	2202      	movs	r2, #2
 80056d8:	2101      	movs	r1, #1
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fff2 	bl	80076c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2210      	movs	r2, #16
 80056ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056f0:	2308      	movs	r3, #8
 80056f2:	2203      	movs	r2, #3
 80056f4:	2182      	movs	r1, #130	; 0x82
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 ffe4 	bl	80076c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	7c1b      	ldrb	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800572c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005730:	2101      	movs	r1, #1
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 f940 	bl	80079b8 <USBD_LL_PrepareReceive>
 8005738:	e007      	b.n	800574a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	2101      	movs	r1, #1
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f002 f937 	bl	80079b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005760:	2181      	movs	r1, #129	; 0x81
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 ffec 	bl	8007740 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800576e:	2101      	movs	r1, #1
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 ffe5 	bl	8007740 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800577e:	2182      	movs	r1, #130	; 0x82
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 ffdd 	bl	8007740 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00e      	beq.n	80057be <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 f9d3 	bl	8007b5c <free>
    pdev->pClassData = NULL;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03a      	beq.n	8005868 <USBD_CDC_Setup+0xa0>
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	f040 8097 	bne.w	8005926 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	88db      	ldrh	r3, [r3, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d029      	beq.n	8005854 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b25b      	sxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	da11      	bge.n	800582e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005816:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	88d2      	ldrh	r2, [r2, #6]
 800581c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800581e:	6939      	ldr	r1, [r7, #16]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	88db      	ldrh	r3, [r3, #6]
 8005824:	461a      	mov	r2, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 facf 	bl	8006dca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800582c:	e082      	b.n	8005934 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	785a      	ldrb	r2, [r3, #1]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	88db      	ldrh	r3, [r3, #6]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005844:	6939      	ldr	r1, [r7, #16]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	88db      	ldrh	r3, [r3, #6]
 800584a:	461a      	mov	r2, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fae8 	bl	8006e22 <USBD_CtlPrepareRx>
      break;
 8005852:	e06f      	b.n	8005934 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	7850      	ldrb	r0, [r2, #1]
 8005860:	2200      	movs	r2, #0
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	4798      	blx	r3
      break;
 8005866:	e065      	b.n	8005934 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b0b      	cmp	r3, #11
 800586e:	d84f      	bhi.n	8005910 <USBD_CDC_Setup+0x148>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <USBD_CDC_Setup+0xb0>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058a9 	.word	0x080058a9
 800587c:	0800591f 	.word	0x0800591f
 8005880:	08005911 	.word	0x08005911
 8005884:	08005911 	.word	0x08005911
 8005888:	08005911 	.word	0x08005911
 800588c:	08005911 	.word	0x08005911
 8005890:	08005911 	.word	0x08005911
 8005894:	08005911 	.word	0x08005911
 8005898:	08005911 	.word	0x08005911
 800589c:	08005911 	.word	0x08005911
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	080058f9 	.word	0x080058f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d107      	bne.n	80058c2 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058b2:	f107 030c 	add.w	r3, r7, #12
 80058b6:	2202      	movs	r2, #2
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 fa85 	bl	8006dca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058c0:	e030      	b.n	8005924 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fa0f 	bl	8006ce8 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ca:	2303      	movs	r3, #3
 80058cc:	75fb      	strb	r3, [r7, #23]
          break;
 80058ce:	e029      	b.n	8005924 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d107      	bne.n	80058ea <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058da:	f107 030f 	add.w	r3, r7, #15
 80058de:	2201      	movs	r2, #1
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fa71 	bl	8006dca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058e8:	e01c      	b.n	8005924 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 f9fb 	bl	8006ce8 <USBD_CtlError>
            ret = USBD_FAIL;
 80058f2:	2303      	movs	r3, #3
 80058f4:	75fb      	strb	r3, [r7, #23]
          break;
 80058f6:	e015      	b.n	8005924 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d00f      	beq.n	8005922 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 f9ef 	bl	8006ce8 <USBD_CtlError>
            ret = USBD_FAIL;
 800590a:	2303      	movs	r3, #3
 800590c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800590e:	e008      	b.n	8005922 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 f9e8 	bl	8006ce8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005918:	2303      	movs	r3, #3
 800591a:	75fb      	strb	r3, [r7, #23]
          break;
 800591c:	e002      	b.n	8005924 <USBD_CDC_Setup+0x15c>
          break;
 800591e:	bf00      	nop
 8005920:	e008      	b.n	8005934 <USBD_CDC_Setup+0x16c>
          break;
 8005922:	bf00      	nop
      }
      break;
 8005924:	e006      	b.n	8005934 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f9dd 	bl	8006ce8 <USBD_CtlError>
      ret = USBD_FAIL;
 800592e:	2303      	movs	r3, #3
 8005930:	75fb      	strb	r3, [r7, #23]
      break;
 8005932:	bf00      	nop
  }

  return (uint8_t)ret;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800595e:	2303      	movs	r3, #3
 8005960:	e04f      	b.n	8005a02 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005968:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3318      	adds	r3, #24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d029      	beq.n	80059d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	3318      	adds	r3, #24
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	78f9      	ldrb	r1, [r7, #3]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	460b      	mov	r3, r1
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	1a5b      	subs	r3, r3, r1
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4403      	add	r3, r0
 80059a0:	3344      	adds	r3, #68	; 0x44
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80059a8:	fb03 f301 	mul.w	r3, r3, r1
 80059ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d110      	bne.n	80059d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3318      	adds	r3, #24
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059c6:	78f9      	ldrb	r1, [r7, #3]
 80059c8:	2300      	movs	r3, #0
 80059ca:	2200      	movs	r2, #0
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 ffbb 	bl	8007948 <USBD_LL_Transmit>
 80059d2:	e015      	b.n	8005a00 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e015      	b.n	8005a58 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fff9 	bl	8007a28 <USBD_LL_GetRxDataSize>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a52:	4611      	mov	r1, r2
 8005a54:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a6e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d015      	beq.n	8005aa6 <USBD_CDC_EP0_RxReady+0x46>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a80:	2bff      	cmp	r3, #255	; 0xff
 8005a82:	d010      	beq.n	8005aa6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a92:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a9a:	b292      	uxth	r2, r2
 8005a9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2243      	movs	r2, #67	; 0x43
 8005abc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005abe:	4b03      	ldr	r3, [pc, #12]	; (8005acc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000094 	.word	0x20000094

08005ad0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2243      	movs	r2, #67	; 0x43
 8005adc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ade:	4b03      	ldr	r3, [pc, #12]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000050 	.word	0x20000050

08005af0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2243      	movs	r2, #67	; 0x43
 8005afc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005afe:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	200000d8 	.word	0x200000d8

08005b10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b1e:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	2000000c 	.word	0x2000000c

08005b30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e004      	b.n	8005b4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e01a      	b.n	8005c0c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d114      	bne.n	8005c0a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005bfe:	2181      	movs	r1, #129	; 0x81
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fea1 	bl	8007948 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e016      	b.n	8005c60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7c1b      	ldrb	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c44:	2101      	movs	r1, #1
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 feb6 	bl	80079b8 <USBD_LL_PrepareReceive>
 8005c4c:	e007      	b.n	8005c5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	2101      	movs	r1, #1
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 fead 	bl	80079b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e01f      	b.n	8005cc0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	79fa      	ldrb	r2, [r7, #7]
 8005cb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f001 fc87 	bl	80075c8 <USBD_LL_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e016      	b.n	8005d0e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f107 020e 	add.w	r2, r7, #14
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3
 8005d04:	4602      	mov	r2, r0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 fc9e 	bl	8007660 <USBD_LL_Start>
 8005d24:	4603      	mov	r3, r0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
  }

  return USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ff58 	bl	8006c74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d00e      	beq.n	8005e06 <USBD_LL_SetupStage+0x5a>
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d302      	bcc.n	8005df2 <USBD_LL_SetupStage+0x46>
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d014      	beq.n	8005e1a <USBD_LL_SetupStage+0x6e>
 8005df0:	e01d      	b.n	8005e2e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa18 	bl	8006230 <USBD_StdDevReq>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e020      	b.n	8005e48 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa7c 	bl	800630c <USBD_StdItfReq>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e016      	b.n	8005e48 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fab8 	bl	8006398 <USBD_StdEPReq>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2c:	e00c      	b.n	8005e48 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 fcb5 	bl	80077ac <USBD_LL_StallEP>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73fb      	strb	r3, [r7, #15]
      break;
 8005e46:	bf00      	nop
  }

  return ret;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d137      	bne.n	8005ed6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d14a      	bne.n	8005f0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d913      	bls.n	8005eac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	1ad2      	subs	r2, r2, r3
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	bf28      	it	cs
 8005e9e:	4613      	movcs	r3, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 ffd9 	bl	8006e5c <USBD_CtlContinueRx>
 8005eaa:	e030      	b.n	8005f0e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d105      	bne.n	8005ece <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 ffd5 	bl	8006e7e <USBD_CtlSendStatus>
 8005ed4:	e01b      	b.n	8005f0e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d013      	beq.n	8005f0a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d10e      	bne.n	8005f0a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	7afa      	ldrb	r2, [r7, #11]
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	4798      	blx	r3
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	e002      	b.n	8005f10 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e000      	b.n	8005f10 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	460b      	mov	r3, r1
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d16a      	bne.n	8006002 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3314      	adds	r3, #20
 8005f30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d155      	bne.n	8005fe8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d914      	bls.n	8005f72 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	1ad2      	subs	r2, r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 ff4e 	bl	8006e00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f64:	2300      	movs	r3, #0
 8005f66:	2200      	movs	r2, #0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f001 fd24 	bl	80079b8 <USBD_LL_PrepareReceive>
 8005f70:	e03a      	b.n	8005fe8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d11c      	bne.n	8005fb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d316      	bcc.n	8005fb8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d20f      	bcs.n	8005fb8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 ff2f 	bl	8006e00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005faa:	2300      	movs	r3, #0
 8005fac:	2200      	movs	r2, #0
 8005fae:	2100      	movs	r1, #0
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f001 fd01 	bl	80079b8 <USBD_LL_PrepareReceive>
 8005fb6:	e017      	b.n	8005fe8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d105      	bne.n	8005fda <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f001 fbe5 	bl	80077ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 ff5e 	bl	8006ea4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d123      	bne.n	800603a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fe9b 	bl	8005d2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006000:	e01b      	b.n	800603a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006014:	2b03      	cmp	r3, #3
 8006016:	d10e      	bne.n	8006036 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	7afa      	ldrb	r2, [r7, #11]
 8006022:	4611      	mov	r1, r2
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	4798      	blx	r3
 8006028:	4603      	mov	r3, r0
 800602a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	e002      	b.n	800603c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006036:	2303      	movs	r3, #3
 8006038:	e000      	b.n	800603c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6852      	ldr	r2, [r2, #4]
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	4611      	mov	r1, r2
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	2200      	movs	r2, #0
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fb18 	bl	80076c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2240      	movs	r2, #64	; 0x40
 80060a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fb0a 	bl	80076c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2240      	movs	r2, #64	; 0x40
 80060ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2204      	movs	r2, #4
 80060fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	2b04      	cmp	r3, #4
 8006120:	d105      	bne.n	800612e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614a:	2b03      	cmp	r3, #3
 800614c:	d10b      	bne.n	8006166 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6852      	ldr	r2, [r2, #4]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	4611      	mov	r1, r2
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
  }

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	3301      	adds	r3, #1
 8006208:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006210:	8a3b      	ldrh	r3, [r7, #16]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	b21a      	sxth	r2, r3
 8006216:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800621a:	4313      	orrs	r3, r2
 800621c:	b21b      	sxth	r3, r3
 800621e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006220:	89fb      	ldrh	r3, [r7, #14]
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
	...

08006230 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006246:	2b20      	cmp	r3, #32
 8006248:	d004      	beq.n	8006254 <USBD_StdDevReq+0x24>
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d002      	beq.n	8006254 <USBD_StdDevReq+0x24>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <USBD_StdDevReq+0x38>
 8006252:	e050      	b.n	80062f6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
    break;
 8006266:	e04b      	b.n	8006300 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b09      	cmp	r3, #9
 800626e:	d83c      	bhi.n	80062ea <USBD_StdDevReq+0xba>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <USBD_StdDevReq+0x48>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	080062cd 	.word	0x080062cd
 800627c:	080062e1 	.word	0x080062e1
 8006280:	080062eb 	.word	0x080062eb
 8006284:	080062d7 	.word	0x080062d7
 8006288:	080062eb 	.word	0x080062eb
 800628c:	080062ab 	.word	0x080062ab
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062eb 	.word	0x080062eb
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062b5 	.word	0x080062b5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f9d0 	bl	8006648 <USBD_GetDescriptor>
      break;
 80062a8:	e024      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fb5f 	bl	8006970 <USBD_SetAddress>
      break;
 80062b2:	e01f      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb9c 	bl	80069f4 <USBD_SetConfig>
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e018      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fc39 	bl	8006b3c <USBD_GetConfig>
      break;
 80062ca:	e013      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fc68 	bl	8006ba4 <USBD_GetStatus>
      break;
 80062d4:	e00e      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc96 	bl	8006c0a <USBD_SetFeature>
      break;
 80062de:	e009      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fca5 	bl	8006c32 <USBD_ClrFeature>
      break;
 80062e8:	e004      	b.n	80062f4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fcfb 	bl	8006ce8 <USBD_CtlError>
      break;
 80062f2:	bf00      	nop
    }
    break;
 80062f4:	e004      	b.n	8006300 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fcf5 	bl	8006ce8 <USBD_CtlError>
    break;
 80062fe:	bf00      	nop
  }

  return ret;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop

0800630c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006322:	2b20      	cmp	r3, #32
 8006324:	d003      	beq.n	800632e <USBD_StdItfReq+0x22>
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d001      	beq.n	800632e <USBD_StdItfReq+0x22>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d12a      	bne.n	8006384 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	3b01      	subs	r3, #1
 8006336:	2b02      	cmp	r3, #2
 8006338:	d81d      	bhi.n	8006376 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	889b      	ldrh	r3, [r3, #4]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	d813      	bhi.n	800636c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	88db      	ldrh	r3, [r3, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d110      	bne.n	8006380 <USBD_StdItfReq+0x74>
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10d      	bne.n	8006380 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fd8a 	bl	8006e7e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800636a:	e009      	b.n	8006380 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fcba 	bl	8006ce8 <USBD_CtlError>
      break;
 8006374:	e004      	b.n	8006380 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fcb5 	bl	8006ce8 <USBD_CtlError>
      break;
 800637e:	e000      	b.n	8006382 <USBD_StdItfReq+0x76>
      break;
 8006380:	bf00      	nop
    }
    break;
 8006382:	e004      	b.n	800638e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fcae 	bl	8006ce8 <USBD_CtlError>
    break;
 800638c:	bf00      	nop
  }

  return ret;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	889b      	ldrh	r3, [r3, #4]
 80063aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d004      	beq.n	80063c2 <USBD_StdEPReq+0x2a>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d002      	beq.n	80063c2 <USBD_StdEPReq+0x2a>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <USBD_StdEPReq+0x3e>
 80063c0:	e137      	b.n	8006632 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
    break;
 80063d4:	e132      	b.n	800663c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d03e      	beq.n	800645c <USBD_StdEPReq+0xc4>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d002      	beq.n	80063e8 <USBD_StdEPReq+0x50>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d079      	beq.n	80064da <USBD_StdEPReq+0x142>
 80063e6:	e11e      	b.n	8006626 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d002      	beq.n	80063f8 <USBD_StdEPReq+0x60>
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d015      	beq.n	8006422 <USBD_StdEPReq+0x8a>
 80063f6:	e02b      	b.n	8006450 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <USBD_StdEPReq+0x80>
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b80      	cmp	r3, #128	; 0x80
 8006402:	d009      	beq.n	8006418 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f9cf 	bl	80077ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800640e:	2180      	movs	r1, #128	; 0x80
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 f9cb 	bl	80077ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006416:	e020      	b.n	800645a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fc64 	bl	8006ce8 <USBD_CtlError>
        break;
 8006420:	e01b      	b.n	800645a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	885b      	ldrh	r3, [r3, #2]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10e      	bne.n	8006448 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBD_StdEPReq+0xb0>
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d008      	beq.n	8006448 <USBD_StdEPReq+0xb0>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 f9b2 	bl	80077ac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fd18 	bl	8006e7e <USBD_CtlSendStatus>

        break;
 800644e:	e004      	b.n	800645a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc48 	bl	8006ce8 <USBD_CtlError>
        break;
 8006458:	bf00      	nop
      }
      break;
 800645a:	e0e9      	b.n	8006630 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006462:	2b02      	cmp	r3, #2
 8006464:	d002      	beq.n	800646c <USBD_StdEPReq+0xd4>
 8006466:	2b03      	cmp	r3, #3
 8006468:	d015      	beq.n	8006496 <USBD_StdEPReq+0xfe>
 800646a:	e02f      	b.n	80064cc <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <USBD_StdEPReq+0xf4>
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	d009      	beq.n	800648c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f995 	bl	80077ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 f991 	bl	80077ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800648a:	e025      	b.n	80064d8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fc2a 	bl	8006ce8 <USBD_CtlError>
        break;
 8006494:	e020      	b.n	80064d8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	885b      	ldrh	r3, [r3, #2]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11b      	bne.n	80064d6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 f9b3 	bl	8007818 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fce3 	bl	8006e7e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064ca:	e004      	b.n	80064d6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fc0a 	bl	8006ce8 <USBD_CtlError>
        break;
 80064d4:	e000      	b.n	80064d8 <USBD_StdEPReq+0x140>
        break;
 80064d6:	bf00      	nop
      }
      break;
 80064d8:	e0aa      	b.n	8006630 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d002      	beq.n	80064ea <USBD_StdEPReq+0x152>
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d032      	beq.n	800654e <USBD_StdEPReq+0x1b6>
 80064e8:	e097      	b.n	800661a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <USBD_StdEPReq+0x168>
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d004      	beq.n	8006500 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fbf5 	bl	8006ce8 <USBD_CtlError>
          break;
 80064fe:	e091      	b.n	8006624 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006504:	2b00      	cmp	r3, #0
 8006506:	da0b      	bge.n	8006520 <USBD_StdEPReq+0x188>
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	3310      	adds	r3, #16
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	4413      	add	r3, r2
 800651c:	3304      	adds	r3, #4
 800651e:	e00b      	b.n	8006538 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	3304      	adds	r3, #4
 8006538:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2202      	movs	r2, #2
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fc3f 	bl	8006dca <USBD_CtlSendData>
        break;
 800654c:	e06a      	b.n	8006624 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800654e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006552:	2b00      	cmp	r3, #0
 8006554:	da11      	bge.n	800657a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	3324      	adds	r3, #36	; 0x24
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d117      	bne.n	80065a0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fbb8 	bl	8006ce8 <USBD_CtlError>
            break;
 8006578:	e054      	b.n	8006624 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fba5 	bl	8006ce8 <USBD_CtlError>
            break;
 800659e:	e041      	b.n	8006624 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	da0b      	bge.n	80065c0 <USBD_StdEPReq+0x228>
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	3310      	adds	r3, #16
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	4413      	add	r3, r2
 80065bc:	3304      	adds	r3, #4
 80065be:	e00b      	b.n	80065d8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4413      	add	r3, r2
 80065d6:	3304      	adds	r3, #4
 80065d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <USBD_StdEPReq+0x24e>
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d103      	bne.n	80065ee <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e00e      	b.n	800660c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 f946 	bl	8007884 <USBD_LL_IsStallEP>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2201      	movs	r2, #1
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e002      	b.n	800660c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2202      	movs	r2, #2
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fbd9 	bl	8006dca <USBD_CtlSendData>
          break;
 8006618:	e004      	b.n	8006624 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb63 	bl	8006ce8 <USBD_CtlError>
        break;
 8006622:	bf00      	nop
      }
      break;
 8006624:	e004      	b.n	8006630 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fb5d 	bl	8006ce8 <USBD_CtlError>
      break;
 800662e:	bf00      	nop
    }
    break;
 8006630:	e004      	b.n	800663c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fb57 	bl	8006ce8 <USBD_CtlError>
    break;
 800663a:	bf00      	nop
  }

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	885b      	ldrh	r3, [r3, #2]
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	2b0e      	cmp	r3, #14
 800666a:	f200 8152 	bhi.w	8006912 <USBD_GetDescriptor+0x2ca>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <USBD_GetDescriptor+0x2c>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066e5 	.word	0x080066e5
 8006678:	080066fd 	.word	0x080066fd
 800667c:	0800673d 	.word	0x0800673d
 8006680:	08006913 	.word	0x08006913
 8006684:	08006913 	.word	0x08006913
 8006688:	080068b3 	.word	0x080068b3
 800668c:	080068df 	.word	0x080068df
 8006690:	08006913 	.word	0x08006913
 8006694:	08006913 	.word	0x08006913
 8006698:	08006913 	.word	0x08006913
 800669c:	08006913 	.word	0x08006913
 80066a0:	08006913 	.word	0x08006913
 80066a4:	08006913 	.word	0x08006913
 80066a8:	08006913 	.word	0x08006913
 80066ac:	080066b1 	.word	0x080066b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	7c12      	ldrb	r2, [r2, #16]
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
 80066d0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80066d2:	e126      	b.n	8006922 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fb06 	bl	8006ce8 <USBD_CtlError>
      err++;
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	3301      	adds	r3, #1
 80066e0:	72fb      	strb	r3, [r7, #11]
    break;
 80066e2:	e11e      	b.n	8006922 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
    break;
 80066fa:	e112      	b.n	8006922 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7c1b      	ldrb	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10d      	bne.n	8006720 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	f107 0208 	add.w	r2, r7, #8
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
 8006714:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	2202      	movs	r2, #2
 800671c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800671e:	e100      	b.n	8006922 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	f107 0208 	add.w	r2, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	2202      	movs	r2, #2
 8006738:	701a      	strb	r2, [r3, #0]
    break;
 800673a:	e0f2      	b.n	8006922 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	885b      	ldrh	r3, [r3, #2]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b05      	cmp	r3, #5
 8006744:	f200 80ac 	bhi.w	80068a0 <USBD_GetDescriptor+0x258>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <USBD_GetDescriptor+0x108>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006769 	.word	0x08006769
 8006754:	0800679d 	.word	0x0800679d
 8006758:	080067d1 	.word	0x080067d1
 800675c:	08006805 	.word	0x08006805
 8006760:	08006839 	.word	0x08006839
 8006764:	0800686d 	.word	0x0800686d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	7c12      	ldrb	r2, [r2, #16]
 8006780:	f107 0108 	add.w	r1, r7, #8
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
 8006788:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800678a:	e091      	b.n	80068b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 faaa 	bl	8006ce8 <USBD_CtlError>
        err++;
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	3301      	adds	r3, #1
 8006798:	72fb      	strb	r3, [r7, #11]
      break;
 800679a:	e089      	b.n	80068b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	7c12      	ldrb	r2, [r2, #16]
 80067b4:	f107 0108 	add.w	r1, r7, #8
 80067b8:	4610      	mov	r0, r2
 80067ba:	4798      	blx	r3
 80067bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067be:	e077      	b.n	80068b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa90 	bl	8006ce8 <USBD_CtlError>
        err++;
 80067c8:	7afb      	ldrb	r3, [r7, #11]
 80067ca:	3301      	adds	r3, #1
 80067cc:	72fb      	strb	r3, [r7, #11]
      break;
 80067ce:	e06f      	b.n	80068b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	7c12      	ldrb	r2, [r2, #16]
 80067e8:	f107 0108 	add.w	r1, r7, #8
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
 80067f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f2:	e05d      	b.n	80068b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa76 	bl	8006ce8 <USBD_CtlError>
        err++;
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	3301      	adds	r3, #1
 8006800:	72fb      	strb	r3, [r7, #11]
      break;
 8006802:	e055      	b.n	80068b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	7c12      	ldrb	r2, [r2, #16]
 800681c:	f107 0108 	add.w	r1, r7, #8
 8006820:	4610      	mov	r0, r2
 8006822:	4798      	blx	r3
 8006824:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006826:	e043      	b.n	80068b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa5c 	bl	8006ce8 <USBD_CtlError>
        err++;
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	3301      	adds	r3, #1
 8006834:	72fb      	strb	r3, [r7, #11]
      break;
 8006836:	e03b      	b.n	80068b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	7c12      	ldrb	r2, [r2, #16]
 8006850:	f107 0108 	add.w	r1, r7, #8
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800685a:	e029      	b.n	80068b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa42 	bl	8006ce8 <USBD_CtlError>
        err++;
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	3301      	adds	r3, #1
 8006868:	72fb      	strb	r3, [r7, #11]
      break;
 800686a:	e021      	b.n	80068b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7c12      	ldrb	r2, [r2, #16]
 8006884:	f107 0108 	add.w	r1, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800688e:	e00f      	b.n	80068b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa28 	bl	8006ce8 <USBD_CtlError>
        err++;
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	3301      	adds	r3, #1
 800689c:	72fb      	strb	r3, [r7, #11]
      break;
 800689e:	e007      	b.n	80068b0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa20 	bl	8006ce8 <USBD_CtlError>
      err++;
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	3301      	adds	r3, #1
 80068ac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80068ae:	bf00      	nop
    }
    break;
 80068b0:	e037      	b.n	8006922 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7c1b      	ldrb	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	f107 0208 	add.w	r2, r7, #8
 80068c6:	4610      	mov	r0, r2
 80068c8:	4798      	blx	r3
 80068ca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80068cc:	e029      	b.n	8006922 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa09 	bl	8006ce8 <USBD_CtlError>
      err++;
 80068d6:	7afb      	ldrb	r3, [r7, #11]
 80068d8:	3301      	adds	r3, #1
 80068da:	72fb      	strb	r3, [r7, #11]
    break;
 80068dc:	e021      	b.n	8006922 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7c1b      	ldrb	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10d      	bne.n	8006902 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	f107 0208 	add.w	r2, r7, #8
 80068f2:	4610      	mov	r0, r2
 80068f4:	4798      	blx	r3
 80068f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	2207      	movs	r2, #7
 80068fe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006900:	e00f      	b.n	8006922 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f9ef 	bl	8006ce8 <USBD_CtlError>
      err++;
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	3301      	adds	r3, #1
 800690e:	72fb      	strb	r3, [r7, #11]
    break;
 8006910:	e007      	b.n	8006922 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f9e7 	bl	8006ce8 <USBD_CtlError>
    err++;
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	3301      	adds	r3, #1
 800691e:	72fb      	strb	r3, [r7, #11]
    break;
 8006920:	bf00      	nop
  }

  if (err != 0U)
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11e      	bne.n	8006966 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	88db      	ldrh	r3, [r3, #6]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d016      	beq.n	800695e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006930:	893b      	ldrh	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00e      	beq.n	8006954 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88da      	ldrh	r2, [r3, #6]
 800693a:	893b      	ldrh	r3, [r7, #8]
 800693c:	4293      	cmp	r3, r2
 800693e:	bf28      	it	cs
 8006940:	4613      	movcs	r3, r2
 8006942:	b29b      	uxth	r3, r3
 8006944:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	461a      	mov	r2, r3
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa3c 	bl	8006dca <USBD_CtlSendData>
 8006952:	e009      	b.n	8006968 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f9c6 	bl	8006ce8 <USBD_CtlError>
 800695c:	e004      	b.n	8006968 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa8d 	bl	8006e7e <USBD_CtlSendStatus>
 8006964:	e000      	b.n	8006968 <USBD_GetDescriptor+0x320>
    return;
 8006966:	bf00      	nop
    }
  }
}
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop

08006970 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	889b      	ldrh	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d130      	bne.n	80069e4 <USBD_SetAddress+0x74>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d12c      	bne.n	80069e4 <USBD_SetAddress+0x74>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d828      	bhi.n	80069e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	885b      	ldrh	r3, [r3, #2]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d104      	bne.n	80069b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f99c 	bl	8006ce8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b0:	e01c      	b.n	80069ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	7bfa      	ldrb	r2, [r7, #15]
 80069b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 ff8c 	bl	80078dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa5a 	bl	8006e7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d8:	e008      	b.n	80069ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e2:	e003      	b.n	80069ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f97e 	bl	8006ce8 <USBD_CtlError>
  }
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	4b4b      	ldr	r3, [pc, #300]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a0c:	4b4a      	ldr	r3, [pc, #296]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d905      	bls.n	8006a20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f966 	bl	8006ce8 <USBD_CtlError>
    return USBD_FAIL;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e087      	b.n	8006b30 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d002      	beq.n	8006a30 <USBD_SetConfig+0x3c>
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d025      	beq.n	8006a7a <USBD_SetConfig+0x86>
 8006a2e:	e071      	b.n	8006b14 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006a30:	4b41      	ldr	r3, [pc, #260]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01c      	beq.n	8006a72 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006a38:	4b3f      	ldr	r3, [pc, #252]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a42:	4b3d      	ldr	r3, [pc, #244]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff f97b 	bl	8005d44 <USBD_SetClassConfig>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f944 	bl	8006ce8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006a60:	e065      	b.n	8006b2e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa0b 	bl	8006e7e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a70:	e05d      	b.n	8006b2e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa03 	bl	8006e7e <USBD_CtlSendStatus>
    break;
 8006a78:	e059      	b.n	8006b2e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d112      	bne.n	8006aa8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006a8a:	4b2b      	ldr	r3, [pc, #172]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a94:	4b28      	ldr	r3, [pc, #160]	; (8006b38 <USBD_SetConfig+0x144>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff f96e 	bl	8005d7c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9ec 	bl	8006e7e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006aa6:	e042      	b.n	8006b2e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006aa8:	4b23      	ldr	r3, [pc, #140]	; (8006b38 <USBD_SetConfig+0x144>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d02a      	beq.n	8006b0c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff f95c 	bl	8005d7c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006ac4:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <USBD_SetConfig+0x144>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ace:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <USBD_SetConfig+0x144>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff f935 	bl	8005d44 <USBD_SetClassConfig>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8fe 	bl	8006ce8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff f941 	bl	8005d7c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006b02:	e014      	b.n	8006b2e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9ba 	bl	8006e7e <USBD_CtlSendStatus>
    break;
 8006b0a:	e010      	b.n	8006b2e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f9b6 	bl	8006e7e <USBD_CtlSendStatus>
    break;
 8006b12:	e00c      	b.n	8006b2e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f8e6 	bl	8006ce8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <USBD_SetConfig+0x144>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff f92a 	bl	8005d7c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b2c:	bf00      	nop
  }

  return ret;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000260 	.word	0x20000260

08006b3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	88db      	ldrh	r3, [r3, #6]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d004      	beq.n	8006b58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8c9 	bl	8006ce8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006b56:	e021      	b.n	8006b9c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	db17      	blt.n	8006b92 <USBD_GetConfig+0x56>
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	dd02      	ble.n	8006b6c <USBD_GetConfig+0x30>
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d00b      	beq.n	8006b82 <USBD_GetConfig+0x46>
 8006b6a:	e012      	b.n	8006b92 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3308      	adds	r3, #8
 8006b76:	2201      	movs	r2, #1
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f925 	bl	8006dca <USBD_CtlSendData>
      break;
 8006b80:	e00c      	b.n	8006b9c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2201      	movs	r2, #1
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f91d 	bl	8006dca <USBD_CtlSendData>
      break;
 8006b90:	e004      	b.n	8006b9c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8a7 	bl	8006ce8 <USBD_CtlError>
      break;
 8006b9a:	bf00      	nop
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d81e      	bhi.n	8006bf8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d004      	beq.n	8006bcc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f88f 	bl	8006ce8 <USBD_CtlError>
      break;
 8006bca:	e01a      	b.n	8006c02 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f043 0202 	orr.w	r2, r3, #2
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	330c      	adds	r3, #12
 8006bec:	2202      	movs	r2, #2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f8ea 	bl	8006dca <USBD_CtlSendData>
    break;
 8006bf6:	e004      	b.n	8006c02 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f874 	bl	8006ce8 <USBD_CtlError>
    break;
 8006c00:	bf00      	nop
  }
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	885b      	ldrh	r3, [r3, #2]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d106      	bne.n	8006c2a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f92a 	bl	8006e7e <USBD_CtlSendStatus>
  }
}
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c42:	3b01      	subs	r3, #1
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d80b      	bhi.n	8006c60 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	885b      	ldrh	r3, [r3, #2]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d10c      	bne.n	8006c6a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f910 	bl	8006e7e <USBD_CtlSendStatus>
      }
      break;
 8006c5e:	e004      	b.n	8006c6a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f840 	bl	8006ce8 <USBD_CtlError>
      break;
 8006c68:	e000      	b.n	8006c6c <USBD_ClrFeature+0x3a>
      break;
 8006c6a:	bf00      	nop
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff faa7 	bl	80061f2 <SWAPBYTE>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fa9a 	bl	80061f2 <SWAPBYTE>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff fa8d 	bl	80061f2 <SWAPBYTE>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	80da      	strh	r2, [r3, #6]
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cf2:	2180      	movs	r1, #128	; 0x80
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fd59 	bl	80077ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fd55 	bl	80077ac <USBD_LL_StallEP>
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d036      	beq.n	8006d8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d24:	6938      	ldr	r0, [r7, #16]
 8006d26:	f000 f836 	bl	8006d96 <USBD_GetLen>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	7812      	ldrb	r2, [r2, #0]
 8006d42:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	3301      	adds	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	4413      	add	r3, r2
 8006d50:	2203      	movs	r2, #3
 8006d52:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	3301      	adds	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d5a:	e013      	b.n	8006d84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	4413      	add	r3, r2
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	613b      	str	r3, [r7, #16]
    idx++;
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	3301      	adds	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	3301      	adds	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e7      	bne.n	8006d5c <USBD_GetString+0x52>
 8006d8c:	e000      	b.n	8006d90 <USBD_GetString+0x86>
    return;
 8006d8e:	bf00      	nop
  }
}
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006da6:	e005      	b.n	8006db4 <USBD_GetLen+0x1e>
  {
    len++;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	3301      	adds	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f5      	bne.n	8006da8 <USBD_GetLen+0x12>
  }

  return len;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	2100      	movs	r1, #0
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fda9 	bl	8007948 <USBD_LL_Transmit>

  return USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	2100      	movs	r1, #0
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fd98 	bl	8007948 <USBD_LL_Transmit>

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2203      	movs	r2, #3
 8006e32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fdb3 	bl	80079b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fda2 	bl	80079b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2204      	movs	r2, #4
 8006e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fd57 	bl	8007948 <USBD_LL_Transmit>

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2205      	movs	r2, #5
 8006eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fd7c 	bl	80079b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4912      	ldr	r1, [pc, #72]	; (8006f1c <MX_USB_DEVICE_Init+0x50>)
 8006ed4:	4812      	ldr	r0, [pc, #72]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006ed6:	f7fe fec7 	bl	8005c68 <USBD_Init>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ee0:	f7f9 fc48 	bl	8000774 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ee4:	490f      	ldr	r1, [pc, #60]	; (8006f24 <MX_USB_DEVICE_Init+0x58>)
 8006ee6:	480e      	ldr	r0, [pc, #56]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006ee8:	f7fe feee 	bl	8005cc8 <USBD_RegisterClass>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ef2:	f7f9 fc3f 	bl	8000774 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ef6:	490c      	ldr	r1, [pc, #48]	; (8006f28 <MX_USB_DEVICE_Init+0x5c>)
 8006ef8:	4809      	ldr	r0, [pc, #36]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006efa:	f7fe fe19 	bl	8005b30 <USBD_CDC_RegisterInterface>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f04:	f7f9 fc36 	bl	8000774 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f08:	4805      	ldr	r0, [pc, #20]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006f0a:	f7fe ff04 	bl	8005d16 <USBD_Start>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f14:	f7f9 fc2e 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f18:	bf00      	nop
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000130 	.word	0x20000130
 8006f20:	20000270 	.word	0x20000270
 8006f24:	20000018 	.word	0x20000018
 8006f28:	2000011c 	.word	0x2000011c

08006f2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f30:	2200      	movs	r2, #0
 8006f32:	4905      	ldr	r1, [pc, #20]	; (8006f48 <CDC_Init_FS+0x1c>)
 8006f34:	4805      	ldr	r0, [pc, #20]	; (8006f4c <CDC_Init_FS+0x20>)
 8006f36:	f7fe fe10 	bl	8005b5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f3a:	4905      	ldr	r1, [pc, #20]	; (8006f50 <CDC_Init_FS+0x24>)
 8006f3c:	4803      	ldr	r0, [pc, #12]	; (8006f4c <CDC_Init_FS+0x20>)
 8006f3e:	f7fe fe25 	bl	8005b8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000d40 	.word	0x20000d40
 8006f4c:	20000270 	.word	0x20000270
 8006f50:	20000540 	.word	0x20000540

08006f54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
 8006f70:	4613      	mov	r3, r2
 8006f72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b23      	cmp	r3, #35	; 0x23
 8006f78:	d84a      	bhi.n	8007010 <CDC_Control_FS+0xac>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <CDC_Control_FS+0x1c>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08007011 	.word	0x08007011
 8006f84:	08007011 	.word	0x08007011
 8006f88:	08007011 	.word	0x08007011
 8006f8c:	08007011 	.word	0x08007011
 8006f90:	08007011 	.word	0x08007011
 8006f94:	08007011 	.word	0x08007011
 8006f98:	08007011 	.word	0x08007011
 8006f9c:	08007011 	.word	0x08007011
 8006fa0:	08007011 	.word	0x08007011
 8006fa4:	08007011 	.word	0x08007011
 8006fa8:	08007011 	.word	0x08007011
 8006fac:	08007011 	.word	0x08007011
 8006fb0:	08007011 	.word	0x08007011
 8006fb4:	08007011 	.word	0x08007011
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007011 	.word	0x08007011
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007011 	.word	0x08007011
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007011 	.word	0x08007011
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08007011 	.word	0x08007011
 8006fe0:	08007011 	.word	0x08007011
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007011 	.word	0x08007011
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	08007011 	.word	0x08007011
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007011 	.word	0x08007011
 8007000:	08007011 	.word	0x08007011
 8007004:	08007011 	.word	0x08007011
 8007008:	08007011 	.word	0x08007011
 800700c:	08007011 	.word	0x08007011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007010:	bf00      	nop
  }

  return (USBD_OK);
 8007012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4805      	ldr	r0, [pc, #20]	; (8007044 <CDC_Receive_FS+0x24>)
 800702e:	f7fe fdad 	bl	8005b8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007032:	4804      	ldr	r0, [pc, #16]	; (8007044 <CDC_Receive_FS+0x24>)
 8007034:	f7fe fdee 	bl	8005c14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000270 	.word	0x20000270

08007048 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007058:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <CDC_Transmit_FS+0x48>)
 800705a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800706a:	2301      	movs	r3, #1
 800706c:	e00b      	b.n	8007086 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800706e:	887b      	ldrh	r3, [r7, #2]
 8007070:	461a      	mov	r2, r3
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4806      	ldr	r0, [pc, #24]	; (8007090 <CDC_Transmit_FS+0x48>)
 8007076:	f7fe fd70 	bl	8005b5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800707a:	4805      	ldr	r0, [pc, #20]	; (8007090 <CDC_Transmit_FS+0x48>)
 800707c:	f7fe fd9a 	bl	8005bb4 <USBD_CDC_TransmitPacket>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000270 	.word	0x20000270

08007094 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2212      	movs	r2, #18
 80070c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070ca:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	20000150 	.word	0x20000150

080070dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2204      	movs	r2, #4
 80070ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070ee:	4b03      	ldr	r3, [pc, #12]	; (80070fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	20000170 	.word	0x20000170

08007100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <USBD_FS_ProductStrDescriptor+0x34>)
 8007116:	4808      	ldr	r0, [pc, #32]	; (8007138 <USBD_FS_ProductStrDescriptor+0x38>)
 8007118:	f7ff fdf7 	bl	8006d0a <USBD_GetString>
 800711c:	e004      	b.n	8007128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4904      	ldr	r1, [pc, #16]	; (8007134 <USBD_FS_ProductStrDescriptor+0x34>)
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <USBD_FS_ProductStrDescriptor+0x38>)
 8007124:	f7ff fdf1 	bl	8006d0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20001540 	.word	0x20001540
 8007138:	080083e8 	.word	0x080083e8

0800713c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	4904      	ldr	r1, [pc, #16]	; (800715c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800714c:	4804      	ldr	r0, [pc, #16]	; (8007160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800714e:	f7ff fddc 	bl	8006d0a <USBD_GetString>
  return USBD_StrDesc;
 8007152:	4b02      	ldr	r3, [pc, #8]	; (800715c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20001540 	.word	0x20001540
 8007160:	08008400 	.word	0x08008400

08007164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	221a      	movs	r2, #26
 8007174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007176:	f000 f855 	bl	8007224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800717a:	4b02      	ldr	r3, [pc, #8]	; (8007184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000174 	.word	0x20000174

08007188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4907      	ldr	r1, [pc, #28]	; (80071bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800719e:	4808      	ldr	r0, [pc, #32]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071a0:	f7ff fdb3 	bl	8006d0a <USBD_GetString>
 80071a4:	e004      	b.n	80071b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4904      	ldr	r1, [pc, #16]	; (80071bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80071aa:	4805      	ldr	r0, [pc, #20]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071ac:	f7ff fdad 	bl	8006d0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20001540 	.word	0x20001540
 80071c0:	08008414 	.word	0x08008414

080071c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d105      	bne.n	80071e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4907      	ldr	r1, [pc, #28]	; (80071f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071da:	4808      	ldr	r0, [pc, #32]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071dc:	f7ff fd95 	bl	8006d0a <USBD_GetString>
 80071e0:	e004      	b.n	80071ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4904      	ldr	r1, [pc, #16]	; (80071f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071e6:	4805      	ldr	r0, [pc, #20]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e8:	f7ff fd8f 	bl	8006d0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20001540 	.word	0x20001540
 80071fc:	08008420 	.word	0x08008420

08007200 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	6039      	str	r1, [r7, #0]
 800720a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	220c      	movs	r2, #12
 8007210:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000164 	.word	0x20000164

08007224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <Get_SerialNum+0x44>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <Get_SerialNum+0x48>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007236:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <Get_SerialNum+0x4c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d009      	beq.n	800725e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800724a:	2208      	movs	r2, #8
 800724c:	4909      	ldr	r1, [pc, #36]	; (8007274 <Get_SerialNum+0x50>)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f814 	bl	800727c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007254:	2204      	movs	r2, #4
 8007256:	4908      	ldr	r1, [pc, #32]	; (8007278 <Get_SerialNum+0x54>)
 8007258:	68b8      	ldr	r0, [r7, #8]
 800725a:	f000 f80f 	bl	800727c <IntToUnicode>
  }
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	1fff7590 	.word	0x1fff7590
 800726c:	1fff7594 	.word	0x1fff7594
 8007270:	1fff7598 	.word	0x1fff7598
 8007274:	20000176 	.word	0x20000176
 8007278:	20000186 	.word	0x20000186

0800727c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
 8007292:	e027      	b.n	80072e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	0f1b      	lsrs	r3, r3, #28
 8007298:	2b09      	cmp	r3, #9
 800729a:	d80b      	bhi.n	80072b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0f1b      	lsrs	r3, r3, #28
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4619      	mov	r1, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	440b      	add	r3, r1
 80072ac:	3230      	adds	r2, #48	; 0x30
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e00a      	b.n	80072ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	0f1b      	lsrs	r3, r3, #28
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4619      	mov	r1, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	440b      	add	r3, r1
 80072c4:	3237      	adds	r2, #55	; 0x37
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	3301      	adds	r3, #1
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	3301      	adds	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
 80072e4:	7dfa      	ldrb	r2, [r7, #23]
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d3d3      	bcc.n	8007294 <IntToUnicode+0x18>
  }
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007300:	f107 0314 	add.w	r3, r7, #20
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007318:	d14e      	bne.n	80073b8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800731a:	4b29      	ldr	r3, [pc, #164]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 800731c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731e:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007326:	4b26      	ldr	r3, [pc, #152]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007332:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007338:	2302      	movs	r3, #2
 800733a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007340:	2303      	movs	r3, #3
 8007342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007344:	230a      	movs	r3, #10
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007348:	f107 0314 	add.w	r3, r7, #20
 800734c:	4619      	mov	r1, r3
 800734e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007352:	f7f9 fe69 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007356:	4b1a      	ldr	r3, [pc, #104]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735a:	4a19      	ldr	r2, [pc, #100]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 800735c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007362:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800736e:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d114      	bne.n	80073a4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800737a:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	4a10      	ldr	r2, [pc, #64]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007384:	6593      	str	r3, [r2, #88]	; 0x58
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738e:	60bb      	str	r3, [r7, #8]
 8007390:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007392:	f7fb f90f 	bl	80025b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007396:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 8007398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739a:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <HAL_PCD_MspInit+0xc8>)
 800739c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6593      	str	r3, [r2, #88]	; 0x58
 80073a2:	e001      	b.n	80073a8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80073a4:	f7fb f906 	bl	80025b4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073a8:	2200      	movs	r2, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	2043      	movs	r0, #67	; 0x43
 80073ae:	f7f9 fe04 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073b2:	2043      	movs	r0, #67	; 0x43
 80073b4:	f7f9 fe1d 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073b8:	bf00      	nop
 80073ba:	3728      	adds	r7, #40	; 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40021000 	.word	0x40021000

080073c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe fce6 	bl	8005dac <USBD_LL_SetupStage>
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	4619      	mov	r1, r3
 8007412:	f7fe fd1e 	bl	8005e52 <USBD_LL_DataOutStage>
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	3348      	adds	r3, #72	; 0x48
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	4619      	mov	r1, r3
 8007446:	f7fe fd67 	bl	8005f18 <USBD_LL_DataInStage>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fe6b 	bl	800613c <USBD_LL_SOF>
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007476:	2301      	movs	r3, #1
 8007478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d001      	beq.n	8007486 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007482:	f7f9 f977 	bl	8000774 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fe18 	bl	80060c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fdd1 	bl	8006044 <USBD_LL_Reset>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fe07 	bl	80060e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <HAL_PCD_SuspendCallback+0x48>)
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	4a03      	ldr	r2, [pc, #12]	; (80074f4 <HAL_PCD_SuspendCallback+0x48>)
 80074e6:	f043 0306 	orr.w	r3, r3, #6
 80074ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	e000ed00 	.word	0xe000ed00

080074f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <HAL_PCD_ResumeCallback+0x4c>)
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	4a07      	ldr	r2, [pc, #28]	; (8007544 <HAL_PCD_ResumeCallback+0x4c>)
 8007526:	f023 0306 	bic.w	r3, r3, #6
 800752a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800752c:	f000 fade 	bl	8007aec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fdea 	bl	8006110 <USBD_LL_Resume>
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed00 	.word	0xe000ed00

08007548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fe13 	bl	800618a <USBD_LL_IsoOUTIncomplete>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fdf4 	bl	8006170 <USBD_LL_IsoINIncomplete>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fe00 	bl	80061a4 <USBD_LL_DevConnected>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fdfd 	bl	80061ba <USBD_LL_DevDisconnected>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d13c      	bne.n	8007652 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075d8:	4a20      	ldr	r2, [pc, #128]	; (800765c <USBD_LL_Init+0x94>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1e      	ldr	r2, [pc, #120]	; (800765c <USBD_LL_Init+0x94>)
 80075e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075e8:	4b1c      	ldr	r3, [pc, #112]	; (800765c <USBD_LL_Init+0x94>)
 80075ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <USBD_LL_Init+0x94>)
 80075f2:	2206      	movs	r2, #6
 80075f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075f6:	4b19      	ldr	r3, [pc, #100]	; (800765c <USBD_LL_Init+0x94>)
 80075f8:	2202      	movs	r2, #2
 80075fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <USBD_LL_Init+0x94>)
 80075fe:	2202      	movs	r2, #2
 8007600:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007602:	4b16      	ldr	r3, [pc, #88]	; (800765c <USBD_LL_Init+0x94>)
 8007604:	2200      	movs	r2, #0
 8007606:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <USBD_LL_Init+0x94>)
 800760a:	2200      	movs	r2, #0
 800760c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <USBD_LL_Init+0x94>)
 8007610:	2200      	movs	r2, #0
 8007612:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <USBD_LL_Init+0x94>)
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800761a:	4b10      	ldr	r3, [pc, #64]	; (800765c <USBD_LL_Init+0x94>)
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007620:	4b0e      	ldr	r3, [pc, #56]	; (800765c <USBD_LL_Init+0x94>)
 8007622:	2200      	movs	r2, #0
 8007624:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007626:	480d      	ldr	r0, [pc, #52]	; (800765c <USBD_LL_Init+0x94>)
 8007628:	f7f9 fec0 	bl	80013ac <HAL_PCD_Init>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007632:	f7f9 f89f 	bl	8000774 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007636:	2180      	movs	r1, #128	; 0x80
 8007638:	4808      	ldr	r0, [pc, #32]	; (800765c <USBD_LL_Init+0x94>)
 800763a:	f7fa ff22 	bl	8002482 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800763e:	2240      	movs	r2, #64	; 0x40
 8007640:	2100      	movs	r1, #0
 8007642:	4806      	ldr	r0, [pc, #24]	; (800765c <USBD_LL_Init+0x94>)
 8007644:	f7fa fed6 	bl	80023f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	2101      	movs	r1, #1
 800764c:	4803      	ldr	r0, [pc, #12]	; (800765c <USBD_LL_Init+0x94>)
 800764e:	f7fa fed1 	bl	80023f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20001740 	.word	0x20001740

08007660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007676:	4618      	mov	r0, r3
 8007678:	f7f9 ffbc 	bl	80015f4 <HAL_PCD_Start>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b03      	cmp	r3, #3
 8007684:	d816      	bhi.n	80076b4 <USBD_LL_Start+0x54>
 8007686:	a201      	add	r2, pc, #4	; (adr r2, 800768c <USBD_LL_Start+0x2c>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	0800769d 	.word	0x0800769d
 8007690:	080076a3 	.word	0x080076a3
 8007694:	080076a9 	.word	0x080076a9
 8007698:	080076af 	.word	0x080076af
    case HAL_OK :
      usb_status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
    break;
 80076a0:	e00b      	b.n	80076ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
    break;
 80076a6:	e008      	b.n	80076ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
    break;
 80076ac:	e005      	b.n	80076ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076ae:	2303      	movs	r3, #3
 80076b0:	73fb      	strb	r3, [r7, #15]
    break;
 80076b2:	e002      	b.n	80076ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	73fb      	strb	r3, [r7, #15]
    break;
 80076b8:	bf00      	nop
  }
  return usb_status;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	70fb      	strb	r3, [r7, #3]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70bb      	strb	r3, [r7, #2]
 80076da:	4613      	mov	r3, r2
 80076dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076ec:	78bb      	ldrb	r3, [r7, #2]
 80076ee:	883a      	ldrh	r2, [r7, #0]
 80076f0:	78f9      	ldrb	r1, [r7, #3]
 80076f2:	f7fa fb77 	bl	8001de4 <HAL_PCD_EP_Open>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d817      	bhi.n	8007730 <USBD_LL_OpenEP+0x6c>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_LL_OpenEP+0x44>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	08007719 	.word	0x08007719
 800770c:	0800771f 	.word	0x0800771f
 8007710:	08007725 	.word	0x08007725
 8007714:	0800772b 	.word	0x0800772b
    case HAL_OK :
      usb_status = USBD_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
    break;
 800771c:	e00b      	b.n	8007736 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800771e:	2303      	movs	r3, #3
 8007720:	73fb      	strb	r3, [r7, #15]
    break;
 8007722:	e008      	b.n	8007736 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
    break;
 8007728:	e005      	b.n	8007736 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800772a:	2303      	movs	r3, #3
 800772c:	73fb      	strb	r3, [r7, #15]
    break;
 800772e:	e002      	b.n	8007736 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007730:	2303      	movs	r3, #3
 8007732:	73fb      	strb	r3, [r7, #15]
    break;
 8007734:	bf00      	nop
  }
  return usb_status;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f7fa fba8 	bl	8001eb4 <HAL_PCD_EP_Close>
 8007764:	4603      	mov	r3, r0
 8007766:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b03      	cmp	r3, #3
 800776c:	d816      	bhi.n	800779c <USBD_LL_CloseEP+0x5c>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <USBD_LL_CloseEP+0x34>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007785 	.word	0x08007785
 8007778:	0800778b 	.word	0x0800778b
 800777c:	08007791 	.word	0x08007791
 8007780:	08007797 	.word	0x08007797
    case HAL_OK :
      usb_status = USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
    break;
 8007788:	e00b      	b.n	80077a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800778a:	2303      	movs	r3, #3
 800778c:	73fb      	strb	r3, [r7, #15]
    break;
 800778e:	e008      	b.n	80077a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
    break;
 8007794:	e005      	b.n	80077a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007796:	2303      	movs	r3, #3
 8007798:	73fb      	strb	r3, [r7, #15]
    break;
 800779a:	e002      	b.n	80077a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	73fb      	strb	r3, [r7, #15]
    break;
 80077a0:	bf00      	nop
  }
  return usb_status;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa fc4f 	bl	800206e <HAL_PCD_EP_SetStall>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d816      	bhi.n	8007808 <USBD_LL_StallEP+0x5c>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBD_LL_StallEP+0x34>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	080077f7 	.word	0x080077f7
 80077e8:	080077fd 	.word	0x080077fd
 80077ec:	08007803 	.word	0x08007803
    case HAL_OK :
      usb_status = USBD_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73fb      	strb	r3, [r7, #15]
    break;
 80077f4:	e00b      	b.n	800780e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	73fb      	strb	r3, [r7, #15]
    break;
 80077fa:	e008      	b.n	800780e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007800:	e005      	b.n	800780e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	73fb      	strb	r3, [r7, #15]
    break;
 8007806:	e002      	b.n	800780e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	73fb      	strb	r3, [r7, #15]
    break;
 800780c:	bf00      	nop
  }
  return usb_status;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7fa fc7b 	bl	8002132 <HAL_PCD_EP_ClrStall>
 800783c:	4603      	mov	r3, r0
 800783e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d816      	bhi.n	8007874 <USBD_LL_ClearStallEP+0x5c>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <USBD_LL_ClearStallEP+0x34>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800785d 	.word	0x0800785d
 8007850:	08007863 	.word	0x08007863
 8007854:	08007869 	.word	0x08007869
 8007858:	0800786f 	.word	0x0800786f
    case HAL_OK :
      usb_status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
    break;
 8007860:	e00b      	b.n	800787a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007862:	2303      	movs	r3, #3
 8007864:	73fb      	strb	r3, [r7, #15]
    break;
 8007866:	e008      	b.n	800787a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
    break;
 800786c:	e005      	b.n	800787a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	73fb      	strb	r3, [r7, #15]
    break;
 8007872:	e002      	b.n	800787a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007874:	2303      	movs	r3, #3
 8007876:	73fb      	strb	r3, [r7, #15]
    break;
 8007878:	bf00      	nop
  }
  return usb_status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800789c:	2b00      	cmp	r3, #0
 800789e:	da0b      	bge.n	80078b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	333e      	adds	r3, #62	; 0x3e
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	e00b      	b.n	80078d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fa fa4d 	bl	8001d9a <HAL_PCD_SetAddress>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d816      	bhi.n	8007938 <USBD_LL_SetUSBAddress+0x5c>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <USBD_LL_SetUSBAddress+0x34>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007921 	.word	0x08007921
 8007914:	08007927 	.word	0x08007927
 8007918:	0800792d 	.word	0x0800792d
 800791c:	08007933 	.word	0x08007933
    case HAL_OK :
      usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
    break;
 8007924:	e00b      	b.n	800793e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007926:	2303      	movs	r3, #3
 8007928:	73fb      	strb	r3, [r7, #15]
    break;
 800792a:	e008      	b.n	800793e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
    break;
 8007930:	e005      	b.n	800793e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007932:	2303      	movs	r3, #3
 8007934:	73fb      	strb	r3, [r7, #15]
    break;
 8007936:	e002      	b.n	800793e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	73fb      	strb	r3, [r7, #15]
    break;
 800793c:	bf00      	nop
  }
  return usb_status;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	460b      	mov	r3, r1
 8007956:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007966:	7af9      	ldrb	r1, [r7, #11]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	f7fa fb42 	bl	8001ff4 <HAL_PCD_EP_Transmit>
 8007970:	4603      	mov	r3, r0
 8007972:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007974:	7dbb      	ldrb	r3, [r7, #22]
 8007976:	2b03      	cmp	r3, #3
 8007978:	d816      	bhi.n	80079a8 <USBD_LL_Transmit+0x60>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <USBD_LL_Transmit+0x38>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007991 	.word	0x08007991
 8007984:	08007997 	.word	0x08007997
 8007988:	0800799d 	.word	0x0800799d
 800798c:	080079a3 	.word	0x080079a3
    case HAL_OK :
      usb_status = USBD_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]
    break;
 8007994:	e00b      	b.n	80079ae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007996:	2303      	movs	r3, #3
 8007998:	75fb      	strb	r3, [r7, #23]
    break;
 800799a:	e008      	b.n	80079ae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800799c:	2301      	movs	r3, #1
 800799e:	75fb      	strb	r3, [r7, #23]
    break;
 80079a0:	e005      	b.n	80079ae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079a2:	2303      	movs	r3, #3
 80079a4:	75fb      	strb	r3, [r7, #23]
    break;
 80079a6:	e002      	b.n	80079ae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	75fb      	strb	r3, [r7, #23]
    break;
 80079ac:	bf00      	nop
  }
  return usb_status;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	460b      	mov	r3, r1
 80079c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079d6:	7af9      	ldrb	r1, [r7, #11]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	f7fa fab4 	bl	8001f48 <HAL_PCD_EP_Receive>
 80079e0:	4603      	mov	r3, r0
 80079e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80079e4:	7dbb      	ldrb	r3, [r7, #22]
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d816      	bhi.n	8007a18 <USBD_LL_PrepareReceive+0x60>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <USBD_LL_PrepareReceive+0x38>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a01 	.word	0x08007a01
 80079f4:	08007a07 	.word	0x08007a07
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a13 	.word	0x08007a13
    case HAL_OK :
      usb_status = USBD_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	75fb      	strb	r3, [r7, #23]
    break;
 8007a04:	e00b      	b.n	8007a1e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a06:	2303      	movs	r3, #3
 8007a08:	75fb      	strb	r3, [r7, #23]
    break;
 8007a0a:	e008      	b.n	8007a1e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
    break;
 8007a10:	e005      	b.n	8007a1e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a12:	2303      	movs	r3, #3
 8007a14:	75fb      	strb	r3, [r7, #23]
    break;
 8007a16:	e002      	b.n	8007a1e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	75fb      	strb	r3, [r7, #23]
    break;
 8007a1c:	bf00      	nop
  }
  return usb_status;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fa fac0 	bl	8001fc4 <HAL_PCD_EP_GetRxCount>
 8007a44:	4603      	mov	r3, r0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_PCDEx_LPM_Callback+0x18>
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d01f      	beq.n	8007aa6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007a66:	e03b      	b.n	8007ae0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007a70:	f000 f83c 	bl	8007aec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a74:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007a7a:	f023 0306 	bic.w	r3, r3, #6
 8007a7e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a92:	f023 0301 	bic.w	r3, r3, #1
 8007a96:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fb36 	bl	8006110 <USBD_LL_Resume>
    break;
 8007aa4:	e01c      	b.n	8007ae0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fb0e 	bl	80060e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ad8:	f043 0306 	orr.w	r3, r3, #6
 8007adc:	6113      	str	r3, [r2, #16]
    break;
 8007ade:	bf00      	nop
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	e000ed00 	.word	0xe000ed00

08007aec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007af0:	f7f8 fc9e 	bl	8000430 <SystemClock_Config>
}
 8007af4:	bf00      	nop
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <__errno>:
 8007af8:	4b01      	ldr	r3, [pc, #4]	; (8007b00 <__errno+0x8>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000190 	.word	0x20000190

08007b04 <__libc_init_array>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4e0d      	ldr	r6, [pc, #52]	; (8007b3c <__libc_init_array+0x38>)
 8007b08:	4c0d      	ldr	r4, [pc, #52]	; (8007b40 <__libc_init_array+0x3c>)
 8007b0a:	1ba4      	subs	r4, r4, r6
 8007b0c:	10a4      	asrs	r4, r4, #2
 8007b0e:	2500      	movs	r5, #0
 8007b10:	42a5      	cmp	r5, r4
 8007b12:	d109      	bne.n	8007b28 <__libc_init_array+0x24>
 8007b14:	4e0b      	ldr	r6, [pc, #44]	; (8007b44 <__libc_init_array+0x40>)
 8007b16:	4c0c      	ldr	r4, [pc, #48]	; (8007b48 <__libc_init_array+0x44>)
 8007b18:	f000 fc36 	bl	8008388 <_init>
 8007b1c:	1ba4      	subs	r4, r4, r6
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	2500      	movs	r5, #0
 8007b22:	42a5      	cmp	r5, r4
 8007b24:	d105      	bne.n	8007b32 <__libc_init_array+0x2e>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b2c:	4798      	blx	r3
 8007b2e:	3501      	adds	r5, #1
 8007b30:	e7ee      	b.n	8007b10 <__libc_init_array+0xc>
 8007b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b36:	4798      	blx	r3
 8007b38:	3501      	adds	r5, #1
 8007b3a:	e7f2      	b.n	8007b22 <__libc_init_array+0x1e>
 8007b3c:	080084a4 	.word	0x080084a4
 8007b40:	080084a4 	.word	0x080084a4
 8007b44:	080084a4 	.word	0x080084a4
 8007b48:	080084a8 	.word	0x080084a8

08007b4c <malloc>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <malloc+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f000 b861 	b.w	8007c18 <_malloc_r>
 8007b56:	bf00      	nop
 8007b58:	20000190 	.word	0x20000190

08007b5c <free>:
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <free+0xc>)
 8007b5e:	4601      	mov	r1, r0
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	f000 b80b 	b.w	8007b7c <_free_r>
 8007b66:	bf00      	nop
 8007b68:	20000190 	.word	0x20000190

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_free_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4605      	mov	r5, r0
 8007b80:	2900      	cmp	r1, #0
 8007b82:	d045      	beq.n	8007c10 <_free_r+0x94>
 8007b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b88:	1f0c      	subs	r4, r1, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfb8      	it	lt
 8007b8e:	18e4      	addlt	r4, r4, r3
 8007b90:	f000 f8cc 	bl	8007d2c <__malloc_lock>
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <_free_r+0x98>)
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	4610      	mov	r0, r2
 8007b9a:	b933      	cbnz	r3, 8007baa <_free_r+0x2e>
 8007b9c:	6063      	str	r3, [r4, #4]
 8007b9e:	6014      	str	r4, [r2, #0]
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ba6:	f000 b8c2 	b.w	8007d2e <__malloc_unlock>
 8007baa:	42a3      	cmp	r3, r4
 8007bac:	d90c      	bls.n	8007bc8 <_free_r+0x4c>
 8007bae:	6821      	ldr	r1, [r4, #0]
 8007bb0:	1862      	adds	r2, r4, r1
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	bf04      	itt	eq
 8007bb6:	681a      	ldreq	r2, [r3, #0]
 8007bb8:	685b      	ldreq	r3, [r3, #4]
 8007bba:	6063      	str	r3, [r4, #4]
 8007bbc:	bf04      	itt	eq
 8007bbe:	1852      	addeq	r2, r2, r1
 8007bc0:	6022      	streq	r2, [r4, #0]
 8007bc2:	6004      	str	r4, [r0, #0]
 8007bc4:	e7ec      	b.n	8007ba0 <_free_r+0x24>
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	685a      	ldr	r2, [r3, #4]
 8007bca:	b10a      	cbz	r2, 8007bd0 <_free_r+0x54>
 8007bcc:	42a2      	cmp	r2, r4
 8007bce:	d9fa      	bls.n	8007bc6 <_free_r+0x4a>
 8007bd0:	6819      	ldr	r1, [r3, #0]
 8007bd2:	1858      	adds	r0, r3, r1
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d10b      	bne.n	8007bf0 <_free_r+0x74>
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	4401      	add	r1, r0
 8007bdc:	1858      	adds	r0, r3, r1
 8007bde:	4282      	cmp	r2, r0
 8007be0:	6019      	str	r1, [r3, #0]
 8007be2:	d1dd      	bne.n	8007ba0 <_free_r+0x24>
 8007be4:	6810      	ldr	r0, [r2, #0]
 8007be6:	6852      	ldr	r2, [r2, #4]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	4401      	add	r1, r0
 8007bec:	6019      	str	r1, [r3, #0]
 8007bee:	e7d7      	b.n	8007ba0 <_free_r+0x24>
 8007bf0:	d902      	bls.n	8007bf8 <_free_r+0x7c>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	e7d3      	b.n	8007ba0 <_free_r+0x24>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	1821      	adds	r1, r4, r0
 8007bfc:	428a      	cmp	r2, r1
 8007bfe:	bf04      	itt	eq
 8007c00:	6811      	ldreq	r1, [r2, #0]
 8007c02:	6852      	ldreq	r2, [r2, #4]
 8007c04:	6062      	str	r2, [r4, #4]
 8007c06:	bf04      	itt	eq
 8007c08:	1809      	addeq	r1, r1, r0
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	605c      	str	r4, [r3, #4]
 8007c0e:	e7c7      	b.n	8007ba0 <_free_r+0x24>
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
 8007c12:	bf00      	nop
 8007c14:	20000264 	.word	0x20000264

08007c18 <_malloc_r>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	1ccd      	adds	r5, r1, #3
 8007c1c:	f025 0503 	bic.w	r5, r5, #3
 8007c20:	3508      	adds	r5, #8
 8007c22:	2d0c      	cmp	r5, #12
 8007c24:	bf38      	it	cc
 8007c26:	250c      	movcc	r5, #12
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	db01      	blt.n	8007c32 <_malloc_r+0x1a>
 8007c2e:	42a9      	cmp	r1, r5
 8007c30:	d903      	bls.n	8007c3a <_malloc_r+0x22>
 8007c32:	230c      	movs	r3, #12
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	2000      	movs	r0, #0
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
 8007c3a:	f000 f877 	bl	8007d2c <__malloc_lock>
 8007c3e:	4a21      	ldr	r2, [pc, #132]	; (8007cc4 <_malloc_r+0xac>)
 8007c40:	6814      	ldr	r4, [r2, #0]
 8007c42:	4621      	mov	r1, r4
 8007c44:	b991      	cbnz	r1, 8007c6c <_malloc_r+0x54>
 8007c46:	4c20      	ldr	r4, [pc, #128]	; (8007cc8 <_malloc_r+0xb0>)
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	b91b      	cbnz	r3, 8007c54 <_malloc_r+0x3c>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 f83d 	bl	8007ccc <_sbrk_r>
 8007c52:	6020      	str	r0, [r4, #0]
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 f838 	bl	8007ccc <_sbrk_r>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d124      	bne.n	8007caa <_malloc_r+0x92>
 8007c60:	230c      	movs	r3, #12
 8007c62:	6033      	str	r3, [r6, #0]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 f862 	bl	8007d2e <__malloc_unlock>
 8007c6a:	e7e4      	b.n	8007c36 <_malloc_r+0x1e>
 8007c6c:	680b      	ldr	r3, [r1, #0]
 8007c6e:	1b5b      	subs	r3, r3, r5
 8007c70:	d418      	bmi.n	8007ca4 <_malloc_r+0x8c>
 8007c72:	2b0b      	cmp	r3, #11
 8007c74:	d90f      	bls.n	8007c96 <_malloc_r+0x7e>
 8007c76:	600b      	str	r3, [r1, #0]
 8007c78:	50cd      	str	r5, [r1, r3]
 8007c7a:	18cc      	adds	r4, r1, r3
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 f856 	bl	8007d2e <__malloc_unlock>
 8007c82:	f104 000b 	add.w	r0, r4, #11
 8007c86:	1d23      	adds	r3, r4, #4
 8007c88:	f020 0007 	bic.w	r0, r0, #7
 8007c8c:	1ac3      	subs	r3, r0, r3
 8007c8e:	d0d3      	beq.n	8007c38 <_malloc_r+0x20>
 8007c90:	425a      	negs	r2, r3
 8007c92:	50e2      	str	r2, [r4, r3]
 8007c94:	e7d0      	b.n	8007c38 <_malloc_r+0x20>
 8007c96:	428c      	cmp	r4, r1
 8007c98:	684b      	ldr	r3, [r1, #4]
 8007c9a:	bf16      	itet	ne
 8007c9c:	6063      	strne	r3, [r4, #4]
 8007c9e:	6013      	streq	r3, [r2, #0]
 8007ca0:	460c      	movne	r4, r1
 8007ca2:	e7eb      	b.n	8007c7c <_malloc_r+0x64>
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	6849      	ldr	r1, [r1, #4]
 8007ca8:	e7cc      	b.n	8007c44 <_malloc_r+0x2c>
 8007caa:	1cc4      	adds	r4, r0, #3
 8007cac:	f024 0403 	bic.w	r4, r4, #3
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d005      	beq.n	8007cc0 <_malloc_r+0xa8>
 8007cb4:	1a21      	subs	r1, r4, r0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 f808 	bl	8007ccc <_sbrk_r>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d0cf      	beq.n	8007c60 <_malloc_r+0x48>
 8007cc0:	6025      	str	r5, [r4, #0]
 8007cc2:	e7db      	b.n	8007c7c <_malloc_r+0x64>
 8007cc4:	20000264 	.word	0x20000264
 8007cc8:	20000268 	.word	0x20000268

08007ccc <_sbrk_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4c06      	ldr	r4, [pc, #24]	; (8007ce8 <_sbrk_r+0x1c>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	f7f8 ff68 	bl	8000bac <_sbrk>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_sbrk_r+0x1a>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_sbrk_r+0x1a>
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20001b48 	.word	0x20001b48

08007cec <siprintf>:
 8007cec:	b40e      	push	{r1, r2, r3}
 8007cee:	b500      	push	{lr}
 8007cf0:	b09c      	sub	sp, #112	; 0x70
 8007cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8007cf4:	9002      	str	r0, [sp, #8]
 8007cf6:	9006      	str	r0, [sp, #24]
 8007cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cfc:	4809      	ldr	r0, [pc, #36]	; (8007d24 <siprintf+0x38>)
 8007cfe:	9107      	str	r1, [sp, #28]
 8007d00:	9104      	str	r1, [sp, #16]
 8007d02:	4909      	ldr	r1, [pc, #36]	; (8007d28 <siprintf+0x3c>)
 8007d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d08:	9105      	str	r1, [sp, #20]
 8007d0a:	6800      	ldr	r0, [r0, #0]
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	a902      	add	r1, sp, #8
 8007d10:	f000 f868 	bl	8007de4 <_svfiprintf_r>
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	b01c      	add	sp, #112	; 0x70
 8007d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d20:	b003      	add	sp, #12
 8007d22:	4770      	bx	lr
 8007d24:	20000190 	.word	0x20000190
 8007d28:	ffff0208 	.word	0xffff0208

08007d2c <__malloc_lock>:
 8007d2c:	4770      	bx	lr

08007d2e <__malloc_unlock>:
 8007d2e:	4770      	bx	lr

08007d30 <__ssputs_r>:
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	688e      	ldr	r6, [r1, #8]
 8007d36:	429e      	cmp	r6, r3
 8007d38:	4682      	mov	sl, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	4690      	mov	r8, r2
 8007d3e:	4699      	mov	r9, r3
 8007d40:	d837      	bhi.n	8007db2 <__ssputs_r+0x82>
 8007d42:	898a      	ldrh	r2, [r1, #12]
 8007d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d48:	d031      	beq.n	8007dae <__ssputs_r+0x7e>
 8007d4a:	6825      	ldr	r5, [r4, #0]
 8007d4c:	6909      	ldr	r1, [r1, #16]
 8007d4e:	1a6f      	subs	r7, r5, r1
 8007d50:	6965      	ldr	r5, [r4, #20]
 8007d52:	2302      	movs	r3, #2
 8007d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d58:	fb95 f5f3 	sdiv	r5, r5, r3
 8007d5c:	f109 0301 	add.w	r3, r9, #1
 8007d60:	443b      	add	r3, r7
 8007d62:	429d      	cmp	r5, r3
 8007d64:	bf38      	it	cc
 8007d66:	461d      	movcc	r5, r3
 8007d68:	0553      	lsls	r3, r2, #21
 8007d6a:	d530      	bpl.n	8007dce <__ssputs_r+0x9e>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f7ff ff53 	bl	8007c18 <_malloc_r>
 8007d72:	4606      	mov	r6, r0
 8007d74:	b950      	cbnz	r0, 8007d8c <__ssputs_r+0x5c>
 8007d76:	230c      	movs	r3, #12
 8007d78:	f8ca 3000 	str.w	r3, [sl]
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	463a      	mov	r2, r7
 8007d8e:	6921      	ldr	r1, [r4, #16]
 8007d90:	f000 faa8 	bl	80082e4 <memcpy>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	6126      	str	r6, [r4, #16]
 8007da2:	6165      	str	r5, [r4, #20]
 8007da4:	443e      	add	r6, r7
 8007da6:	1bed      	subs	r5, r5, r7
 8007da8:	6026      	str	r6, [r4, #0]
 8007daa:	60a5      	str	r5, [r4, #8]
 8007dac:	464e      	mov	r6, r9
 8007dae:	454e      	cmp	r6, r9
 8007db0:	d900      	bls.n	8007db4 <__ssputs_r+0x84>
 8007db2:	464e      	mov	r6, r9
 8007db4:	4632      	mov	r2, r6
 8007db6:	4641      	mov	r1, r8
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	f000 fa9e 	bl	80082fa <memmove>
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	1b9b      	subs	r3, r3, r6
 8007dc2:	60a3      	str	r3, [r4, #8]
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	441e      	add	r6, r3
 8007dc8:	6026      	str	r6, [r4, #0]
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e7dc      	b.n	8007d88 <__ssputs_r+0x58>
 8007dce:	462a      	mov	r2, r5
 8007dd0:	f000 faac 	bl	800832c <_realloc_r>
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d1e2      	bne.n	8007da0 <__ssputs_r+0x70>
 8007dda:	6921      	ldr	r1, [r4, #16]
 8007ddc:	4650      	mov	r0, sl
 8007dde:	f7ff fecd 	bl	8007b7c <_free_r>
 8007de2:	e7c8      	b.n	8007d76 <__ssputs_r+0x46>

08007de4 <_svfiprintf_r>:
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	461d      	mov	r5, r3
 8007dea:	898b      	ldrh	r3, [r1, #12]
 8007dec:	061f      	lsls	r7, r3, #24
 8007dee:	b09d      	sub	sp, #116	; 0x74
 8007df0:	4680      	mov	r8, r0
 8007df2:	460c      	mov	r4, r1
 8007df4:	4616      	mov	r6, r2
 8007df6:	d50f      	bpl.n	8007e18 <_svfiprintf_r+0x34>
 8007df8:	690b      	ldr	r3, [r1, #16]
 8007dfa:	b96b      	cbnz	r3, 8007e18 <_svfiprintf_r+0x34>
 8007dfc:	2140      	movs	r1, #64	; 0x40
 8007dfe:	f7ff ff0b 	bl	8007c18 <_malloc_r>
 8007e02:	6020      	str	r0, [r4, #0]
 8007e04:	6120      	str	r0, [r4, #16]
 8007e06:	b928      	cbnz	r0, 8007e14 <_svfiprintf_r+0x30>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	f8c8 3000 	str.w	r3, [r8]
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	e0c8      	b.n	8007fa6 <_svfiprintf_r+0x1c2>
 8007e14:	2340      	movs	r3, #64	; 0x40
 8007e16:	6163      	str	r3, [r4, #20]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e22:	2330      	movs	r3, #48	; 0x30
 8007e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e28:	9503      	str	r5, [sp, #12]
 8007e2a:	f04f 0b01 	mov.w	fp, #1
 8007e2e:	4637      	mov	r7, r6
 8007e30:	463d      	mov	r5, r7
 8007e32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e36:	b10b      	cbz	r3, 8007e3c <_svfiprintf_r+0x58>
 8007e38:	2b25      	cmp	r3, #37	; 0x25
 8007e3a:	d13e      	bne.n	8007eba <_svfiprintf_r+0xd6>
 8007e3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e40:	d00b      	beq.n	8007e5a <_svfiprintf_r+0x76>
 8007e42:	4653      	mov	r3, sl
 8007e44:	4632      	mov	r2, r6
 8007e46:	4621      	mov	r1, r4
 8007e48:	4640      	mov	r0, r8
 8007e4a:	f7ff ff71 	bl	8007d30 <__ssputs_r>
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f000 80a4 	beq.w	8007f9c <_svfiprintf_r+0x1b8>
 8007e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e56:	4453      	add	r3, sl
 8007e58:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5a:	783b      	ldrb	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 809d 	beq.w	8007f9c <_svfiprintf_r+0x1b8>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f04f 32ff 	mov.w	r2, #4294967295
 8007e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e74:	931a      	str	r3, [sp, #104]	; 0x68
 8007e76:	462f      	mov	r7, r5
 8007e78:	2205      	movs	r2, #5
 8007e7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e7e:	4850      	ldr	r0, [pc, #320]	; (8007fc0 <_svfiprintf_r+0x1dc>)
 8007e80:	f7f8 f9be 	bl	8000200 <memchr>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	b9d0      	cbnz	r0, 8007ebe <_svfiprintf_r+0xda>
 8007e88:	06d9      	lsls	r1, r3, #27
 8007e8a:	bf44      	itt	mi
 8007e8c:	2220      	movmi	r2, #32
 8007e8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e92:	071a      	lsls	r2, r3, #28
 8007e94:	bf44      	itt	mi
 8007e96:	222b      	movmi	r2, #43	; 0x2b
 8007e98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e9c:	782a      	ldrb	r2, [r5, #0]
 8007e9e:	2a2a      	cmp	r2, #42	; 0x2a
 8007ea0:	d015      	beq.n	8007ece <_svfiprintf_r+0xea>
 8007ea2:	9a07      	ldr	r2, [sp, #28]
 8007ea4:	462f      	mov	r7, r5
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	250a      	movs	r5, #10
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb0:	3b30      	subs	r3, #48	; 0x30
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d94d      	bls.n	8007f52 <_svfiprintf_r+0x16e>
 8007eb6:	b1b8      	cbz	r0, 8007ee8 <_svfiprintf_r+0x104>
 8007eb8:	e00f      	b.n	8007eda <_svfiprintf_r+0xf6>
 8007eba:	462f      	mov	r7, r5
 8007ebc:	e7b8      	b.n	8007e30 <_svfiprintf_r+0x4c>
 8007ebe:	4a40      	ldr	r2, [pc, #256]	; (8007fc0 <_svfiprintf_r+0x1dc>)
 8007ec0:	1a80      	subs	r0, r0, r2
 8007ec2:	fa0b f000 	lsl.w	r0, fp, r0
 8007ec6:	4318      	orrs	r0, r3
 8007ec8:	9004      	str	r0, [sp, #16]
 8007eca:	463d      	mov	r5, r7
 8007ecc:	e7d3      	b.n	8007e76 <_svfiprintf_r+0x92>
 8007ece:	9a03      	ldr	r2, [sp, #12]
 8007ed0:	1d11      	adds	r1, r2, #4
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	9103      	str	r1, [sp, #12]
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	db01      	blt.n	8007ede <_svfiprintf_r+0xfa>
 8007eda:	9207      	str	r2, [sp, #28]
 8007edc:	e004      	b.n	8007ee8 <_svfiprintf_r+0x104>
 8007ede:	4252      	negs	r2, r2
 8007ee0:	f043 0302 	orr.w	r3, r3, #2
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	783b      	ldrb	r3, [r7, #0]
 8007eea:	2b2e      	cmp	r3, #46	; 0x2e
 8007eec:	d10c      	bne.n	8007f08 <_svfiprintf_r+0x124>
 8007eee:	787b      	ldrb	r3, [r7, #1]
 8007ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef2:	d133      	bne.n	8007f5c <_svfiprintf_r+0x178>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	9203      	str	r2, [sp, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfb8      	it	lt
 8007f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f04:	3702      	adds	r7, #2
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	4d2e      	ldr	r5, [pc, #184]	; (8007fc4 <_svfiprintf_r+0x1e0>)
 8007f0a:	7839      	ldrb	r1, [r7, #0]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f7f8 f976 	bl	8000200 <memchr>
 8007f14:	b138      	cbz	r0, 8007f26 <_svfiprintf_r+0x142>
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	1b40      	subs	r0, r0, r5
 8007f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	4303      	orrs	r3, r0
 8007f22:	3701      	adds	r7, #1
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	7839      	ldrb	r1, [r7, #0]
 8007f28:	4827      	ldr	r0, [pc, #156]	; (8007fc8 <_svfiprintf_r+0x1e4>)
 8007f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f2e:	2206      	movs	r2, #6
 8007f30:	1c7e      	adds	r6, r7, #1
 8007f32:	f7f8 f965 	bl	8000200 <memchr>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d038      	beq.n	8007fac <_svfiprintf_r+0x1c8>
 8007f3a:	4b24      	ldr	r3, [pc, #144]	; (8007fcc <_svfiprintf_r+0x1e8>)
 8007f3c:	bb13      	cbnz	r3, 8007f84 <_svfiprintf_r+0x1a0>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	f023 0307 	bic.w	r3, r3, #7
 8007f46:	3308      	adds	r3, #8
 8007f48:	9303      	str	r3, [sp, #12]
 8007f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4c:	444b      	add	r3, r9
 8007f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f50:	e76d      	b.n	8007e2e <_svfiprintf_r+0x4a>
 8007f52:	fb05 3202 	mla	r2, r5, r2, r3
 8007f56:	2001      	movs	r0, #1
 8007f58:	460f      	mov	r7, r1
 8007f5a:	e7a6      	b.n	8007eaa <_svfiprintf_r+0xc6>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	3701      	adds	r7, #1
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	4619      	mov	r1, r3
 8007f64:	250a      	movs	r5, #10
 8007f66:	4638      	mov	r0, r7
 8007f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f6c:	3a30      	subs	r2, #48	; 0x30
 8007f6e:	2a09      	cmp	r2, #9
 8007f70:	d903      	bls.n	8007f7a <_svfiprintf_r+0x196>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0c8      	beq.n	8007f08 <_svfiprintf_r+0x124>
 8007f76:	9105      	str	r1, [sp, #20]
 8007f78:	e7c6      	b.n	8007f08 <_svfiprintf_r+0x124>
 8007f7a:	fb05 2101 	mla	r1, r5, r1, r2
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4607      	mov	r7, r0
 8007f82:	e7f0      	b.n	8007f66 <_svfiprintf_r+0x182>
 8007f84:	ab03      	add	r3, sp, #12
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <_svfiprintf_r+0x1ec>)
 8007f8c:	a904      	add	r1, sp, #16
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f3af 8000 	nop.w
 8007f94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f98:	4681      	mov	r9, r0
 8007f9a:	d1d6      	bne.n	8007f4a <_svfiprintf_r+0x166>
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	065b      	lsls	r3, r3, #25
 8007fa0:	f53f af35 	bmi.w	8007e0e <_svfiprintf_r+0x2a>
 8007fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fa6:	b01d      	add	sp, #116	; 0x74
 8007fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fac:	ab03      	add	r3, sp, #12
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <_svfiprintf_r+0x1ec>)
 8007fb4:	a904      	add	r1, sp, #16
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f000 f882 	bl	80080c0 <_printf_i>
 8007fbc:	e7ea      	b.n	8007f94 <_svfiprintf_r+0x1b0>
 8007fbe:	bf00      	nop
 8007fc0:	08008470 	.word	0x08008470
 8007fc4:	08008476 	.word	0x08008476
 8007fc8:	0800847a 	.word	0x0800847a
 8007fcc:	00000000 	.word	0x00000000
 8007fd0:	08007d31 	.word	0x08007d31

08007fd4 <_printf_common>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	4691      	mov	r9, r2
 8007fda:	461f      	mov	r7, r3
 8007fdc:	688a      	ldr	r2, [r1, #8]
 8007fde:	690b      	ldr	r3, [r1, #16]
 8007fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	bfb8      	it	lt
 8007fe8:	4613      	movlt	r3, r2
 8007fea:	f8c9 3000 	str.w	r3, [r9]
 8007fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	b112      	cbz	r2, 8007ffe <_printf_common+0x2a>
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	f8c9 3000 	str.w	r3, [r9]
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	0699      	lsls	r1, r3, #26
 8008002:	bf42      	ittt	mi
 8008004:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008008:	3302      	addmi	r3, #2
 800800a:	f8c9 3000 	strmi.w	r3, [r9]
 800800e:	6825      	ldr	r5, [r4, #0]
 8008010:	f015 0506 	ands.w	r5, r5, #6
 8008014:	d107      	bne.n	8008026 <_printf_common+0x52>
 8008016:	f104 0a19 	add.w	sl, r4, #25
 800801a:	68e3      	ldr	r3, [r4, #12]
 800801c:	f8d9 2000 	ldr.w	r2, [r9]
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	42ab      	cmp	r3, r5
 8008024:	dc28      	bgt.n	8008078 <_printf_common+0xa4>
 8008026:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	3300      	adds	r3, #0
 800802e:	bf18      	it	ne
 8008030:	2301      	movne	r3, #1
 8008032:	0692      	lsls	r2, r2, #26
 8008034:	d42d      	bmi.n	8008092 <_printf_common+0xbe>
 8008036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800803a:	4639      	mov	r1, r7
 800803c:	4630      	mov	r0, r6
 800803e:	47c0      	blx	r8
 8008040:	3001      	adds	r0, #1
 8008042:	d020      	beq.n	8008086 <_printf_common+0xb2>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	68e5      	ldr	r5, [r4, #12]
 8008048:	f8d9 2000 	ldr.w	r2, [r9]
 800804c:	f003 0306 	and.w	r3, r3, #6
 8008050:	2b04      	cmp	r3, #4
 8008052:	bf08      	it	eq
 8008054:	1aad      	subeq	r5, r5, r2
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	6922      	ldr	r2, [r4, #16]
 800805a:	bf0c      	ite	eq
 800805c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008060:	2500      	movne	r5, #0
 8008062:	4293      	cmp	r3, r2
 8008064:	bfc4      	itt	gt
 8008066:	1a9b      	subgt	r3, r3, r2
 8008068:	18ed      	addgt	r5, r5, r3
 800806a:	f04f 0900 	mov.w	r9, #0
 800806e:	341a      	adds	r4, #26
 8008070:	454d      	cmp	r5, r9
 8008072:	d11a      	bne.n	80080aa <_printf_common+0xd6>
 8008074:	2000      	movs	r0, #0
 8008076:	e008      	b.n	800808a <_printf_common+0xb6>
 8008078:	2301      	movs	r3, #1
 800807a:	4652      	mov	r2, sl
 800807c:	4639      	mov	r1, r7
 800807e:	4630      	mov	r0, r6
 8008080:	47c0      	blx	r8
 8008082:	3001      	adds	r0, #1
 8008084:	d103      	bne.n	800808e <_printf_common+0xba>
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	3501      	adds	r5, #1
 8008090:	e7c3      	b.n	800801a <_printf_common+0x46>
 8008092:	18e1      	adds	r1, r4, r3
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	2030      	movs	r0, #48	; 0x30
 8008098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800809c:	4422      	add	r2, r4
 800809e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080a6:	3302      	adds	r3, #2
 80080a8:	e7c5      	b.n	8008036 <_printf_common+0x62>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4622      	mov	r2, r4
 80080ae:	4639      	mov	r1, r7
 80080b0:	4630      	mov	r0, r6
 80080b2:	47c0      	blx	r8
 80080b4:	3001      	adds	r0, #1
 80080b6:	d0e6      	beq.n	8008086 <_printf_common+0xb2>
 80080b8:	f109 0901 	add.w	r9, r9, #1
 80080bc:	e7d8      	b.n	8008070 <_printf_common+0x9c>
	...

080080c0 <_printf_i>:
 80080c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080c8:	460c      	mov	r4, r1
 80080ca:	7e09      	ldrb	r1, [r1, #24]
 80080cc:	b085      	sub	sp, #20
 80080ce:	296e      	cmp	r1, #110	; 0x6e
 80080d0:	4617      	mov	r7, r2
 80080d2:	4606      	mov	r6, r0
 80080d4:	4698      	mov	r8, r3
 80080d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d8:	f000 80b3 	beq.w	8008242 <_printf_i+0x182>
 80080dc:	d822      	bhi.n	8008124 <_printf_i+0x64>
 80080de:	2963      	cmp	r1, #99	; 0x63
 80080e0:	d036      	beq.n	8008150 <_printf_i+0x90>
 80080e2:	d80a      	bhi.n	80080fa <_printf_i+0x3a>
 80080e4:	2900      	cmp	r1, #0
 80080e6:	f000 80b9 	beq.w	800825c <_printf_i+0x19c>
 80080ea:	2958      	cmp	r1, #88	; 0x58
 80080ec:	f000 8083 	beq.w	80081f6 <_printf_i+0x136>
 80080f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80080f8:	e032      	b.n	8008160 <_printf_i+0xa0>
 80080fa:	2964      	cmp	r1, #100	; 0x64
 80080fc:	d001      	beq.n	8008102 <_printf_i+0x42>
 80080fe:	2969      	cmp	r1, #105	; 0x69
 8008100:	d1f6      	bne.n	80080f0 <_printf_i+0x30>
 8008102:	6820      	ldr	r0, [r4, #0]
 8008104:	6813      	ldr	r3, [r2, #0]
 8008106:	0605      	lsls	r5, r0, #24
 8008108:	f103 0104 	add.w	r1, r3, #4
 800810c:	d52a      	bpl.n	8008164 <_printf_i+0xa4>
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	da03      	bge.n	800811e <_printf_i+0x5e>
 8008116:	222d      	movs	r2, #45	; 0x2d
 8008118:	425b      	negs	r3, r3
 800811a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800811e:	486f      	ldr	r0, [pc, #444]	; (80082dc <_printf_i+0x21c>)
 8008120:	220a      	movs	r2, #10
 8008122:	e039      	b.n	8008198 <_printf_i+0xd8>
 8008124:	2973      	cmp	r1, #115	; 0x73
 8008126:	f000 809d 	beq.w	8008264 <_printf_i+0x1a4>
 800812a:	d808      	bhi.n	800813e <_printf_i+0x7e>
 800812c:	296f      	cmp	r1, #111	; 0x6f
 800812e:	d020      	beq.n	8008172 <_printf_i+0xb2>
 8008130:	2970      	cmp	r1, #112	; 0x70
 8008132:	d1dd      	bne.n	80080f0 <_printf_i+0x30>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	f043 0320 	orr.w	r3, r3, #32
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	e003      	b.n	8008146 <_printf_i+0x86>
 800813e:	2975      	cmp	r1, #117	; 0x75
 8008140:	d017      	beq.n	8008172 <_printf_i+0xb2>
 8008142:	2978      	cmp	r1, #120	; 0x78
 8008144:	d1d4      	bne.n	80080f0 <_printf_i+0x30>
 8008146:	2378      	movs	r3, #120	; 0x78
 8008148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800814c:	4864      	ldr	r0, [pc, #400]	; (80082e0 <_printf_i+0x220>)
 800814e:	e055      	b.n	80081fc <_printf_i+0x13c>
 8008150:	6813      	ldr	r3, [r2, #0]
 8008152:	1d19      	adds	r1, r3, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6011      	str	r1, [r2, #0]
 8008158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800815c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008160:	2301      	movs	r3, #1
 8008162:	e08c      	b.n	800827e <_printf_i+0x1be>
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6011      	str	r1, [r2, #0]
 8008168:	f010 0f40 	tst.w	r0, #64	; 0x40
 800816c:	bf18      	it	ne
 800816e:	b21b      	sxthne	r3, r3
 8008170:	e7cf      	b.n	8008112 <_printf_i+0x52>
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	6825      	ldr	r5, [r4, #0]
 8008176:	1d18      	adds	r0, r3, #4
 8008178:	6010      	str	r0, [r2, #0]
 800817a:	0628      	lsls	r0, r5, #24
 800817c:	d501      	bpl.n	8008182 <_printf_i+0xc2>
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	e002      	b.n	8008188 <_printf_i+0xc8>
 8008182:	0668      	lsls	r0, r5, #25
 8008184:	d5fb      	bpl.n	800817e <_printf_i+0xbe>
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	4854      	ldr	r0, [pc, #336]	; (80082dc <_printf_i+0x21c>)
 800818a:	296f      	cmp	r1, #111	; 0x6f
 800818c:	bf14      	ite	ne
 800818e:	220a      	movne	r2, #10
 8008190:	2208      	moveq	r2, #8
 8008192:	2100      	movs	r1, #0
 8008194:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008198:	6865      	ldr	r5, [r4, #4]
 800819a:	60a5      	str	r5, [r4, #8]
 800819c:	2d00      	cmp	r5, #0
 800819e:	f2c0 8095 	blt.w	80082cc <_printf_i+0x20c>
 80081a2:	6821      	ldr	r1, [r4, #0]
 80081a4:	f021 0104 	bic.w	r1, r1, #4
 80081a8:	6021      	str	r1, [r4, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d13d      	bne.n	800822a <_printf_i+0x16a>
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	f040 808e 	bne.w	80082d0 <_printf_i+0x210>
 80081b4:	4665      	mov	r5, ip
 80081b6:	2a08      	cmp	r2, #8
 80081b8:	d10b      	bne.n	80081d2 <_printf_i+0x112>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	07db      	lsls	r3, r3, #31
 80081be:	d508      	bpl.n	80081d2 <_printf_i+0x112>
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	6862      	ldr	r2, [r4, #4]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	bfde      	ittt	le
 80081c8:	2330      	movle	r3, #48	; 0x30
 80081ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081d2:	ebac 0305 	sub.w	r3, ip, r5
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f8cd 8000 	str.w	r8, [sp]
 80081dc:	463b      	mov	r3, r7
 80081de:	aa03      	add	r2, sp, #12
 80081e0:	4621      	mov	r1, r4
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff fef6 	bl	8007fd4 <_printf_common>
 80081e8:	3001      	adds	r0, #1
 80081ea:	d14d      	bne.n	8008288 <_printf_i+0x1c8>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	b005      	add	sp, #20
 80081f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081f6:	4839      	ldr	r0, [pc, #228]	; (80082dc <_printf_i+0x21c>)
 80081f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80081fc:	6813      	ldr	r3, [r2, #0]
 80081fe:	6821      	ldr	r1, [r4, #0]
 8008200:	1d1d      	adds	r5, r3, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6015      	str	r5, [r2, #0]
 8008206:	060a      	lsls	r2, r1, #24
 8008208:	d50b      	bpl.n	8008222 <_printf_i+0x162>
 800820a:	07ca      	lsls	r2, r1, #31
 800820c:	bf44      	itt	mi
 800820e:	f041 0120 	orrmi.w	r1, r1, #32
 8008212:	6021      	strmi	r1, [r4, #0]
 8008214:	b91b      	cbnz	r3, 800821e <_printf_i+0x15e>
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	f022 0220 	bic.w	r2, r2, #32
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	2210      	movs	r2, #16
 8008220:	e7b7      	b.n	8008192 <_printf_i+0xd2>
 8008222:	064d      	lsls	r5, r1, #25
 8008224:	bf48      	it	mi
 8008226:	b29b      	uxthmi	r3, r3
 8008228:	e7ef      	b.n	800820a <_printf_i+0x14a>
 800822a:	4665      	mov	r5, ip
 800822c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008230:	fb02 3311 	mls	r3, r2, r1, r3
 8008234:	5cc3      	ldrb	r3, [r0, r3]
 8008236:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800823a:	460b      	mov	r3, r1
 800823c:	2900      	cmp	r1, #0
 800823e:	d1f5      	bne.n	800822c <_printf_i+0x16c>
 8008240:	e7b9      	b.n	80081b6 <_printf_i+0xf6>
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	6961      	ldr	r1, [r4, #20]
 8008248:	1d18      	adds	r0, r3, #4
 800824a:	6010      	str	r0, [r2, #0]
 800824c:	0628      	lsls	r0, r5, #24
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	d501      	bpl.n	8008256 <_printf_i+0x196>
 8008252:	6019      	str	r1, [r3, #0]
 8008254:	e002      	b.n	800825c <_printf_i+0x19c>
 8008256:	066a      	lsls	r2, r5, #25
 8008258:	d5fb      	bpl.n	8008252 <_printf_i+0x192>
 800825a:	8019      	strh	r1, [r3, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	4665      	mov	r5, ip
 8008262:	e7b9      	b.n	80081d8 <_printf_i+0x118>
 8008264:	6813      	ldr	r3, [r2, #0]
 8008266:	1d19      	adds	r1, r3, #4
 8008268:	6011      	str	r1, [r2, #0]
 800826a:	681d      	ldr	r5, [r3, #0]
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	2100      	movs	r1, #0
 8008270:	4628      	mov	r0, r5
 8008272:	f7f7 ffc5 	bl	8000200 <memchr>
 8008276:	b108      	cbz	r0, 800827c <_printf_i+0x1bc>
 8008278:	1b40      	subs	r0, r0, r5
 800827a:	6060      	str	r0, [r4, #4]
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2300      	movs	r3, #0
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008286:	e7a7      	b.n	80081d8 <_printf_i+0x118>
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	462a      	mov	r2, r5
 800828c:	4639      	mov	r1, r7
 800828e:	4630      	mov	r0, r6
 8008290:	47c0      	blx	r8
 8008292:	3001      	adds	r0, #1
 8008294:	d0aa      	beq.n	80081ec <_printf_i+0x12c>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	079b      	lsls	r3, r3, #30
 800829a:	d413      	bmi.n	80082c4 <_printf_i+0x204>
 800829c:	68e0      	ldr	r0, [r4, #12]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	4298      	cmp	r0, r3
 80082a2:	bfb8      	it	lt
 80082a4:	4618      	movlt	r0, r3
 80082a6:	e7a3      	b.n	80081f0 <_printf_i+0x130>
 80082a8:	2301      	movs	r3, #1
 80082aa:	464a      	mov	r2, r9
 80082ac:	4639      	mov	r1, r7
 80082ae:	4630      	mov	r0, r6
 80082b0:	47c0      	blx	r8
 80082b2:	3001      	adds	r0, #1
 80082b4:	d09a      	beq.n	80081ec <_printf_i+0x12c>
 80082b6:	3501      	adds	r5, #1
 80082b8:	68e3      	ldr	r3, [r4, #12]
 80082ba:	9a03      	ldr	r2, [sp, #12]
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	42ab      	cmp	r3, r5
 80082c0:	dcf2      	bgt.n	80082a8 <_printf_i+0x1e8>
 80082c2:	e7eb      	b.n	800829c <_printf_i+0x1dc>
 80082c4:	2500      	movs	r5, #0
 80082c6:	f104 0919 	add.w	r9, r4, #25
 80082ca:	e7f5      	b.n	80082b8 <_printf_i+0x1f8>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1ac      	bne.n	800822a <_printf_i+0x16a>
 80082d0:	7803      	ldrb	r3, [r0, #0]
 80082d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082da:	e76c      	b.n	80081b6 <_printf_i+0xf6>
 80082dc:	08008481 	.word	0x08008481
 80082e0:	08008492 	.word	0x08008492

080082e4 <memcpy>:
 80082e4:	b510      	push	{r4, lr}
 80082e6:	1e43      	subs	r3, r0, #1
 80082e8:	440a      	add	r2, r1
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d100      	bne.n	80082f0 <memcpy+0xc>
 80082ee:	bd10      	pop	{r4, pc}
 80082f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f8:	e7f7      	b.n	80082ea <memcpy+0x6>

080082fa <memmove>:
 80082fa:	4288      	cmp	r0, r1
 80082fc:	b510      	push	{r4, lr}
 80082fe:	eb01 0302 	add.w	r3, r1, r2
 8008302:	d807      	bhi.n	8008314 <memmove+0x1a>
 8008304:	1e42      	subs	r2, r0, #1
 8008306:	4299      	cmp	r1, r3
 8008308:	d00a      	beq.n	8008320 <memmove+0x26>
 800830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008312:	e7f8      	b.n	8008306 <memmove+0xc>
 8008314:	4283      	cmp	r3, r0
 8008316:	d9f5      	bls.n	8008304 <memmove+0xa>
 8008318:	1881      	adds	r1, r0, r2
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	42d3      	cmn	r3, r2
 800831e:	d100      	bne.n	8008322 <memmove+0x28>
 8008320:	bd10      	pop	{r4, pc}
 8008322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008326:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800832a:	e7f7      	b.n	800831c <memmove+0x22>

0800832c <_realloc_r>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	4607      	mov	r7, r0
 8008330:	4614      	mov	r4, r2
 8008332:	460e      	mov	r6, r1
 8008334:	b921      	cbnz	r1, 8008340 <_realloc_r+0x14>
 8008336:	4611      	mov	r1, r2
 8008338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800833c:	f7ff bc6c 	b.w	8007c18 <_malloc_r>
 8008340:	b922      	cbnz	r2, 800834c <_realloc_r+0x20>
 8008342:	f7ff fc1b 	bl	8007b7c <_free_r>
 8008346:	4625      	mov	r5, r4
 8008348:	4628      	mov	r0, r5
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834c:	f000 f814 	bl	8008378 <_malloc_usable_size_r>
 8008350:	42a0      	cmp	r0, r4
 8008352:	d20f      	bcs.n	8008374 <_realloc_r+0x48>
 8008354:	4621      	mov	r1, r4
 8008356:	4638      	mov	r0, r7
 8008358:	f7ff fc5e 	bl	8007c18 <_malloc_r>
 800835c:	4605      	mov	r5, r0
 800835e:	2800      	cmp	r0, #0
 8008360:	d0f2      	beq.n	8008348 <_realloc_r+0x1c>
 8008362:	4631      	mov	r1, r6
 8008364:	4622      	mov	r2, r4
 8008366:	f7ff ffbd 	bl	80082e4 <memcpy>
 800836a:	4631      	mov	r1, r6
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff fc05 	bl	8007b7c <_free_r>
 8008372:	e7e9      	b.n	8008348 <_realloc_r+0x1c>
 8008374:	4635      	mov	r5, r6
 8008376:	e7e7      	b.n	8008348 <_realloc_r+0x1c>

08008378 <_malloc_usable_size_r>:
 8008378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837c:	1f18      	subs	r0, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	bfbc      	itt	lt
 8008382:	580b      	ldrlt	r3, [r1, r0]
 8008384:	18c0      	addlt	r0, r0, r3
 8008386:	4770      	bx	lr

08008388 <_init>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr

08008394 <_fini>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	bf00      	nop
 8008398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839a:	bc08      	pop	{r3}
 800839c:	469e      	mov	lr, r3
 800839e:	4770      	bx	lr

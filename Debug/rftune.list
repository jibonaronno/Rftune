
rftune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000824c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008520  08008520  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008520  08008520  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008520  08008520  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  200001f4  0800871c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  0800871c  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d025  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a06  00000000  00000000  0003d249  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  00040c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  00042038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ec0c  00000000  00000000  00043278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132df  00000000  00000000  00071e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103601  00000000  00000000  00085163  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  001887e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080083e4 	.word	0x080083e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	080083e4 	.word	0x080083e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_Z8delay_usmP17TIM_HandleTypeDef>:

#include "main.h"
#include "delay.h"

void delay_us (uint32_t us, TIM_HandleTypeDef *htim)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2200      	movs	r2, #0
 80002b0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	bf8c      	ite	hi
 80002be:	2301      	movhi	r3, #1
 80002c0:	2300      	movls	r3, #0
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d000      	beq.n	80002ca <_Z8delay_usmP17TIM_HandleTypeDef+0x2a>
 80002c8:	e7f3      	b.n	80002b2 <_Z8delay_usmP17TIM_HandleTypeDef+0x12>
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <_Z8usbPrintPKc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void usbPrint(const char *s)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t *)s, strlen(s));
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff86 	bl	80001f0 <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	4619      	mov	r1, r3
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f006 feda 	bl	80070a4 <CDC_Transmit_FS>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b0b0      	sub	sp, #192	; 0xc0
 80002fc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t cdc_buf[] = "Sample Text From CDC Buffer";
 80002fe:	4b57      	ldr	r3, [pc, #348]	; (800045c <main+0x164>)
 8000300:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000304:	461d      	mov	r5, r3
 8000306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char ch_buf1[100];
	int local_idx = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000318:	f000 fd0b 	bl	8000d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031c:	f000 f8aa 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 f9a6 	bl	8000670 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000324:	f000 f948 	bl	80005b8 <_ZL12MX_TIM2_Initv>
  MX_USB_DEVICE_Init();
 8000328:	f006 fdfe 	bl	8006f28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MXEX_GPIO_INIT();
 800032c:	f000 fa10 	bl	8000750 <_ZL14MXEX_GPIO_INITv>
  HAL_TIM_Base_Start(&htim2);
 8000330:	484b      	ldr	r0, [pc, #300]	; (8000460 <main+0x168>)
 8000332:	f003 fca5 	bl	8003c80 <HAL_TIM_Base_Start>

  //RFFC(GPIO_TypeDef *port_sclk, uint16_t pin_sclk, GPIO_TypeDef *port_sdata, uint16_t pin_sdata, GPIO_TypeDef *port_resetx, uint16_t pin_resetx, GPIO_TypeDef *port_enx, uint16_t pin_enx);
  RFFC rffc(GPIOD, GPIO_PIN_1, GPIOD, GPIO_PIN_4, GPIOD, GPIO_PIN_2, GPIOD, GPIO_PIN_0);
 8000336:	4638      	mov	r0, r7
 8000338:	2301      	movs	r3, #1
 800033a:	9304      	str	r3, [sp, #16]
 800033c:	4b49      	ldr	r3, [pc, #292]	; (8000464 <main+0x16c>)
 800033e:	9303      	str	r3, [sp, #12]
 8000340:	2304      	movs	r3, #4
 8000342:	9302      	str	r3, [sp, #8]
 8000344:	4b47      	ldr	r3, [pc, #284]	; (8000464 <main+0x16c>)
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	2310      	movs	r3, #16
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	4b45      	ldr	r3, [pc, #276]	; (8000464 <main+0x16c>)
 800034e:	2202      	movs	r2, #2
 8000350:	4944      	ldr	r1, [pc, #272]	; (8000464 <main+0x16c>)
 8000352:	f000 fa33 	bl	80007bc <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);

  uint16_t SDI_CTRL = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

  rffc.resetLow();
 800035c:	463b      	mov	r3, r7
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fa63 	bl	800082a <_ZN4RFFC8resetLowEv>
  usbPrint("Reseting RFFC. Wait 10 Second");
 8000364:	4840      	ldr	r0, [pc, #256]	; (8000468 <main+0x170>)
 8000366:	f7ff ffb6 	bl	80002d6 <_Z8usbPrintPKc>
  HAL_Delay(10000);
 800036a:	f242 7010 	movw	r0, #10000	; 0x2710
 800036e:	f000 fd55 	bl	8000e1c <HAL_Delay>
  rffc.resetHigh();
 8000372:	463b      	mov	r3, r7
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fa48 	bl	800080a <_ZN4RFFC9resetHighEv>

  SDI_CTRL = rffc.read(0x15);
 800037a:	463b      	mov	r3, r7
 800037c:	2115      	movs	r1, #21
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fa64 	bl	800084c <_ZN4RFFC4readEh>
 8000384:	4603      	mov	r3, r0
 8000386:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
  sprintf(ch_buf1,"REG(15) : %03d\r\n", SDI_CTRL);
 800038a:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800038e:	f107 0320 	add.w	r3, r7, #32
 8000392:	4936      	ldr	r1, [pc, #216]	; (800046c <main+0x174>)
 8000394:	4618      	mov	r0, r3
 8000396:	f007 fcd7 	bl	8007d48 <siprintf>
  for(local_idx=0;local_idx<16;local_idx++)
 800039a:	2300      	movs	r3, #0
 800039c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80003a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003a4:	2b0f      	cmp	r3, #15
 80003a6:	dc26      	bgt.n	80003f6 <main+0xfe>
  {
	  SDI_CTRL = rffc.read(local_idx);
 80003a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	463b      	mov	r3, r7
 80003b0:	4611      	mov	r1, r2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fa4a 	bl	800084c <_ZN4RFFC4readEh>
 80003b8:	4603      	mov	r3, r0
 80003ba:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  sprintf(ch_buf1,"REG(0X%04X) : 0X%04X\r\n", local_idx,  SDI_CTRL);
 80003be:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80003c2:	f107 0020 	add.w	r0, r7, #32
 80003c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80003ca:	4929      	ldr	r1, [pc, #164]	; (8000470 <main+0x178>)
 80003cc:	f007 fcbc 	bl	8007d48 <siprintf>
	  CDC_Transmit_FS((uint8_t *)ch_buf1, strlen(ch_buf1));
 80003d0:	f107 0320 	add.w	r3, r7, #32
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff0b 	bl	80001f0 <strlen>
 80003da:	4603      	mov	r3, r0
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f107 0320 	add.w	r3, r7, #32
 80003e2:	4611      	mov	r1, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f006 fe5d 	bl	80070a4 <CDC_Transmit_FS>
  for(local_idx=0;local_idx<16;local_idx++)
 80003ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003ee:	3301      	adds	r3, #1
 80003f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80003f4:	e7d4      	b.n	80003a0 <main+0xa8>
	  delay_us(10000, &htim2);
	  */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(5000);
 80003f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80003fa:	f000 fd0f 	bl	8000e1c <HAL_Delay>
	for(local_idx=0;local_idx<16;local_idx++)
 80003fe:	2300      	movs	r3, #0
 8000400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000408:	2b0f      	cmp	r3, #15
 800040a:	dcf4      	bgt.n	80003f6 <main+0xfe>
	{
	  SDI_CTRL = rffc.read(local_idx);
 800040c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000410:	b2da      	uxtb	r2, r3
 8000412:	463b      	mov	r3, r7
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fa18 	bl	800084c <_ZN4RFFC4readEh>
 800041c:	4603      	mov	r3, r0
 800041e:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  sprintf(ch_buf1,"REG(0X%04X) : 0X%04X\r\n", local_idx,  SDI_CTRL);
 8000422:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8000426:	f107 0020 	add.w	r0, r7, #32
 800042a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800042e:	4910      	ldr	r1, [pc, #64]	; (8000470 <main+0x178>)
 8000430:	f007 fc8a 	bl	8007d48 <siprintf>
	  CDC_Transmit_FS((uint8_t *)ch_buf1, strlen(ch_buf1));
 8000434:	f107 0320 	add.w	r3, r7, #32
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff fed9 	bl	80001f0 <strlen>
 800043e:	4603      	mov	r3, r0
 8000440:	b29a      	uxth	r2, r3
 8000442:	f107 0320 	add.w	r3, r7, #32
 8000446:	4611      	mov	r1, r2
 8000448:	4618      	mov	r0, r3
 800044a:	f006 fe2b 	bl	80070a4 <CDC_Transmit_FS>
	for(local_idx=0;local_idx<16;local_idx++)
 800044e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000452:	3301      	adds	r3, #1
 8000454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000458:	e7d4      	b.n	8000404 <main+0x10c>
 800045a:	bf00      	nop
 800045c:	08008448 	.word	0x08008448
 8000460:	20000210 	.word	0x20000210
 8000464:	48000c00 	.word	0x48000c00
 8000468:	080083fc 	.word	0x080083fc
 800046c:	0800841c 	.word	0x0800841c
 8000470:	08008430 	.word	0x08008430

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b0ba      	sub	sp, #232	; 0xe8
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800047e:	2244      	movs	r2, #68	; 0x44
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f007 fba0 	bl	8007bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	228c      	movs	r2, #140	; 0x8c
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f007 fb92 	bl	8007bc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80004a4:	2314      	movs	r3, #20
 80004a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80004aa:	2300      	movs	r3, #0
 80004ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004b0:	2301      	movs	r3, #1
 80004b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004bc:	2360      	movs	r3, #96	; 0x60
 80004be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c2:	2302      	movs	r3, #2
 80004c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004c8:	2301      	movs	r3, #1
 80004ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004d4:	2328      	movs	r3, #40	; 0x28
 80004d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004da:	2302      	movs	r3, #2
 80004dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e0:	2302      	movs	r3, #2
 80004e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80004f0:	4618      	mov	r0, r3
 80004f2:	f002 f89d 	bl	8002630 <HAL_RCC_OscConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf14      	ite	ne
 80004fc:	2301      	movne	r3, #1
 80004fe:	2300      	moveq	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000506:	f000 f955 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	230f      	movs	r3, #15
 800050c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000510:	2303      	movs	r3, #3
 8000512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000528:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800052c:	2104      	movs	r1, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fca4 	bl	8002e7c <HAL_RCC_ClockConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000544:	f000 f936 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800054e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000552:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000554:	2301      	movs	r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800055c:	2318      	movs	r3, #24
 800055e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800056c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000570:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fe59 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	bf14      	ite	ne
 8000580:	2301      	movne	r3, #1
 8000582:	2300      	moveq	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800058a:	f000 f913 	bl	80007b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f001 ffe7 	bl	8002564 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf14      	ite	ne
 800059c:	2301      	movne	r3, #1
 800059e:	2300      	moveq	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x136>
  {
    Error_Handler();
 80005a6:	f000 f905 	bl	80007b4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005aa:	f003 f937 	bl	800381c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ae:	bf00      	nop
 80005b0:	37e8      	adds	r7, #232	; 0xe8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 80005e0:	2250      	movs	r2, #80	; 0x50
 80005e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 80005ec:	f04f 32ff 	mov.w	r2, #4294967295
 80005f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 8000600:	f003 fae6 	bl	8003bd0 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000614:	f000 f8ce 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 8000626:	f003 fb93 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800063a:	f000 f8bb 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <_ZL12MX_TIM2_Initv+0xb4>)
 800064c:	f003 fd6e 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf14      	ite	ne
 8000656:	2301      	movne	r3, #1
 8000658:	2300      	moveq	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8000660:	f000 f8a8 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000210 	.word	0x20000210

08000670 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <_ZL12MX_GPIO_Initv+0xd4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ec:	4816      	ldr	r0, [pc, #88]	; (8000748 <_ZL12MX_GPIO_Initv+0xd8>)
 80006ee:	f000 fe73 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_ON_GPIO_Port, LDO_ON_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	4814      	ldr	r0, [pc, #80]	; (800074c <_ZL12MX_GPIO_Initv+0xdc>)
 80006fa:	f000 fe6d 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <_ZL12MX_GPIO_Initv+0xd8>)
 8000718:	f000 fcb4 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_ON_Pin */
  GPIO_InitStruct.Pin = LDO_ON_Pin;
 800071c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDO_ON_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <_ZL12MX_GPIO_Initv+0xdc>)
 8000736:	f000 fca5 	bl	8001084 <HAL_GPIO_Init>

}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	; 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	48000400 	.word	0x48000400
 800074c:	48000c00 	.word	0x48000c00

08000750 <_ZL14MXEX_GPIO_INITv>:

/* USER CODE BEGIN 4 */

static void MXEX_GPIO_INIT(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);   //ENX - NORMALLY HIGH. ACTIVE LOW.
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <_ZL14MXEX_GPIO_INITv+0x60>)
 800076a:	f000 fe35 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); //SCLK
 800076e:	2200      	movs	r2, #0
 8000770:	2102      	movs	r1, #2
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <_ZL14MXEX_GPIO_INITv+0x60>)
 8000774:	f000 fe30 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //RESETX
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <_ZL14MXEX_GPIO_INITv+0x60>)
 800077e:	f000 fe2b 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //SDATA
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <_ZL14MXEX_GPIO_INITv+0x60>)
 8000788:	f000 fe26 	bl	80013d8 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800078c:	2317      	movs	r3, #23
 800078e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <_ZL14MXEX_GPIO_INITv+0x60>)
 80007a2:	f000 fc6f 	bl	8001084 <HAL_GPIO_Init>

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	48000c00 	.word	0x48000c00

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <Error_Handler+0x6>

080007bc <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>:
						delay_us(RFFC5071_FSCL, &htim2);\
						HAL_GPIO_WritePin(Port_sclk, Pin_sclk, GPIO_PIN_RESET)

extern TIM_HandleTypeDef htim2;

RFFC::RFFC(GPIO_TypeDef *port_sclk, uint16_t pin_sclk, GPIO_TypeDef *port_sdata, uint16_t pin_sdata, GPIO_TypeDef *port_resetx, uint16_t pin_resetx, GPIO_TypeDef *port_enx, uint16_t pin_enx)
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4613      	mov	r3, r2
 80007ca:	80fb      	strh	r3, [r7, #6]
{
	Port_sclk = port_sclk;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	601a      	str	r2, [r3, #0]
	Pin_sclk = pin_sclk;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	809a      	strh	r2, [r3, #4]
	Port_sdata = port_sdata;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	609a      	str	r2, [r3, #8]
	Pin_sdata = pin_sdata;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	8b3a      	ldrh	r2, [r7, #24]
 80007e2:	819a      	strh	r2, [r3, #12]
	Port_resetx = port_resetx;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	611a      	str	r2, [r3, #16]
	Pin_resetx = pin_resetx;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	8c3a      	ldrh	r2, [r7, #32]
 80007ee:	829a      	strh	r2, [r3, #20]
	Port_enx = port_enx;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f4:	619a      	str	r2, [r3, #24]
	Pin_enx = pin_enx;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80007fa:	839a      	strh	r2, [r3, #28]
}
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_ZN4RFFC9resetHighEv>:

void RFFC::resetHigh()
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port_resetx, Pin_resetx, GPIO_PIN_SET);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6918      	ldr	r0, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	8a9b      	ldrh	r3, [r3, #20]
 800081a:	2201      	movs	r2, #1
 800081c:	4619      	mov	r1, r3
 800081e:	f000 fddb 	bl	80013d8 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN4RFFC8resetLowEv>:

void RFFC::resetLow()
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port_resetx, Pin_resetx, GPIO_PIN_RESET);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6918      	ldr	r0, [r3, #16]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	8a9b      	ldrh	r3, [r3, #20]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f000 fdcb 	bl	80013d8 <HAL_GPIO_WritePin>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <_ZN4RFFC4readEh>:
	RFFC5071_SCL();
	*/
}

uint16_t RFFC::read(uint8_t reg)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
	uint8_t rmask = 0x80;
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	73bb      	strb	r3, [r7, #14]
	uint16_t vmask = 0x8000;
 8000860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000864:	81bb      	strh	r3, [r7, #12]
	uint16_t val = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	817b      	strh	r3, [r7, #10]
	uint8_t ireg = 0x80 | reg;
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000870:	727b      	strb	r3, [r7, #9]
	 *
	 *
	 */

	//two clocks before enx goes low, undocumented
	RFFC5071_SCL();
 8000872:	4993      	ldr	r1, [pc, #588]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f7ff fd12 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	4619      	mov	r1, r3
 8000888:	f000 fda6 	bl	80013d8 <HAL_GPIO_WritePin>
 800088c:	498c      	ldr	r1, [pc, #560]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f7ff fd05 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	889b      	ldrh	r3, [r3, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	f000 fd99 	bl	80013d8 <HAL_GPIO_WritePin>
	RFFC5071_SCL();
 80008a6:	4986      	ldr	r1, [pc, #536]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 80008a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ac:	f7ff fcf8 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	889b      	ldrh	r3, [r3, #4]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	f000 fd8c 	bl	80013d8 <HAL_GPIO_WritePin>
 80008c0:	497f      	ldr	r1, [pc, #508]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f7ff fceb 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f000 fd7f 	bl	80013d8 <HAL_GPIO_WritePin>

	//gpio_set_pin_low(chip->enx);
	HAL_GPIO_WritePin(Port_enx, Pin_enx, GPIO_PIN_RESET);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6998      	ldr	r0, [r3, #24]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	8b9b      	ldrh	r3, [r3, #28]
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	f000 fd77 	bl	80013d8 <HAL_GPIO_WritePin>

	//clock out the undefined bit, set sda = 0
	//gpio_set_pin_low(chip->sda);
	HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_SET);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6898      	ldr	r0, [r3, #8]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	899b      	ldrh	r3, [r3, #12]
 80008f2:	2201      	movs	r2, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	f000 fd6f 	bl	80013d8 <HAL_GPIO_WritePin>

	RFFC5071_SCL();
 80008fa:	4971      	ldr	r1, [pc, #452]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 80008fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000900:	f7ff fcce 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	889b      	ldrh	r3, [r3, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	4619      	mov	r1, r3
 8000910:	f000 fd62 	bl	80013d8 <HAL_GPIO_WritePin>
 8000914:	496a      	ldr	r1, [pc, #424]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f7ff fcc1 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	889b      	ldrh	r3, [r3, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	f000 fd55 	bl	80013d8 <HAL_GPIO_WritePin>

	//ireg is reg with R bit set
	for(i=0; i<8; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d837      	bhi.n	80009a8 <_ZN4RFFC4readEh+0x15c>
	{
		if(rmask & ireg)
 8000938:	7bba      	ldrb	r2, [r7, #14]
 800093a:	7a7b      	ldrb	r3, [r7, #9]
 800093c:	4013      	ands	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <_ZN4RFFC4readEh+0x10a>
		{
			//gpio_set_pin_high(chip->sda);
			HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_SET);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6898      	ldr	r0, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	899b      	ldrh	r3, [r3, #12]
 800094c:	2201      	movs	r2, #1
 800094e:	4619      	mov	r1, r3
 8000950:	f000 fd42 	bl	80013d8 <HAL_GPIO_WritePin>
 8000954:	e007      	b.n	8000966 <_ZN4RFFC4readEh+0x11a>
		}
		else
		{
			//gpio_set_pin_low(chip->sda);
			HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_RESET);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6898      	ldr	r0, [r3, #8]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	899b      	ldrh	r3, [r3, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	f000 fd39 	bl	80013d8 <HAL_GPIO_WritePin>
		}
		RFFC5071_SCL();
 8000966:	4956      	ldr	r1, [pc, #344]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f7ff fc98 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	889b      	ldrh	r3, [r3, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	f000 fd2c 	bl	80013d8 <HAL_GPIO_WritePin>
 8000980:	494f      	ldr	r1, [pc, #316]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000986:	f7ff fc8b 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	889b      	ldrh	r3, [r3, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	4619      	mov	r1, r3
 8000996:	f000 fd1f 	bl	80013d8 <HAL_GPIO_WritePin>
		rmask >>= 1;
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	105b      	asrs	r3, r3, #1
 800099e:	73bb      	strb	r3, [r7, #14]
	for(i=0; i<8; i++)
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	e7c4      	b.n	8000932 <_ZN4RFFC4readEh+0xe6>
	}

	//1.5 clocks delay
	RFFC5071_SCL();
 80009a8:	4945      	ldr	r1, [pc, #276]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f7ff fc77 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	f000 fd0b 	bl	80013d8 <HAL_GPIO_WritePin>
 80009c2:	493f      	ldr	r1, [pc, #252]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 80009c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c8:	f7ff fc6a 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	889b      	ldrh	r3, [r3, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	f000 fcfe 	bl	80013d8 <HAL_GPIO_WritePin>
	//set SDA to input for a while
	//ioport_set_pin_dir(chip->sda,IOPORT_DIR_INPUT);
	changePinDirection(Port_sdata, Pin_sdata, 0); //0 for input
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6899      	ldr	r1, [r3, #8]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	899a      	ldrh	r2, [r3, #12]
 80009e4:	2300      	movs	r3, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f86c 	bl	8000ac4 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>
	//now the value
	for(i=0; i<16; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d834      	bhi.n	8000a60 <_ZN4RFFC4readEh+0x214>
	{
		RFFC5071_SCL();
 80009f6:	4932      	ldr	r1, [pc, #200]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f7ff fc50 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	889b      	ldrh	r3, [r3, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f000 fce4 	bl	80013d8 <HAL_GPIO_WritePin>
 8000a10:	492b      	ldr	r1, [pc, #172]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a16:	f7ff fc43 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	889b      	ldrh	r3, [r3, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	f000 fcd7 	bl	80013d8 <HAL_GPIO_WritePin>
		//if(gpio_pin_is_high(chip->sda))
		if(HAL_GPIO_ReadPin(Port_sdata, Pin_sdata) == GPIO_PIN_SET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	899b      	ldrh	r3, [r3, #12]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4610      	mov	r0, r2
 8000a36:	f000 fcb7 	bl	80013a8 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	2301      	moveq	r3, #1
 8000a42:	2300      	movne	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <_ZN4RFFC4readEh+0x206>
		{
			val |= vmask;
 8000a4a:	897a      	ldrh	r2, [r7, #10]
 8000a4c:	89bb      	ldrh	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	817b      	strh	r3, [r7, #10]
		}
		vmask >>= 1;
 8000a52:	89bb      	ldrh	r3, [r7, #12]
 8000a54:	105b      	asrs	r3, r3, #1
 8000a56:	81bb      	strh	r3, [r7, #12]
	for(i=0; i<16; i++)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e7c7      	b.n	80009f0 <_ZN4RFFC4readEh+0x1a4>
	}

	HAL_GPIO_WritePin(Port_enx, Pin_enx, GPIO_PIN_SET);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6998      	ldr	r0, [r3, #24]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	8b9b      	ldrh	r3, [r3, #28]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f000 fcb4 	bl	80013d8 <HAL_GPIO_WritePin>
	//pull enx high again
	RFFC5071_SCL();
 8000a70:	4913      	ldr	r1, [pc, #76]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a76:	f7ff fc13 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	4619      	mov	r1, r3
 8000a86:	f000 fca7 	bl	80013d8 <HAL_GPIO_WritePin>
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <_ZN4RFFC4readEh+0x274>)
 8000a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a90:	f7ff fc06 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	889b      	ldrh	r3, [r3, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f000 fc9a 	bl	80013d8 <HAL_GPIO_WritePin>

	changePinDirection(Port_sdata, Pin_sdata, 1); //1 for output
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6899      	ldr	r1, [r3, #8]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	899a      	ldrh	r2, [r3, #12]
 8000aac:	2301      	movs	r3, #1
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f808 	bl	8000ac4 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>

	return val;
 8000ab4:	897b      	ldrh	r3, [r7, #10]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000210 	.word	0x20000210

08000ac4 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>:

//#define PIN_MODE_OUTPUT	1
//#define PIN_MODE_INPUT	0
void RFFC::changePinDirection(GPIO_TypeDef *port, uint16_t pin, uint16_t dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	80bb      	strh	r3, [r7, #4]
	if(dir == PIN_MODE_OUTPUT)
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d109      	bne.n	8000af4 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x30>
	{
		port->MODER |= (0x0001<<pin); // GPIO_MODER_MODE8_0;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	88fa      	ldrh	r2, [r7, #6]
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aec:	431a      	orrs	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	601a      	str	r2, [r3, #0]
	}
	else if(dir == PIN_MODE_INPUT)
	{
		port->MODER &= ~(0x0003<<pin);
	}
}
 8000af2:	e00c      	b.n	8000b0e <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x4a>
	else if(dir == PIN_MODE_INPUT)
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d109      	bne.n	8000b0e <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x4a>
		port->MODER &= ~(0x0003<<pin);
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	88fa      	ldrh	r2, [r7, #6]
 8000b00:	2103      	movs	r1, #3
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	43d2      	mvns	r2, r2
 8000b08:	401a      	ands	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b74:	d10b      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_TIM_Base_MspInit+0x38>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_TIM_Base_MspInit+0x38>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_TIM_Base_MspInit+0x38>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8f6 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_FS_IRQHandler+0x10>)
 8000bfa:	f000 fd58 	bl	80016ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20001740 	.word	0x20001740

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f006 ff8c 	bl	8007b54 <__errno>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	230c      	movs	r3, #12
 8000c40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20050000 	.word	0x20050000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	2000025c 	.word	0x2000025c
 8000c70:	20001b50 	.word	0x20001b50

08000c74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <SystemInit+0x64>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <SystemInit+0x64>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <SystemInit+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <SystemInit+0x68>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <SystemInit+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <SystemInit+0x68>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <SystemInit+0x68>)
 8000ca0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ca4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ca8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <SystemInit+0x68>)
 8000cac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SystemInit+0x68>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <SystemInit+0x68>)
 8000cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <SystemInit+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x64>)
 8000cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce4:	f7ff ffc6 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
	ldr	r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <LoopForever+0x16>)
	cmp	r2, r3
 8000d0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f006 ff27 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff faf1 	bl	80002f8 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000d1c:	08008528 	.word	0x08008528
	ldr	r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d24:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000d28:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000d2c:	20001b4c 	.word	0x20001b4c

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>

08000d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f95f 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f80e 	bl	8000d64 <HAL_InitTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e001      	b.n	8000d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d54:	f7ff fee2 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_InitTick+0x6c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d023      	beq.n	8000dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_InitTick+0x70>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_InitTick+0x6c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f96b 	bl	800106a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d809      	bhi.n	8000db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f935 	bl	8001016 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0x74>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e007      	b.n	8000dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e004      	b.n	8000dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e001      	b.n	8000dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000026c 	.word	0x2000026c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000026c 	.word	0x2000026c

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_Delay+0x40>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000008 	.word	0x20000008

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff29 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff3e 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff31 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa2 	bl	8000fbc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e166      	b.n	8001362 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8158 	beq.w	800135c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d00b      	beq.n	80010cc <HAL_GPIO_Init+0x48>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d007      	beq.n	80010cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c0:	2b11      	cmp	r3, #17
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0xea>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b12      	cmp	r3, #18
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b2 	beq.w	800135c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b61      	ldr	r3, [pc, #388]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6613      	str	r3, [r2, #96]	; 0x60
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001210:	4a5c      	ldr	r2, [pc, #368]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123a:	d02b      	beq.n	8001294 <HAL_GPIO_Init+0x210>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d025      	beq.n	8001290 <HAL_GPIO_Init+0x20c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x308>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d01f      	beq.n	800128c <HAL_GPIO_Init+0x208>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d019      	beq.n	8001288 <HAL_GPIO_Init+0x204>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x310>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d013      	beq.n	8001284 <HAL_GPIO_Init+0x200>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x314>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1fc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x318>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1f8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x31c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1f4>
 8001274:	2307      	movs	r3, #7
 8001276:	e00e      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001278:	2308      	movs	r3, #8
 800127a:	e00c      	b.n	8001296 <HAL_GPIO_Init+0x212>
 800127c:	2306      	movs	r3, #6
 800127e:	e00a      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001280:	2305      	movs	r3, #5
 8001282:	e008      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001284:	2304      	movs	r3, #4
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001288:	2303      	movs	r3, #3
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x212>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x212>
 8001294:	2300      	movs	r3, #0
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a6:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_GPIO_Init+0x300>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <HAL_GPIO_Init+0x320>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d8:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_GPIO_Init+0x320>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_GPIO_Init+0x320>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001302:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_GPIO_Init+0x320>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_GPIO_Init+0x320>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_GPIO_Init+0x320>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f47f ae91 	bne.w	8001094 <HAL_GPIO_Init+0x10>
  }
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	48000400 	.word	0x48000400
 800138c:	48000800 	.word	0x48000800
 8001390:	48000c00 	.word	0x48000c00
 8001394:	48001000 	.word	0x48001000
 8001398:	48001400 	.word	0x48001400
 800139c:	48001800 	.word	0x48001800
 80013a0:	48001c00 	.word	0x48001c00
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	b08f      	sub	sp, #60	; 0x3c
 800140c:	af0a      	add	r7, sp, #40	; 0x28
 800140e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e116      	b.n	8001648 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 ff8d 	bl	8007354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f002 ffee 	bl	800443a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	687e      	ldr	r6, [r7, #4]
 8001466:	466d      	mov	r5, sp
 8001468:	f106 0410 	add.w	r4, r6, #16
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001478:	e885 0003 	stmia.w	r5, {r0, r1}
 800147c:	1d33      	adds	r3, r6, #4
 800147e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001480:	6838      	ldr	r0, [r7, #0]
 8001482:	f002 fedb 	bl	800423c <USB_CoreInit>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0d7      	b.n	8001648 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 ffdc 	bl	800445c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e04a      	b.n	8001540 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	333d      	adds	r3, #61	; 0x3d
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	333c      	adds	r3, #60	; 0x3c
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	b298      	uxth	r0, r3
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3342      	adds	r3, #66	; 0x42
 80014e6:	4602      	mov	r2, r0
 80014e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	333f      	adds	r3, #63	; 0x3f
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	3344      	adds	r3, #68	; 0x44
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3348      	adds	r3, #72	; 0x48
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	3350      	adds	r3, #80	; 0x50
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3af      	bcc.n	80014aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e044      	b.n	80015da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3b5      	bcc.n	8001550 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	687e      	ldr	r6, [r7, #4]
 80015ec:	466d      	mov	r5, sp
 80015ee:	f106 0410 	add.w	r4, r6, #16
 80015f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001602:	1d33      	adds	r3, r6, #4
 8001604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f002 ff52 	bl	80044b0 <USB_DevInit>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e014      	b.n	8001648 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2b01      	cmp	r3, #1
 8001634:	d102      	bne.n	800163c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 ff62 	bl	8002500 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fed4 	bl	80053ee <USB_DevDisconnect>

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001650 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_PCD_Start+0x1c>
 8001668:	2302      	movs	r3, #2
 800166a:	e01c      	b.n	80016a6 <HAL_PCD_Start+0x56>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fec3 	bl	8004418 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fe88 	bl	80053ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ae:	b590      	push	{r4, r7, lr}
 80016b0:	b08d      	sub	sp, #52	; 0x34
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 ff46 	bl	8005556 <USB_GetMode>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 838f 	bne.w	8001df0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 feaa 	bl	8005430 <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8385 	beq.w	8001dee <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fea1 	bl	8005430 <USB_ReadInterrupts>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d107      	bne.n	8001708 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f002 0202 	and.w	r2, r2, #2
 8001706:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fe8f 	bl	8005430 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b10      	cmp	r3, #16
 800171a:	d161      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0210 	bic.w	r2, r2, #16
 800172a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 020f 	and.w	r2, r3, #15
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	3304      	adds	r3, #4
 800174a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	0c5b      	lsrs	r3, r3, #17
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	2b02      	cmp	r3, #2
 8001756:	d124      	bne.n	80017a2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d035      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800176e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	6a38      	ldr	r0, [r7, #32]
 8001778:	f003 fcf5 	bl	8005166 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001788:	441a      	add	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800179a:	441a      	add	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	e016      	b.n	80017d0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	0c5b      	lsrs	r3, r3, #17
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d110      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017b4:	2208      	movs	r2, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	6a38      	ldr	r0, [r7, #32]
 80017ba:	f003 fcd4 	bl	8005166 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ca:	441a      	add	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699a      	ldr	r2, [r3, #24]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0210 	orr.w	r2, r2, #16
 80017de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fe23 	bl	8005430 <USB_ReadInterrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017f4:	d16e      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fe29 	bl	8005456 <USB_ReadDevAllOutEpInterrupt>
 8001804:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001806:	e062      	b.n	80018ce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d057      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fe4e 	bl	80054be <USB_ReadDevOutEPInterrupt>
 8001822:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	015a      	lsls	r2, r3, #5
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4413      	add	r3, r2
 8001836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183a:	461a      	mov	r2, r3
 800183c:	2301      	movs	r3, #1
 800183e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fd82 	bl	800234c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	461a      	mov	r2, r3
 8001860:	2308      	movs	r3, #8
 8001862:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fdbe 	bl	80023e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001882:	461a      	mov	r2, r3
 8001884:	2310      	movs	r3, #16
 8001886:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189e:	461a      	mov	r2, r3
 80018a0:	2320      	movs	r3, #32
 80018a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ba:	461a      	mov	r2, r3
 80018bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	3301      	adds	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d199      	bne.n	8001808 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fda9 	bl	8005430 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018e8:	f040 8087 	bne.w	80019fa <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 fdca 	bl	800548a <USB_ReadDevAllInEpInterrupt>
 80018f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018fc:	e07a      	b.n	80019f4 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d06f      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fdf1 	bl	80054fa <USB_ReadDevInEPInterrupt>
 8001918:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	2201      	movs	r2, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	69f9      	ldr	r1, [r7, #28]
 8001940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001944:	4013      	ands	r3, r2
 8001946:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001954:	461a      	mov	r2, r3
 8001956:	2301      	movs	r3, #1
 8001958:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f005 fd8a 	bl	800747a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800197c:	461a      	mov	r2, r3
 800197e:	2308      	movs	r3, #8
 8001980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	015a      	lsls	r2, r3, #5
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001998:	461a      	mov	r2, r3
 800199a:	2310      	movs	r3, #16
 800199c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b4:	461a      	mov	r2, r3
 80019b6:	2340      	movs	r3, #64	; 0x40
 80019b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d0:	461a      	mov	r2, r3
 80019d2:	2302      	movs	r3, #2
 80019d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fc29 	bl	800223a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	3301      	adds	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d181      	bne.n	80018fe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fd16 	bl	8005430 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a0e:	d122      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f006 f837 	bl	8007aac <HAL_PCDEx_LPM_Callback>
 8001a3e:	e002      	b.n	8001a46 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f005 fd87 	bl	8007554 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fce8 	bl	8005430 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6a:	d112      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 fd43 	bl	8007508 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a90:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fcca 	bl	8005430 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aa6:	d121      	bne.n	8001aec <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ab6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d111      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001adc:	2101      	movs	r1, #1
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f005 ffe4 	bl	8007aac <HAL_PCDEx_LPM_Callback>
 8001ae4:	e002      	b.n	8001aec <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f005 fd0e 	bl	8007508 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fc9d 	bl	8005430 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b00:	f040 80c5 	bne.w	8001c8e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fe12 	bl	8004748 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b28:	e056      	b.n	8001bd8 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	015a      	lsls	r2, r3, #5
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b36:	461a      	mov	r2, r3
 8001b38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4e:	0151      	lsls	r1, r2, #5
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	440a      	add	r2, r1
 8001b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b5c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b6e:	0151      	lsls	r1, r2, #5
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	440a      	add	r2, r1
 8001b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba2:	0151      	lsls	r1, r2, #5
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc2:	0151      	lsls	r1, r2, #5
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	440a      	add	r2, r1
 8001bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3a3      	bcc.n	8001b2a <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bf4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0e:	f043 030b 	orr.w	r3, r3, #11
 8001c12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c24:	f043 030b 	orr.w	r3, r3, #11
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	e015      	b.n	8001c58 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c52:	f043 030b 	orr.w	r3, r3, #11
 8001c56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f003 fc9d 	bl	80055b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fbcc 	bl	8005430 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca2:	d124      	bne.n	8001cee <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fc62 	bl	8005572 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fda9 	bl	800480a <USB_GetDevSpeed>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681c      	ldr	r4, [r3, #0]
 8001cc4:	f001 fa46 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f002 fb04 	bl	80042e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f005 fbf6 	bl	80074ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fb9c 	bl	8005430 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d10a      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f005 fbd3 	bl	80074ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f002 0208 	and.w	r2, r2, #8
 8001d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fb87 	bl	8005430 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d2c:	d10f      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f005 fc45 	bl	80075c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fb6c 	bl	8005430 <USB_ReadInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d62:	d10f      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f005 fc18 	bl	80075a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fb51 	bl	8005430 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d10a      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f005 fc26 	bl	80075ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fb3b 	bl	8005430 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d115      	bne.n	8001df0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f005 fc16 	bl	8007608 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	e000      	b.n	8001df0 <HAL_PCD_IRQHandler+0x742>
      return;
 8001dee:	bf00      	nop
    }
  }
}
 8001df0:	3734      	adds	r7, #52	; 0x34
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}

08001df6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_SetAddress+0x1a>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e013      	b.n	8001e38 <HAL_PCD_SetAddress+0x42>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fa99 	bl	8005360 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	70fb      	strb	r3, [r7, #3]
 8001e52:	460b      	mov	r3, r1
 8001e54:	803b      	strh	r3, [r7, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da0f      	bge.n	8001e86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	3338      	adds	r3, #56	; 0x38
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	705a      	strb	r2, [r3, #1]
 8001e84:	e00f      	b.n	8001ea6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb2:	883a      	ldrh	r2, [r7, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	78ba      	ldrb	r2, [r7, #2]
 8001ebc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d102      	bne.n	8001edc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_PCD_EP_Open+0xaa>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e00e      	b.n	8001f08 <HAL_PCD_EP_Open+0xc8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68f9      	ldr	r1, [r7, #12]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fca5 	bl	8004848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f06:	7afb      	ldrb	r3, [r7, #11]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da0f      	bge.n	8001f44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	3338      	adds	r3, #56	; 0x38
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	705a      	strb	r2, [r3, #1]
 8001f42:	e00f      	b.n	8001f64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_EP_Close+0x6e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e00e      	b.n	8001f9c <HAL_PCD_EP_Close+0x8c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fce3 	bl	8004958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 ff60 	bl	8004ec8 <USB_EP0StartXfer>
 8002008:	e005      	b.n	8002016 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6979      	ldr	r1, [r7, #20]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fd7d 	bl	8004b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	460b      	mov	r3, r1
 800205e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2201      	movs	r2, #1
 800208e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	b2da      	uxtb	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6979      	ldr	r1, [r7, #20]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 ff0b 	bl	8004ec8 <USB_EP0StartXfer>
 80020b2:	e005      	b.n	80020c0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fd28 	bl	8004b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d901      	bls.n	80020e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e04e      	b.n	8002186 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da0f      	bge.n	8002110 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 020f 	and.w	r2, r3, #15
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3338      	adds	r3, #56	; 0x38
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	705a      	strb	r2, [r3, #1]
 800210e:	e00d      	b.n	800212c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_PCD_EP_SetStall+0x82>
 8002148:	2302      	movs	r3, #2
 800214a:	e01c      	b.n	8002186 <HAL_PCD_EP_SetStall+0xbc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 f82c 	bl	80051b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f003 fa1e 	bl	80055b8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d901      	bls.n	80021ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e042      	b.n	8002232 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da0f      	bge.n	80021d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	3338      	adds	r3, #56	; 0x38
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	705a      	strb	r2, [r3, #1]
 80021d2:	e00f      	b.n	80021f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_PCD_EP_ClrStall+0x86>
 8002210:	2302      	movs	r3, #2
 8002212:	e00e      	b.n	8002232 <HAL_PCD_EP_ClrStall+0xa4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f836 	bl	8005294 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b088      	sub	sp, #32
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	3338      	adds	r3, #56	; 0x38
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	429a      	cmp	r2, r3
 800226c:	d901      	bls.n	8002272 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e067      	b.n	8002342 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	429a      	cmp	r2, r3
 8002286:	d902      	bls.n	800228e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3303      	adds	r3, #3
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002296:	e026      	b.n	80022e6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d902      	bls.n	80022b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3303      	adds	r3, #3
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	6978      	ldr	r0, [r7, #20]
 80022ca:	f002 ff1b 	bl	8005104 <USB_WritePacket>

    ep->xfer_buff  += len;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	441a      	add	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	441a      	add	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d809      	bhi.n	8002310 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002304:	429a      	cmp	r2, r3
 8002306:	d203      	bcs.n	8002310 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1c3      	bne.n	8002298 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	429a      	cmp	r2, r3
 800231a:	d811      	bhi.n	8002340 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	2201      	movs	r2, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	43db      	mvns	r3, r3
 8002336:	6939      	ldr	r1, [r7, #16]
 8002338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800233c:	4013      	ands	r3, r2
 800233e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	333c      	adds	r3, #60	; 0x3c
 8002364:	3304      	adds	r3, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <PCD_EP_OutXfrComplete_int+0x98>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d124      	bne.n	80023cc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	e01a      	b.n	80023d8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	2320      	movs	r3, #32
 80023bc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 f83d 	bl	8007444 <HAL_PCD_DataOutStageCallback>
 80023ca:	e005      	b.n	80023d8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4619      	mov	r1, r3
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f005 f836 	bl	8007444 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	4f54310a 	.word	0x4f54310a

080023e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	333c      	adds	r3, #60	; 0x3c
 8002400:	3304      	adds	r3, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <PCD_EP_OutSetupPacket_int+0x64>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d90e      	bls.n	800243c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f004 ffef 	bl	8007420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	4f54300a 	.word	0x4f54300a

08002450 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800246e:	883b      	ldrh	r3, [r7, #0]
 8002470:	0419      	lsls	r1, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	430a      	orrs	r2, r1
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
 800247c:	e028      	b.n	80024d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4413      	add	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e00d      	b.n	80024ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	3340      	adds	r3, #64	; 0x40
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	3301      	adds	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d3ec      	bcc.n	8002492 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024b8:	883b      	ldrh	r3, [r7, #0]
 80024ba:	0418      	lsls	r0, r3, #16
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4302      	orrs	r2, r0
 80024c8:	3340      	adds	r3, #64	; 0x40
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002532:	f043 0303 	orr.w	r3, r3, #3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_PWREx_GetVoltageRange+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40007000 	.word	0x40007000

08002564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002572:	d130      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800257c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002580:	d038      	beq.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2232      	movs	r2, #50	; 0x32
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9b      	lsrs	r3, r3, #18
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a8:	e002      	b.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d102      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f2      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d110      	bne.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e00f      	b.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e2:	d007      	beq.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ec:	4a05      	ldr	r2, [pc, #20]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000
 8002608:	20000000 	.word	0x20000000
 800260c:	431bde83 	.word	0x431bde83

08002610 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_PWREx_EnableVddUSB+0x1c>)
 800261a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261e:	6053      	str	r3, [r2, #4]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40007000 	.word	0x40007000

08002630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f000 bc16 	b.w	8002e70 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002644:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264e:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80e4 	beq.w	800282e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_RCC_OscConfig+0x4c>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	f040 808b 	bne.w	800278a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 8087 	bne.w	800278a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x64>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e3ed      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_RCC_OscConfig+0x7e>
 80026a4:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ac:	e005      	b.n	80026ba <HAL_RCC_OscConfig+0x8a>
 80026ae:	4b86      	ldr	r3, [pc, #536]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d223      	bcs.n	8002706 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fd52 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e3ce      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7c      	ldr	r2, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4977      	ldr	r1, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	4972      	ldr	r1, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	e025      	b.n	8002752 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002706:	4b70      	ldr	r3, [pc, #448]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6f      	ldr	r2, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	496a      	ldr	r1, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fd12 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e38e      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002752:	f000 fc75 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002756:	4601      	mov	r1, r0
 8002758:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a5a      	ldr	r2, [pc, #360]	; (80028cc <HAL_RCC_OscConfig+0x29c>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	fa21 f303 	lsr.w	r3, r1, r3
 800276e:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x2a0>)
 8002770:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002772:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x2a4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe faf4 	bl	8000d64 <HAL_InitTick>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d052      	beq.n	800282c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	e372      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d032      	beq.n	80027f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002792:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279e:	f7fe fb31 	bl	8000e04 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a6:	f7fe fb2d 	bl	8000e04 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e35b      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b8:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c4:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3f      	ldr	r2, [pc, #252]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	493a      	ldr	r1, [pc, #232]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4935      	ldr	r1, [pc, #212]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 80027f6:	e01a      	b.n	800282e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002804:	f7fe fafe 	bl	8000e04 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280c:	f7fe fafa 	bl	8000e04 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e328      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1dc>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d073      	beq.n	8002922 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x21c>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d10e      	bne.n	8002864 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d063      	beq.n	8002920 <HAL_RCC_OscConfig+0x2f0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d15f      	bne.n	8002920 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e305      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x24c>
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0x288>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x270>
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0x288>
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_RCC_OscConfig+0x298>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe faa0 	bl	8000e04 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	e010      	b.n	80028ea <HAL_RCC_OscConfig+0x2ba>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	080084ac 	.word	0x080084ac
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe fa94 	bl	8000e04 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e2c2      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ea:	4baf      	ldr	r3, [pc, #700]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2a8>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa84 	bl	8000e04 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe fa80 	bl	8000e04 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e2ae      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002912:	4ba5      	ldr	r3, [pc, #660]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x2d0>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d060      	beq.n	80029f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x310>
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d119      	bne.n	800296e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d116      	bne.n	800296e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002940:	4b99      	ldr	r3, [pc, #612]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_OscConfig+0x328>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e28b      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b93      	ldr	r3, [pc, #588]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	4990      	ldr	r1, [pc, #576]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296c:	e040      	b.n	80029f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d023      	beq.n	80029be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002976:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a8b      	ldr	r2, [pc, #556]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fa3f 	bl	8000e04 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe fa3b 	bl	8000e04 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e269      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299c:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	497c      	ldr	r1, [pc, #496]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
 80029bc:	e018      	b.n	80029f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a79      	ldr	r2, [pc, #484]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 80029c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fa1b 	bl	8000e04 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fa17 	bl	8000e04 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e245      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e4:	4b70      	ldr	r3, [pc, #448]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0a:	4a67      	ldr	r2, [pc, #412]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe f9f6 	bl	8000e04 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe f9f2 	bl	8000e04 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e220      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <HAL_RCC_OscConfig+0x3ec>
 8002a3c:	e01b      	b.n	8002a76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a44:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe f9d9 	bl	8000e04 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe f9d5 	bl	8000e04 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e203      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a68:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ef      	bne.n	8002a56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80a6 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a88:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab0:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_OscConfig+0x57c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d118      	bne.n	8002aee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x57c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <HAL_RCC_OscConfig+0x57c>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe f99c 	bl	8000e04 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7fe f998 	bl	8000e04 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1c6      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_RCC_OscConfig+0x57c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4d8>
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b06:	e024      	b.n	8002b52 <HAL_RCC_OscConfig+0x522>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d110      	bne.n	8002b32 <HAL_RCC_OscConfig+0x502>
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b30:	e00f      	b.n	8002b52 <HAL_RCC_OscConfig+0x522>
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f023 0304 	bic.w	r3, r3, #4
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f953 	bl	8000e04 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe f94f 	bl	8000e04 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e17b      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_OscConfig+0x578>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ed      	beq.n	8002b62 <HAL_RCC_OscConfig+0x532>
 8002b86:	e01a      	b.n	8002bbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe f93c 	bl	8000e04 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8e:	e00f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe f938 	bl	8000e04 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d906      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e164      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb0:	4ba8      	ldr	r3, [pc, #672]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e8      	bne.n	8002b90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4ba3      	ldr	r3, [pc, #652]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	4aa2      	ldr	r2, [pc, #648]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be4:	4b9b      	ldr	r3, [pc, #620]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bea:	4a9a      	ldr	r2, [pc, #616]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f906 	bl	8000e04 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bfc:	f7fe f902 	bl	8000e04 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e130      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0e:	4b91      	ldr	r3, [pc, #580]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCC_OscConfig+0x5cc>
 8002c1c:	e01b      	b.n	8002c56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c1e:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c24:	4a8b      	ldr	r2, [pc, #556]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe f8e9 	bl	8000e04 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c36:	f7fe f8e5 	bl	8000e04 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e113      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c48:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ef      	bne.n	8002c36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8107 	beq.w	8002e6e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f040 80cb 	bne.w	8002e00 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c6a:	4b7a      	ldr	r3, [pc, #488]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d12c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d123      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d113      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d109      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d06d      	beq.n	8002db4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d068      	beq.n	8002db0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0ba      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a55      	ldr	r2, [pc, #340]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d06:	f7fe f87d 	bl	8000e04 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe f879 	bl	8000e04 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0a7      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f0      	bne.n	8002d0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2c:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_RCC_OscConfig+0x828>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d46:	0212      	lsls	r2, r2, #8
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d4e:	0852      	lsrs	r2, r2, #1
 8002d50:	3a01      	subs	r2, #1
 8002d52:	0552      	lsls	r2, r2, #21
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d5a:	0852      	lsrs	r2, r2, #1
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0652      	lsls	r2, r2, #25
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d66:	06d2      	lsls	r2, r2, #27
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	493a      	ldr	r1, [pc, #232]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d7c:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d88:	f7fe f83c 	bl	8000e04 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe f838 	bl	8000e04 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e066      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dae:	e05e      	b.n	8002e6e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e05d      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d156      	bne.n	8002e6e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dcc:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd8:	f7fe f814 	bl	8000e04 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f810 	bl	8000e04 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e03e      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x7b0>
 8002dfe:	e036      	b.n	8002e6e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d031      	beq.n	8002e6a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e24:	f023 0303 	bic.w	r3, r3, #3
 8002e28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_OscConfig+0x824>)
 8002e30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fd ffe3 	bl	8000e04 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e40:	e00c      	b.n	8002e5c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fd ffdf 	bl	8000e04 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d905      	bls.n	8002e5c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e00d      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
 8002e54:	40021000 	.word	0x40021000
 8002e58:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_OscConfig+0x848>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ec      	bne.n	8002e42 <HAL_RCC_OscConfig+0x812>
 8002e68:	e001      	b.n	8002e6e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0c8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 0207 	bic.w	r2, r3, #7
 8002ea6:	4961      	ldr	r1, [pc, #388]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b0      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d04c      	beq.n	8002f66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d121      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e09e      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e092      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e086      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e07e      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 0203 	bic.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	493f      	ldr	r1, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f36:	f7fd ff65 	bl	8000e04 <HAL_GetTick>
 8002f3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3e:	f7fd ff61 	bl	8000e04 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e066      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 020c 	and.w	r2, r3, #12
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d1eb      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	492c      	ldr	r1, [pc, #176]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4924      	ldr	r1, [pc, #144]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1b0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e036      	b.n	8003022 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4918      	ldr	r1, [pc, #96]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4910      	ldr	r1, [pc, #64]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff2:	f000 f825 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCC_ClockConfig+0x1b4>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	fa21 f303 	lsr.w	r3, r1, r3
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fea4 	bl	8000d64 <HAL_InitTick>
 800301c:	4603      	mov	r3, r0
 800301e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003020:	7afb      	ldrb	r3, [r7, #11]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	080084ac 	.word	0x080084ac
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003058:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x34>
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d121      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d11e      	bne.n	80030b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e005      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003090:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d102      	bne.n	80030be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e004      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <HAL_RCC_GetSysClockFreq+0x110>)
 80030c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d133      	bne.n	8003136 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0xaa>
 80030e2:	e005      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030e6:	617b      	str	r3, [r7, #20]
      break;
 80030e8:	e005      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ec:	617b      	str	r3, [r7, #20]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	617b      	str	r3, [r7, #20]
      break;
 80030f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	3301      	adds	r3, #1
 8003102:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	fb02 f203 	mul.w	r2, r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_GetSysClockFreq+0x104>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0e5b      	lsrs	r3, r3, #25
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	3301      	adds	r3, #1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003136:	69bb      	ldr	r3, [r7, #24]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3724      	adds	r7, #36	; 0x24
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40021000 	.word	0x40021000
 8003148:	080084bc 	.word	0x080084bc
 800314c:	00f42400 	.word	0x00f42400
 8003150:	007a1200 	.word	0x007a1200

08003154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_RCC_GetHCLKFreq+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff f9e0 	bl	8002548 <HAL_PWREx_GetVoltageRange>
 8003188:	6178      	str	r0, [r7, #20]
 800318a:	e014      	b.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4a24      	ldr	r2, [pc, #144]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	6593      	str	r3, [r2, #88]	; 0x58
 8003198:	4b22      	ldr	r3, [pc, #136]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a4:	f7ff f9d0 	bl	8002548 <HAL_PWREx_GetVoltageRange>
 80031a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d10b      	bne.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d919      	bls.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2ba0      	cmp	r3, #160	; 0xa0
 80031c8:	d902      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ca:	2302      	movs	r3, #2
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e013      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e010      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d902      	bls.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031dc:	2303      	movs	r3, #3
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e00a      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d102      	bne.n	80031ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e8:	2302      	movs	r3, #2
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e004      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b70      	cmp	r3, #112	; 0x70
 80031f2:	d101      	bne.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 0207 	bic.w	r2, r3, #7
 8003200:	4909      	ldr	r1, [pc, #36]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	d001      	beq.n	800321a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	40022000 	.word	0x40022000

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003234:	2300      	movs	r3, #0
 8003236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003238:	2300      	movs	r3, #0
 800323a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003244:	2b00      	cmp	r3, #0
 8003246:	d03f      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003250:	d01c      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d802      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800325c:	e01f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800325e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003262:	d003      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003268:	d01c      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800326a:	e018      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800326c:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a84      	ldr	r2, [pc, #528]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003278:	e015      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fadb 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800328a:	e00c      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3320      	adds	r3, #32
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fbc2 	bl	8003a1c <RCCEx_PLLSAI2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800329c:	e003      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	74fb      	strb	r3, [r7, #19]
      break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80032a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ba:	4972      	ldr	r1, [pc, #456]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032c2:	e001      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032dc:	d01c      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e2:	d802      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80032e8:	e01f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80032f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032f4:	d01c      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80032f6:	e018      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f8:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a61      	ldr	r2, [pc, #388]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003302:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003304:	e015      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fa95 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3320      	adds	r3, #32
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fb7c 	bl	8003a1c <RCCEx_PLLSAI2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	74fb      	strb	r3, [r7, #19]
      break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003338:	4b52      	ldr	r3, [pc, #328]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003346:	494f      	ldr	r1, [pc, #316]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80a0 	beq.w	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	4a40      	ldr	r2, [pc, #256]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6593      	str	r3, [r2, #88]	; 0x58
 8003388:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003394:	2301      	movs	r3, #1
 8003396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003398:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800339e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033a4:	f7fd fd2e 	bl	8000e04 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033aa:	e009      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ac:	f7fd fd2a 	bl	8000e04 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d902      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	74fb      	strb	r3, [r7, #19]
        break;
 80033be:	e005      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033c0:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ef      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d15c      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01f      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d019      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fd fce9 	bl	8000e04 <HAL_GetTick>
 8003432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003434:	e00b      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd fce5 	bl	8000e04 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d902      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	74fb      	strb	r3, [r7, #19]
            break;
 800344c:	e006      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ec      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800347a:	e009      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
 8003480:	e006      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003490:	7c7b      	ldrb	r3, [r7, #17]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	4ba6      	ldr	r3, [pc, #664]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	4aa5      	ldr	r2, [pc, #660]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800349c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ae:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f023 0203 	bic.w	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	499c      	ldr	r1, [pc, #624]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034d0:	4b97      	ldr	r3, [pc, #604]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 020c 	bic.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	4994      	ldr	r1, [pc, #592]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034f2:	4b8f      	ldr	r3, [pc, #572]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	498b      	ldr	r1, [pc, #556]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003514:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4983      	ldr	r1, [pc, #524]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003536:	4b7e      	ldr	r3, [pc, #504]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	497a      	ldr	r1, [pc, #488]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003558:	4b75      	ldr	r3, [pc, #468]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	4972      	ldr	r1, [pc, #456]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003588:	4969      	ldr	r1, [pc, #420]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035aa:	4961      	ldr	r1, [pc, #388]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	4958      	ldr	r1, [pc, #352]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e0:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	4950      	ldr	r1, [pc, #320]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003602:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	4947      	ldr	r1, [pc, #284]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003624:	4b42      	ldr	r3, [pc, #264]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003632:	493f      	ldr	r1, [pc, #252]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d028      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003646:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4936      	ldr	r1, [pc, #216]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003664:	d106      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003666:	4b32      	ldr	r3, [pc, #200]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	4a31      	ldr	r2, [pc, #196]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800366c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003670:	60d3      	str	r3, [r2, #12]
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f8d9 	bl	800383c <RCCEx_PLLSAI1_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d028      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036a4:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	491f      	ldr	r1, [pc, #124]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
 80036d0:	e011      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036da:	d10c      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8aa 	bl	800383c <RCCEx_PLLSAI1_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003720:	d108      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003722:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a02      	ldr	r2, [pc, #8]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372c:	60d3      	str	r3, [r2, #12]
 800372e:	e013      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003730:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f879 	bl	800383c <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003772:	4929      	ldr	r1, [pc, #164]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003782:	d10d      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f856 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d014      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	74bb      	strb	r3, [r7, #18]
 800379e:	e011      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3320      	adds	r3, #32
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f933 	bl	8003a1c <RCCEx_PLLSAI2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e0:	490d      	ldr	r1, [pc, #52]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003804:	4904      	ldr	r1, [pc, #16]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800380c:	7cbb      	ldrb	r3, [r7, #18]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d10d      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
       ||
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800386e:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
       ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d044      	beq.n	800390c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e041      	b.n	800390c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d00c      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x6e>
 8003890:	2b03      	cmp	r3, #3
 8003892:	d013      	beq.n	80038bc <RCCEx_PLLSAI1_Config+0x80>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d120      	bne.n	80038da <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003898:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11d      	bne.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e01a      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038aa:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d116      	bne.n	80038e4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ba:	e013      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038bc:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10f      	bne.n	80038e8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d8:	e006      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      break;
 80038de:	e004      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10d      	bne.n	800390c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	3b01      	subs	r3, #1
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	430b      	orrs	r3, r1
 8003906:	4944      	ldr	r1, [pc, #272]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d17c      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a40      	ldr	r2, [pc, #256]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800391c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391e:	f7fd fa71 	bl	8000e04 <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003924:	e009      	b.n	800393a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003926:	f7fd fa6d 	bl	8000e04 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d902      	bls.n	800393a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	73fb      	strb	r3, [r7, #15]
        break;
 8003938:	e005      	b.n	8003946 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ef      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d15f      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d110      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003952:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800395a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6892      	ldr	r2, [r2, #8]
 8003962:	0211      	lsls	r1, r2, #8
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68d2      	ldr	r2, [r2, #12]
 8003968:	06d2      	lsls	r2, r2, #27
 800396a:	430a      	orrs	r2, r1
 800396c:	492a      	ldr	r1, [pc, #168]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	610b      	str	r3, [r1, #16]
 8003972:	e027      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d112      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	0211      	lsls	r1, r2, #8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6912      	ldr	r2, [r2, #16]
 8003990:	0852      	lsrs	r2, r2, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	0552      	lsls	r2, r2, #21
 8003996:	430a      	orrs	r2, r1
 8003998:	491f      	ldr	r1, [pc, #124]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	610b      	str	r3, [r1, #16]
 800399e:	e011      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	0211      	lsls	r1, r2, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6952      	ldr	r2, [r2, #20]
 80039b6:	0852      	lsrs	r2, r2, #1
 80039b8:	3a01      	subs	r2, #1
 80039ba:	0652      	lsls	r2, r2, #25
 80039bc:	430a      	orrs	r2, r1
 80039be:	4916      	ldr	r1, [pc, #88]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fa18 	bl	8000e04 <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d6:	e009      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d8:	f7fd fa14 	bl	8000e04 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ea:	e005      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ef      	beq.n	80039d8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	4904      	ldr	r1, [pc, #16]	; (8003a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a2a:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d10d      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
       ||
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d044      	beq.n	8003aec <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e041      	b.n	8003aec <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d00c      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0x6e>
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d013      	beq.n	8003a9c <RCCEx_PLLSAI2_Config+0x80>
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d120      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a78:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a88:	e01a      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9a:	e013      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa8:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab8:	e006      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      break;
 8003abe:	e004      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e002      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ac4:	bf00      	nop
 8003ac6:	e000      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ac8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	4939      	ldr	r1, [pc, #228]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d166      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afe:	f7fd f981 	bl	8000e04 <HAL_GetTick>
 8003b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b04:	e009      	b.n	8003b1a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b06:	f7fd f97d 	bl	8000e04 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d902      	bls.n	8003b1a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	73fb      	strb	r3, [r7, #15]
        break;
 8003b18:	e005      	b.n	8003b26 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ef      	bne.n	8003b06 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d149      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d110      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	0211      	lsls	r1, r2, #8
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68d2      	ldr	r2, [r2, #12]
 8003b48:	06d2      	lsls	r2, r2, #27
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	491f      	ldr	r1, [pc, #124]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	614b      	str	r3, [r1, #20]
 8003b52:	e011      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6892      	ldr	r2, [r2, #8]
 8003b64:	0211      	lsls	r1, r2, #8
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6912      	ldr	r2, [r2, #16]
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0652      	lsls	r2, r2, #25
 8003b70:	430a      	orrs	r2, r1
 8003b72:	4916      	ldr	r1, [pc, #88]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fd f93e 	bl	8000e04 <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b8a:	e009      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b8c:	f7fd f93a 	bl	8000e04 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d902      	bls.n	8003ba0 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b9e:	e005      	b.n	8003bac <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ef      	beq.n	8003b8c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	4904      	ldr	r1, [pc, #16]	; (8003bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e049      	b.n	8003c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fc ffb4 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f000 f958 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e047      	b.n	8003d28 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <HAL_TIM_Base_Start+0xb4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_TIM_Base_Start+0x66>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d018      	beq.n	8003ce6 <HAL_TIM_Base_Start+0x66>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_TIM_Base_Start+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_TIM_Base_Start+0x66>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <HAL_TIM_Base_Start+0xbc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIM_Base_Start+0x66>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_TIM_Base_Start+0xc0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIM_Base_Start+0x66>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <HAL_TIM_Base_Start+0xc4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIM_Base_Start+0x66>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <HAL_TIM_Base_Start+0xc8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d115      	bne.n	8003d12 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <HAL_TIM_Base_Start+0xcc>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	d015      	beq.n	8003d24 <HAL_TIM_Base_Start+0xa4>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfe:	d011      	beq.n	8003d24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	e008      	b.n	8003d24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e000      	b.n	8003d26 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40013400 	.word	0x40013400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	00010007 	.word	0x00010007

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0a8      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x16a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d067      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0x124>
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d80b      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x70>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d073      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x144>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d802      	bhi.n	8003db6 <HAL_TIM_ConfigClockSource+0x66>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d06f      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003db4:	e078      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d06c      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x144>
 8003dba:	2b30      	cmp	r3, #48	; 0x30
 8003dbc:	d06a      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003dbe:	e073      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d00d      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x90>
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d804      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x82>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d033      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0xe4>
 8003dcc:	2b60      	cmp	r3, #96	; 0x60
 8003dce:	d041      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003dd0:	e06a      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d066      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d017      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003dde:	e063      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f000 f97c 	bl	80040ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]
      break;
 8003e0c:	e04c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f000 f965 	bl	80040ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e30:	609a      	str	r2, [r3, #8]
      break;
 8003e32:	e039      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f000 f8d9 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2150      	movs	r1, #80	; 0x50
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f932 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e52:	e029      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	461a      	mov	r2, r3
 8003e62:	f000 f8f8 	bl	8004056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2160      	movs	r1, #96	; 0x60
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f922 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e72:	e019      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f000 f8b9 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f912 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003e92:	e009      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f000 f909 	bl	80040b6 <TIM_ITRx_SetConfig>
        break;
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a40      	ldr	r2, [pc, #256]	; (8003fd8 <TIM_Base_SetConfig+0x114>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d00f      	beq.n	8003f04 <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3d      	ldr	r2, [pc, #244]	; (8003fdc <TIM_Base_SetConfig+0x118>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <TIM_Base_SetConfig+0x11c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3b      	ldr	r2, [pc, #236]	; (8003fe4 <TIM_Base_SetConfig+0x120>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <TIM_Base_SetConfig+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d108      	bne.n	8003f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <TIM_Base_SetConfig+0x114>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f24:	d01b      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <TIM_Base_SetConfig+0x118>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d017      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <TIM_Base_SetConfig+0x11c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2a      	ldr	r2, [pc, #168]	; (8003fe4 <TIM_Base_SetConfig+0x120>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <TIM_Base_SetConfig+0x124>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a28      	ldr	r2, [pc, #160]	; (8003fec <TIM_Base_SetConfig+0x128>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <TIM_Base_SetConfig+0x12c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_Base_SetConfig+0x9a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <TIM_Base_SetConfig+0x130>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <TIM_Base_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00f      	beq.n	8003fbc <TIM_Base_SetConfig+0xf8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00b      	beq.n	8003fbc <TIM_Base_SetConfig+0xf8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	; (8003fec <TIM_Base_SetConfig+0x128>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <TIM_Base_SetConfig+0xf8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <TIM_Base_SetConfig+0x12c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_Base_SetConfig+0xf8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <TIM_Base_SetConfig+0x130>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d103      	bne.n	8003fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	615a      	str	r2, [r3, #20]
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40013400 	.word	0x40013400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40014400 	.word	0x40014400
 8003ff4:	40014800 	.word	0x40014800

08003ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 030a 	bic.w	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0210 	bic.w	r2, r3, #16
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 0307 	orr.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004140:	2302      	movs	r3, #2
 8004142:	e068      	b.n	8004216 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2e      	ldr	r2, [pc, #184]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800417e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d018      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1a      	ldr	r2, [pc, #104]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a18      	ldr	r2, [pc, #96]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10c      	bne.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40013400 	.word	0x40013400
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40014000 	.word	0x40014000

0800423c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800423c:	b084      	sub	sp, #16
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	f107 001c 	add.w	r0, r7, #28
 800424a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	d122      	bne.n	800429a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 f9da 	bl	8005648 <USB_CoreReset>
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e01a      	b.n	80042d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f001 f9ce 	bl	8005648 <USB_CoreReset>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
 80042c2:	e005      	b.n	80042d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042dc:	b004      	add	sp, #16
 80042de:	4770      	bx	lr

080042e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d165      	bne.n	80043c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4a3e      	ldr	r2, [pc, #248]	; (80043f0 <USB_SetTurnaroundTime+0x110>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d906      	bls.n	800430a <USB_SetTurnaroundTime+0x2a>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4a3d      	ldr	r2, [pc, #244]	; (80043f4 <USB_SetTurnaroundTime+0x114>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d802      	bhi.n	800430a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004304:	230f      	movs	r3, #15
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e05c      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4a39      	ldr	r2, [pc, #228]	; (80043f4 <USB_SetTurnaroundTime+0x114>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d906      	bls.n	8004320 <USB_SetTurnaroundTime+0x40>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4a38      	ldr	r2, [pc, #224]	; (80043f8 <USB_SetTurnaroundTime+0x118>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d802      	bhi.n	8004320 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800431a:	230e      	movs	r3, #14
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e051      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4a35      	ldr	r2, [pc, #212]	; (80043f8 <USB_SetTurnaroundTime+0x118>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d906      	bls.n	8004336 <USB_SetTurnaroundTime+0x56>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a34      	ldr	r2, [pc, #208]	; (80043fc <USB_SetTurnaroundTime+0x11c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d802      	bhi.n	8004336 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004330:	230d      	movs	r3, #13
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e046      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4a30      	ldr	r2, [pc, #192]	; (80043fc <USB_SetTurnaroundTime+0x11c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d906      	bls.n	800434c <USB_SetTurnaroundTime+0x6c>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <USB_SetTurnaroundTime+0x120>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d802      	bhi.n	800434c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004346:	230c      	movs	r3, #12
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e03b      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <USB_SetTurnaroundTime+0x120>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d906      	bls.n	8004362 <USB_SetTurnaroundTime+0x82>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <USB_SetTurnaroundTime+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d802      	bhi.n	8004362 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800435c:	230b      	movs	r3, #11
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e030      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <USB_SetTurnaroundTime+0x124>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d906      	bls.n	8004378 <USB_SetTurnaroundTime+0x98>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <USB_SetTurnaroundTime+0x128>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d802      	bhi.n	8004378 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004372:	230a      	movs	r3, #10
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e025      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a23      	ldr	r2, [pc, #140]	; (8004408 <USB_SetTurnaroundTime+0x128>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d906      	bls.n	800438e <USB_SetTurnaroundTime+0xae>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <USB_SetTurnaroundTime+0x12c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d802      	bhi.n	800438e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004388:	2309      	movs	r3, #9
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e01a      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <USB_SetTurnaroundTime+0x12c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d906      	bls.n	80043a4 <USB_SetTurnaroundTime+0xc4>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <USB_SetTurnaroundTime+0x130>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d802      	bhi.n	80043a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800439e:	2308      	movs	r3, #8
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e00f      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <USB_SetTurnaroundTime+0x130>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d906      	bls.n	80043ba <USB_SetTurnaroundTime+0xda>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a19      	ldr	r2, [pc, #100]	; (8004414 <USB_SetTurnaroundTime+0x134>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d802      	bhi.n	80043ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043b4:	2307      	movs	r3, #7
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e004      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043ba:	2306      	movs	r3, #6
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e001      	b.n	80043c4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043c0:	2309      	movs	r3, #9
 80043c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	029b      	lsls	r3, r3, #10
 80043d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	00d8acbf 	.word	0x00d8acbf
 80043f4:	00e4e1bf 	.word	0x00e4e1bf
 80043f8:	00f423ff 	.word	0x00f423ff
 80043fc:	0106737f 	.word	0x0106737f
 8004400:	011a499f 	.word	0x011a499f
 8004404:	01312cff 	.word	0x01312cff
 8004408:	014ca43f 	.word	0x014ca43f
 800440c:	016e35ff 	.word	0x016e35ff
 8004410:	01a6ab1f 	.word	0x01a6ab1f
 8004414:	01e847ff 	.word	0x01e847ff

08004418 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f043 0201 	orr.w	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d106      	bne.n	8004488 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	e00b      	b.n	80044a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	e001      	b.n	80044a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e003      	b.n	80044a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044a0:	2032      	movs	r0, #50	; 0x32
 80044a2:	f7fc fcbb 	bl	8000e1c <HAL_Delay>

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	e009      	b.n	80044e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3340      	adds	r3, #64	; 0x40
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b0e      	cmp	r3, #14
 80044e8:	d9f2      	bls.n	80044d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11c      	bne.n	800452a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f043 0302 	orr.w	r3, r3, #2
 8004502:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e005      	b.n	8004536 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	4619      	mov	r1, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	461a      	mov	r2, r3
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004556:	2103      	movs	r1, #3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f93d 	bl	80047d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800455e:	2110      	movs	r1, #16
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8f1 	bl	8004748 <USB_FlushTxFifo>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f90f 	bl	8004794 <USB_FlushRxFifo>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	461a      	mov	r2, r3
 8004594:	2300      	movs	r3, #0
 8004596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	461a      	mov	r2, r3
 80045a0:	2300      	movs	r3, #0
 80045a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e043      	b.n	8004632 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c0:	d118      	bne.n	80045f4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e013      	b.n	8004606 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e008      	b.n	8004606 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	2300      	movs	r3, #0
 8004604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	461a      	mov	r2, r3
 8004626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800462a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3301      	adds	r3, #1
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3b7      	bcc.n	80045aa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	e043      	b.n	80046c8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004656:	d118      	bne.n	800468a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e013      	b.n	800469c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	461a      	mov	r2, r3
 8004682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	e008      	b.n	800469c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	2300      	movs	r3, #0
 80046ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3b7      	bcc.n	8004640 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <USB_DevInit+0x294>)
 8004704:	4313      	orrs	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f043 0208 	orr.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800471c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800473e:	b004      	add	sp, #16
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	803c3800 	.word	0x803c3800

08004748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <USB_FlushTxFifo+0x48>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e006      	b.n	8004782 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d0f0      	beq.n	8004762 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2210      	movs	r2, #16
 80047a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <USB_FlushRxFifo+0x40>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e006      	b.n	80047c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d0f0      	beq.n	80047a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	00030d40 	.word	0x00030d40

080047d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d002      	beq.n	8004830 <USB_GetDevSpeed+0x26>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b06      	cmp	r3, #6
 800482e:	d102      	bne.n	8004836 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004830:	2302      	movs	r3, #2
 8004832:	75fb      	strb	r3, [r7, #23]
 8004834:	e001      	b.n	800483a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004836:	230f      	movs	r3, #15
 8004838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800483a:	7dfb      	ldrb	r3, [r7, #23]
}
 800483c:	4618      	mov	r0, r3
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d13a      	bne.n	80048da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	b29b      	uxth	r3, r3
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004882:	4313      	orrs	r3, r2
 8004884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d155      	bne.n	8004948 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	78db      	ldrb	r3, [r3, #3]
 80048b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	059b      	lsls	r3, r3, #22
 80048be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048c0:	4313      	orrs	r3, r2
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e036      	b.n	8004948 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d11a      	bne.n	8004948 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	78db      	ldrb	r3, [r3, #3]
 800492c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800492e:	430b      	orrs	r3, r1
 8004930:	4313      	orrs	r3, r2
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004946:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d161      	bne.n	8004a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498a:	d11f      	bne.n	80049cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ec:	4013      	ands	r3, r2
 80049ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a10:	4013      	ands	r3, r2
 8004a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	0159      	lsls	r1, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	440b      	add	r3, r1
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <USB_DeactivateEndpoint+0x1b0>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
 8004a36:	e060      	b.n	8004afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a4e:	d11f      	bne.n	8004a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	43db      	mvns	r3, r3
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0159      	lsls	r1, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	440b      	add	r3, r1
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	4619      	mov	r1, r3
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <USB_DeactivateEndpoint+0x1b4>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	ec337800 	.word	0xec337800
 8004b0c:	eff37800 	.word	0xeff37800

08004b10 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 810a 	bne.w	8004d42 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d132      	bne.n	8004b9c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b94:	0cdb      	lsrs	r3, r3, #19
 8004b96:	04db      	lsls	r3, r3, #19
 8004b98:	6113      	str	r3, [r2, #16]
 8004b9a:	e074      	b.n	8004c86 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	0cdb      	lsrs	r3, r3, #19
 8004bb8:	04db      	lsls	r3, r3, #19
 8004bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6959      	ldr	r1, [r3, #20]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	440b      	add	r3, r1
 8004bf8:	1e59      	subs	r1, r3, #1
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c02:	04d9      	lsls	r1, r3, #19
 8004c04:	4baf      	ldr	r3, [pc, #700]	; (8004ec4 <USB_EPStartXfer+0x3b4>)
 8004c06:	400b      	ands	r3, r1
 8004c08:	6939      	ldr	r1, [r7, #16]
 8004c0a:	0148      	lsls	r0, r1, #5
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	4401      	add	r1, r0
 8004c10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c14:	4313      	orrs	r3, r2
 8004c16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2e:	6939      	ldr	r1, [r7, #16]
 8004c30:	0148      	lsls	r0, r1, #5
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	4401      	add	r1, r0
 8004c36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	78db      	ldrb	r3, [r3, #3]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d11f      	bne.n	8004c86 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c84:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ca4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	78db      	ldrb	r3, [r3, #3]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d015      	beq.n	8004cda <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8100 	beq.w	8004eb8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	6979      	ldr	r1, [r7, #20]
 8004cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	634b      	str	r3, [r1, #52]	; 0x34
 8004cd8:	e0ee      	b.n	8004eb8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d110      	bne.n	8004d0c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e00f      	b.n	8004d2c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68d9      	ldr	r1, [r3, #12]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9e2 	bl	8005104 <USB_WritePacket>
 8004d40:	e0ba      	b.n	8004eb8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5c:	0cdb      	lsrs	r3, r3, #19
 8004d5e:	04db      	lsls	r3, r3, #19
 8004d60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d123      	bne.n	8004dd6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da4:	6939      	ldr	r1, [r7, #16]
 8004da6:	0148      	lsls	r0, r1, #5
 8004da8:	6979      	ldr	r1, [r7, #20]
 8004daa:	4401      	add	r1, r0
 8004dac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004db0:	4313      	orrs	r3, r2
 8004db2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd2:	6113      	str	r3, [r2, #16]
 8004dd4:	e033      	b.n	8004e3e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4413      	add	r3, r2
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	89fb      	ldrh	r3, [r7, #14]
 8004dfc:	04d9      	lsls	r1, r3, #19
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <USB_EPStartXfer+0x3b4>)
 8004e00:	400b      	ands	r3, r1
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	0148      	lsls	r0, r1, #5
 8004e06:	6979      	ldr	r1, [r7, #20]
 8004e08:	4401      	add	r1, r0
 8004e0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	89f9      	ldrh	r1, [r7, #14]
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	0148      	lsls	r0, r1, #5
 8004e32:	6979      	ldr	r1, [r7, #20]
 8004e34:	4401      	add	r1, r0
 8004e36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	78db      	ldrb	r3, [r3, #3]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d128      	bne.n	8004e98 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d110      	bne.n	8004e78 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00f      	b.n	8004e98 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	1ff80000 	.word	0x1ff80000

08004ec8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 80ab 	bne.w	800503c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d132      	bne.n	8004f54 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	0cdb      	lsrs	r3, r3, #19
 8004f4e:	04db      	lsls	r3, r3, #19
 8004f50:	6113      	str	r3, [r2, #16]
 8004f52:	e04e      	b.n	8004ff2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	0cdb      	lsrs	r3, r3, #19
 8004f70:	04db      	lsls	r3, r3, #19
 8004f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	0148      	lsls	r0, r1, #5
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	4401      	add	r1, r0
 8004fea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005010:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d06d      	beq.n	80050f6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	2101      	movs	r1, #1
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005036:	4313      	orrs	r3, r2
 8005038:	634b      	str	r3, [r1, #52]	; 0x34
 800503a:	e05c      	b.n	80050f6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005056:	0cdb      	lsrs	r3, r3, #19
 8005058:	04db      	lsls	r3, r3, #19
 800505a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005076:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800507e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	0148      	lsls	r0, r1, #5
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	4401      	add	r1, r0
 80050ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d2:	4313      	orrs	r3, r2
 80050d4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8005104:	b480      	push	{r7}
 8005106:	b089      	sub	sp, #36	; 0x24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	460b      	mov	r3, r1
 8005114:	71fb      	strb	r3, [r7, #7]
 8005116:	4613      	mov	r3, r2
 8005118:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005122:	88bb      	ldrh	r3, [r7, #4]
 8005124:	3303      	adds	r3, #3
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e00f      	b.n	8005150 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	031a      	lsls	r2, r3, #12
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	4413      	add	r3, r2
 8005138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513c:	461a      	mov	r2, r3
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3304      	adds	r3, #4
 8005148:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	3301      	adds	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d3eb      	bcc.n	8005130 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	; 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005166:	b480      	push	{r7}
 8005168:	b089      	sub	sp, #36	; 0x24
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	4613      	mov	r3, r2
 8005172:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	3303      	adds	r3, #3
 8005180:	089b      	lsrs	r3, r3, #2
 8005182:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e00b      	b.n	80051a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	601a      	str	r2, [r3, #0]
    pDest++;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3304      	adds	r3, #4
 800519a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	3301      	adds	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d3ef      	bcc.n	800518a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80051aa:	69fb      	ldr	r3, [r7, #28]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3724      	adds	r7, #36	; 0x24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d12c      	bne.n	800522e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	db12      	blt.n	800520c <USB_EPSetStall+0x54>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00f      	beq.n	800520c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800520a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e02b      	b.n	8005286 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	db12      	blt.n	8005266 <USB_EPSetStall+0xae>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00f      	beq.n	8005266 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005264:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005284:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d128      	bne.n	8005302 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d003      	beq.n	80052e0 <USB_EPClearStall+0x4c>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	78db      	ldrb	r3, [r3, #3]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d138      	bne.n	8005352 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	e027      	b.n	8005352 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005320:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	78db      	ldrb	r3, [r3, #3]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d003      	beq.n	8005332 <USB_EPClearStall+0x9e>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	78db      	ldrb	r3, [r3, #3]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d10f      	bne.n	8005352 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005350:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005382:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053da:	f023 0302 	bic.w	r3, r3, #2
 80053de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	4013      	ands	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	0c1b      	lsrs	r3, r3, #16
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	b29b      	uxth	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4013      	ands	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054ec:	68bb      	ldr	r3, [r7, #8]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	01db      	lsls	r3, r3, #7
 800552c:	b2db      	uxtb	r3, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005548:	68bb      	ldr	r3, [r7, #8]
}
 800554a:	4618      	mov	r0, r3
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0301 	and.w	r3, r3, #1
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005590:	f023 0307 	bic.w	r3, r3, #7
 8005594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	333c      	adds	r3, #60	; 0x3c
 80055ca:	3304      	adds	r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <USB_EP0_OutStart+0x8c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d90a      	bls.n	80055ee <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d101      	bne.n	80055ee <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e024      	b.n	8005638 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	2300      	movs	r3, #0
 80055f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800560c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f043 0318 	orr.w	r3, r3, #24
 8005620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005634:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	4f54300a 	.word	0x4f54300a

08005648 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4a13      	ldr	r2, [pc, #76]	; (80056ac <USB_CoreReset+0x64>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e01b      	b.n	800569e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	daf2      	bge.n	8005654 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f043 0201 	orr.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a09      	ldr	r2, [pc, #36]	; (80056ac <USB_CoreReset+0x64>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e006      	b.n	800569e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d0f0      	beq.n	800567e <USB_CoreReset+0x36>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	00030d40 	.word	0x00030d40

080056b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056c0:	f002 fa72 	bl	8007ba8 <malloc>
 80056c4:	4603      	mov	r3, r0
 80056c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d105      	bne.n	80056da <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80056d6:	2302      	movs	r3, #2
 80056d8:	e066      	b.n	80057a8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7c1b      	ldrb	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d119      	bne.n	800571e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ee:	2202      	movs	r2, #2
 80056f0:	2181      	movs	r1, #129	; 0x81
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f002 f814 	bl	8007720 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005702:	2202      	movs	r2, #2
 8005704:	2101      	movs	r1, #1
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f002 f80a 	bl	8007720 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2210      	movs	r2, #16
 8005718:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800571c:	e016      	b.n	800574c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	2202      	movs	r2, #2
 8005722:	2181      	movs	r1, #129	; 0x81
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fffb 	bl	8007720 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	2202      	movs	r2, #2
 8005734:	2101      	movs	r1, #1
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fff2 	bl	8007720 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2210      	movs	r2, #16
 8005748:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800574c:	2308      	movs	r3, #8
 800574e:	2203      	movs	r2, #3
 8005750:	2182      	movs	r1, #130	; 0x82
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 ffe4 	bl	8007720 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7c1b      	ldrb	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800578c:	2101      	movs	r1, #1
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f002 f940 	bl	8007a14 <USBD_LL_PrepareReceive>
 8005794:	e007      	b.n	80057a6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800579c:	2340      	movs	r3, #64	; 0x40
 800579e:	2101      	movs	r1, #1
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f002 f937 	bl	8007a14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057bc:	2181      	movs	r1, #129	; 0x81
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 ffec 	bl	800779c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057ca:	2101      	movs	r1, #1
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 ffe5 	bl	800779c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057da:	2182      	movs	r1, #130	; 0x82
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 ffdd 	bl	800779c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800580c:	4618      	mov	r0, r3
 800580e:	f002 f9d3 	bl	8007bb8 <free>
    pdev->pClassData = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005834:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800584a:	2b00      	cmp	r3, #0
 800584c:	d03a      	beq.n	80058c4 <USBD_CDC_Setup+0xa0>
 800584e:	2b20      	cmp	r3, #32
 8005850:	f040 8097 	bne.w	8005982 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	88db      	ldrh	r3, [r3, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d029      	beq.n	80058b0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	b25b      	sxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	da11      	bge.n	800588a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005872:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	88d2      	ldrh	r2, [r2, #6]
 8005878:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	88db      	ldrh	r3, [r3, #6]
 8005880:	461a      	mov	r2, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 facf 	bl	8006e26 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005888:	e082      	b.n	8005990 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785a      	ldrb	r2, [r3, #1]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	88db      	ldrh	r3, [r3, #6]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80058a0:	6939      	ldr	r1, [r7, #16]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	88db      	ldrh	r3, [r3, #6]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fae8 	bl	8006e7e <USBD_CtlPrepareRx>
      break;
 80058ae:	e06f      	b.n	8005990 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	7850      	ldrb	r0, [r2, #1]
 80058bc:	2200      	movs	r2, #0
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	4798      	blx	r3
      break;
 80058c2:	e065      	b.n	8005990 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b0b      	cmp	r3, #11
 80058ca:	d84f      	bhi.n	800596c <USBD_CDC_Setup+0x148>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <USBD_CDC_Setup+0xb0>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	08005905 	.word	0x08005905
 80058d8:	0800597b 	.word	0x0800597b
 80058dc:	0800596d 	.word	0x0800596d
 80058e0:	0800596d 	.word	0x0800596d
 80058e4:	0800596d 	.word	0x0800596d
 80058e8:	0800596d 	.word	0x0800596d
 80058ec:	0800596d 	.word	0x0800596d
 80058f0:	0800596d 	.word	0x0800596d
 80058f4:	0800596d 	.word	0x0800596d
 80058f8:	0800596d 	.word	0x0800596d
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	08005955 	.word	0x08005955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590a:	2b03      	cmp	r3, #3
 800590c:	d107      	bne.n	800591e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	2202      	movs	r2, #2
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fa85 	bl	8006e26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800591c:	e030      	b.n	8005980 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fa0f 	bl	8006d44 <USBD_CtlError>
            ret = USBD_FAIL;
 8005926:	2303      	movs	r3, #3
 8005928:	75fb      	strb	r3, [r7, #23]
          break;
 800592a:	e029      	b.n	8005980 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005932:	2b03      	cmp	r3, #3
 8005934:	d107      	bne.n	8005946 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005936:	f107 030f 	add.w	r3, r7, #15
 800593a:	2201      	movs	r2, #1
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fa71 	bl	8006e26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005944:	e01c      	b.n	8005980 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 f9fb 	bl	8006d44 <USBD_CtlError>
            ret = USBD_FAIL;
 800594e:	2303      	movs	r3, #3
 8005950:	75fb      	strb	r3, [r7, #23]
          break;
 8005952:	e015      	b.n	8005980 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595a:	2b03      	cmp	r3, #3
 800595c:	d00f      	beq.n	800597e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 f9ef 	bl	8006d44 <USBD_CtlError>
            ret = USBD_FAIL;
 8005966:	2303      	movs	r3, #3
 8005968:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800596a:	e008      	b.n	800597e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 f9e8 	bl	8006d44 <USBD_CtlError>
          ret = USBD_FAIL;
 8005974:	2303      	movs	r3, #3
 8005976:	75fb      	strb	r3, [r7, #23]
          break;
 8005978:	e002      	b.n	8005980 <USBD_CDC_Setup+0x15c>
          break;
 800597a:	bf00      	nop
 800597c:	e008      	b.n	8005990 <USBD_CDC_Setup+0x16c>
          break;
 800597e:	bf00      	nop
      }
      break;
 8005980:	e006      	b.n	8005990 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 f9dd 	bl	8006d44 <USBD_CtlError>
      ret = USBD_FAIL;
 800598a:	2303      	movs	r3, #3
 800598c:	75fb      	strb	r3, [r7, #23]
      break;
 800598e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80059ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e04f      	b.n	8005a5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3318      	adds	r3, #24
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d029      	beq.n	8005a30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	3318      	adds	r3, #24
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	78f9      	ldrb	r1, [r7, #3]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	460b      	mov	r3, r1
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	1a5b      	subs	r3, r3, r1
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4403      	add	r3, r0
 80059fc:	3344      	adds	r3, #68	; 0x44
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a04:	fb03 f301 	mul.w	r3, r3, r1
 8005a08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d110      	bne.n	8005a30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a22:	78f9      	ldrb	r1, [r7, #3]
 8005a24:	2300      	movs	r3, #0
 8005a26:	2200      	movs	r2, #0
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 ffbb 	bl	80079a4 <USBD_LL_Transmit>
 8005a2e:	e015      	b.n	8005a5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e015      	b.n	8005ab4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fff9 	bl	8007a84 <USBD_LL_GetRxDataSize>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d015      	beq.n	8005b02 <USBD_CDC_EP0_RxReady+0x46>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005adc:	2bff      	cmp	r3, #255	; 0xff
 8005ade:	d010      	beq.n	8005b02 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005aee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af6:	b292      	uxth	r2, r2
 8005af8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2243      	movs	r2, #67	; 0x43
 8005b18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005b1a:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000094 	.word	0x20000094

08005b2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2243      	movs	r2, #67	; 0x43
 8005b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005b3a:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000050 	.word	0x20000050

08005b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2243      	movs	r2, #67	; 0x43
 8005b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005b5a:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	200000d8 	.word	0x200000d8

08005b6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	220a      	movs	r2, #10
 8005b78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b7a:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	2000000c 	.word	0x2000000c

08005b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e004      	b.n	8005baa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c1e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e01a      	b.n	8005c68 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d114      	bne.n	8005c66 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c5a:	2181      	movs	r1, #129	; 0x81
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fea1 	bl	80079a4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e016      	b.n	8005cbc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7c1b      	ldrb	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 feb6 	bl	8007a14 <USBD_LL_PrepareReceive>
 8005ca8:	e007      	b.n	8005cba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cb0:	2340      	movs	r3, #64	; 0x40
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fead 	bl	8007a14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e01f      	b.n	8005d1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	79fa      	ldrb	r2, [r7, #7]
 8005d0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fc87 	bl	8007624 <USBD_LL_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e016      	b.n	8005d6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	f107 020e 	add.w	r2, r7, #14
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4798      	blx	r3
 8005d60:	4602      	mov	r2, r0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fc9e 	bl	80076bc <USBD_LL_Start>
 8005d80:	4603      	mov	r3, r0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
  }

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff58 	bl	8006cd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d00e      	beq.n	8005e62 <USBD_LL_SetupStage+0x5a>
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d302      	bcc.n	8005e4e <USBD_LL_SetupStage+0x46>
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d014      	beq.n	8005e76 <USBD_LL_SetupStage+0x6e>
 8005e4c:	e01d      	b.n	8005e8a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa18 	bl	800628c <USBD_StdDevReq>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e020      	b.n	8005ea4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fa7c 	bl	8006368 <USBD_StdItfReq>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]
      break;
 8005e74:	e016      	b.n	8005ea4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fab8 	bl	80063f4 <USBD_StdEPReq>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e00c      	b.n	8005ea4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fcb5 	bl	8007808 <USBD_LL_StallEP>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea2:	bf00      	nop
  }

  return ret;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d137      	bne.n	8005f32 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ec8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d14a      	bne.n	8005f6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d913      	bls.n	8005f08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	bf28      	it	cs
 8005efa:	4613      	movcs	r3, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 ffd9 	bl	8006eb8 <USBD_CtlContinueRx>
 8005f06:	e030      	b.n	8005f6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d105      	bne.n	8005f2a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 ffd5 	bl	8006eda <USBD_CtlSendStatus>
 8005f30:	e01b      	b.n	8005f6a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d013      	beq.n	8005f66 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d10e      	bne.n	8005f66 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	7afa      	ldrb	r2, [r7, #11]
 8005f52:	4611      	mov	r1, r2
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	4798      	blx	r3
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	e002      	b.n	8005f6c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e000      	b.n	8005f6c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d16a      	bne.n	800605e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d155      	bne.n	8006044 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d914      	bls.n	8005fce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	1ad2      	subs	r2, r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 ff4e 	bl	8006e5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f001 fd24 	bl	8007a14 <USBD_LL_PrepareReceive>
 8005fcc:	e03a      	b.n	8006044 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d11c      	bne.n	8006014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d316      	bcc.n	8006014 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d20f      	bcs.n	8006014 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 ff2f 	bl	8006e5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006006:	2300      	movs	r3, #0
 8006008:	2200      	movs	r2, #0
 800600a:	2100      	movs	r1, #0
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f001 fd01 	bl	8007a14 <USBD_LL_PrepareReceive>
 8006012:	e017      	b.n	8006044 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006026:	2b03      	cmp	r3, #3
 8006028:	d105      	bne.n	8006036 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006036:	2180      	movs	r1, #128	; 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f001 fbe5 	bl	8007808 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 ff5e 	bl	8006f00 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800604a:	2b01      	cmp	r3, #1
 800604c:	d123      	bne.n	8006096 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fe9b 	bl	8005d8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800605c:	e01b      	b.n	8006096 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d013      	beq.n	8006092 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006070:	2b03      	cmp	r3, #3
 8006072:	d10e      	bne.n	8006092 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	7afa      	ldrb	r2, [r7, #11]
 800607e:	4611      	mov	r1, r2
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	e002      	b.n	8006098 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006092:	2303      	movs	r3, #3
 8006094:	e000      	b.n	8006098 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6852      	ldr	r2, [r2, #4]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	4611      	mov	r1, r2
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060e4:	2340      	movs	r3, #64	; 0x40
 80060e6:	2200      	movs	r2, #0
 80060e8:	2100      	movs	r1, #0
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fb18 	bl	8007720 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006100:	2340      	movs	r3, #64	; 0x40
 8006102:	2200      	movs	r2, #0
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fb0a 	bl	8007720 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2240      	movs	r2, #64	; 0x40
 8006116:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2204      	movs	r2, #4
 800615a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617a:	2b04      	cmp	r3, #4
 800617c:	d105      	bne.n	800618a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d10b      	bne.n	80061c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6852      	ldr	r2, [r2, #4]
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	4611      	mov	r1, r2
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
  }

  return USBD_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800624e:	b480      	push	{r7}
 8006250:	b087      	sub	sp, #28
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	3301      	adds	r3, #1
 8006264:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800626c:	8a3b      	ldrh	r3, [r7, #16]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	b21a      	sxth	r2, r3
 8006272:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006276:	4313      	orrs	r3, r2
 8006278:	b21b      	sxth	r3, r3
 800627a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800627c:	89fb      	ldrh	r3, [r7, #14]
}
 800627e:	4618      	mov	r0, r3
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d004      	beq.n	80062b0 <USBD_StdDevReq+0x24>
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d002      	beq.n	80062b0 <USBD_StdDevReq+0x24>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <USBD_StdDevReq+0x38>
 80062ae:	e050      	b.n	8006352 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
    break;
 80062c2:	e04b      	b.n	800635c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d83c      	bhi.n	8006346 <USBD_StdDevReq+0xba>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <USBD_StdDevReq+0x48>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	08006329 	.word	0x08006329
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	08006347 	.word	0x08006347
 80062e0:	08006333 	.word	0x08006333
 80062e4:	08006347 	.word	0x08006347
 80062e8:	08006307 	.word	0x08006307
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006347 	.word	0x08006347
 80062f4:	0800631f 	.word	0x0800631f
 80062f8:	08006311 	.word	0x08006311
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9d0 	bl	80066a4 <USBD_GetDescriptor>
      break;
 8006304:	e024      	b.n	8006350 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fb5f 	bl	80069cc <USBD_SetAddress>
      break;
 800630e:	e01f      	b.n	8006350 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fb9c 	bl	8006a50 <USBD_SetConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	e018      	b.n	8006350 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fc39 	bl	8006b98 <USBD_GetConfig>
      break;
 8006326:	e013      	b.n	8006350 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fc68 	bl	8006c00 <USBD_GetStatus>
      break;
 8006330:	e00e      	b.n	8006350 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fc96 	bl	8006c66 <USBD_SetFeature>
      break;
 800633a:	e009      	b.n	8006350 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fca5 	bl	8006c8e <USBD_ClrFeature>
      break;
 8006344:	e004      	b.n	8006350 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fcfb 	bl	8006d44 <USBD_CtlError>
      break;
 800634e:	bf00      	nop
    }
    break;
 8006350:	e004      	b.n	800635c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fcf5 	bl	8006d44 <USBD_CtlError>
    break;
 800635a:	bf00      	nop
  }

  return ret;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800637e:	2b20      	cmp	r3, #32
 8006380:	d003      	beq.n	800638a <USBD_StdItfReq+0x22>
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d001      	beq.n	800638a <USBD_StdItfReq+0x22>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d12a      	bne.n	80063e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006390:	3b01      	subs	r3, #1
 8006392:	2b02      	cmp	r3, #2
 8006394:	d81d      	bhi.n	80063d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	889b      	ldrh	r3, [r3, #4]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b01      	cmp	r3, #1
 800639e:	d813      	bhi.n	80063c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	88db      	ldrh	r3, [r3, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d110      	bne.n	80063dc <USBD_StdItfReq+0x74>
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10d      	bne.n	80063dc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd8a 	bl	8006eda <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80063c6:	e009      	b.n	80063dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fcba 	bl	8006d44 <USBD_CtlError>
      break;
 80063d0:	e004      	b.n	80063dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fcb5 	bl	8006d44 <USBD_CtlError>
      break;
 80063da:	e000      	b.n	80063de <USBD_StdItfReq+0x76>
      break;
 80063dc:	bf00      	nop
    }
    break;
 80063de:	e004      	b.n	80063ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fcae 	bl	8006d44 <USBD_CtlError>
    break;
 80063e8:	bf00      	nop
  }

  return ret;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	889b      	ldrh	r3, [r3, #4]
 8006406:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006410:	2b20      	cmp	r3, #32
 8006412:	d004      	beq.n	800641e <USBD_StdEPReq+0x2a>
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d002      	beq.n	800641e <USBD_StdEPReq+0x2a>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <USBD_StdEPReq+0x3e>
 800641c:	e137      	b.n	800668e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
    break;
 8006430:	e132      	b.n	8006698 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d03e      	beq.n	80064b8 <USBD_StdEPReq+0xc4>
 800643a:	2b03      	cmp	r3, #3
 800643c:	d002      	beq.n	8006444 <USBD_StdEPReq+0x50>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d079      	beq.n	8006536 <USBD_StdEPReq+0x142>
 8006442:	e11e      	b.n	8006682 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644a:	2b02      	cmp	r3, #2
 800644c:	d002      	beq.n	8006454 <USBD_StdEPReq+0x60>
 800644e:	2b03      	cmp	r3, #3
 8006450:	d015      	beq.n	800647e <USBD_StdEPReq+0x8a>
 8006452:	e02b      	b.n	80064ac <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <USBD_StdEPReq+0x80>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d009      	beq.n	8006474 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f9cf 	bl	8007808 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f9cb 	bl	8007808 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006472:	e020      	b.n	80064b6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fc64 	bl	8006d44 <USBD_CtlError>
        break;
 800647c:	e01b      	b.n	80064b6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10e      	bne.n	80064a4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <USBD_StdEPReq+0xb0>
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d008      	beq.n	80064a4 <USBD_StdEPReq+0xb0>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	88db      	ldrh	r3, [r3, #6]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d104      	bne.n	80064a4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 f9b2 	bl	8007808 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fd18 	bl	8006eda <USBD_CtlSendStatus>

        break;
 80064aa:	e004      	b.n	80064b6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fc48 	bl	8006d44 <USBD_CtlError>
        break;
 80064b4:	bf00      	nop
      }
      break;
 80064b6:	e0e9      	b.n	800668c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d002      	beq.n	80064c8 <USBD_StdEPReq+0xd4>
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d015      	beq.n	80064f2 <USBD_StdEPReq+0xfe>
 80064c6:	e02f      	b.n	8006528 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <USBD_StdEPReq+0xf4>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d009      	beq.n	80064e8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 f995 	bl	8007808 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064de:	2180      	movs	r1, #128	; 0x80
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f991 	bl	8007808 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80064e6:	e025      	b.n	8006534 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc2a 	bl	8006d44 <USBD_CtlError>
        break;
 80064f0:	e020      	b.n	8006534 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	885b      	ldrh	r3, [r3, #2]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d11b      	bne.n	8006532 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 f9b3 	bl	8007874 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fce3 	bl	8006eda <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006526:	e004      	b.n	8006532 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fc0a 	bl	8006d44 <USBD_CtlError>
        break;
 8006530:	e000      	b.n	8006534 <USBD_StdEPReq+0x140>
        break;
 8006532:	bf00      	nop
      }
      break;
 8006534:	e0aa      	b.n	800668c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653c:	2b02      	cmp	r3, #2
 800653e:	d002      	beq.n	8006546 <USBD_StdEPReq+0x152>
 8006540:	2b03      	cmp	r3, #3
 8006542:	d032      	beq.n	80065aa <USBD_StdEPReq+0x1b6>
 8006544:	e097      	b.n	8006676 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <USBD_StdEPReq+0x168>
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d004      	beq.n	800655c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fbf5 	bl	8006d44 <USBD_CtlError>
          break;
 800655a:	e091      	b.n	8006680 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006560:	2b00      	cmp	r3, #0
 8006562:	da0b      	bge.n	800657c <USBD_StdEPReq+0x188>
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	3310      	adds	r3, #16
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	4413      	add	r3, r2
 8006578:	3304      	adds	r3, #4
 800657a:	e00b      	b.n	8006594 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	3304      	adds	r3, #4
 8006594:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2202      	movs	r2, #2
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fc3f 	bl	8006e26 <USBD_CtlSendData>
        break;
 80065a8:	e06a      	b.n	8006680 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80065aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	da11      	bge.n	80065d6 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	3324      	adds	r3, #36	; 0x24
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d117      	bne.n	80065fc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fbb8 	bl	8006d44 <USBD_CtlError>
            break;
 80065d4:	e054      	b.n	8006680 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fba5 	bl	8006d44 <USBD_CtlError>
            break;
 80065fa:	e041      	b.n	8006680 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da0b      	bge.n	800661c <USBD_StdEPReq+0x228>
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	3310      	adds	r3, #16
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	3304      	adds	r3, #4
 800661a:	e00b      	b.n	8006634 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	3304      	adds	r3, #4
 8006634:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <USBD_StdEPReq+0x24e>
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d103      	bne.n	800664a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e00e      	b.n	8006668 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 f946 	bl	80078e0 <USBD_LL_IsStallEP>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	e002      	b.n	8006668 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2202      	movs	r2, #2
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fbd9 	bl	8006e26 <USBD_CtlSendData>
          break;
 8006674:	e004      	b.n	8006680 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fb63 	bl	8006d44 <USBD_CtlError>
        break;
 800667e:	bf00      	nop
      }
      break;
 8006680:	e004      	b.n	800668c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fb5d 	bl	8006d44 <USBD_CtlError>
      break;
 800668a:	bf00      	nop
    }
    break;
 800668c:	e004      	b.n	8006698 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb57 	bl	8006d44 <USBD_CtlError>
    break;
 8006696:	bf00      	nop
  }

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	2b0e      	cmp	r3, #14
 80066c6:	f200 8152 	bhi.w	800696e <USBD_GetDescriptor+0x2ca>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <USBD_GetDescriptor+0x2c>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006741 	.word	0x08006741
 80066d4:	08006759 	.word	0x08006759
 80066d8:	08006799 	.word	0x08006799
 80066dc:	0800696f 	.word	0x0800696f
 80066e0:	0800696f 	.word	0x0800696f
 80066e4:	0800690f 	.word	0x0800690f
 80066e8:	0800693b 	.word	0x0800693b
 80066ec:	0800696f 	.word	0x0800696f
 80066f0:	0800696f 	.word	0x0800696f
 80066f4:	0800696f 	.word	0x0800696f
 80066f8:	0800696f 	.word	0x0800696f
 80066fc:	0800696f 	.word	0x0800696f
 8006700:	0800696f 	.word	0x0800696f
 8006704:	0800696f 	.word	0x0800696f
 8006708:	0800670d 	.word	0x0800670d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800672e:	e126      	b.n	800697e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fb06 	bl	8006d44 <USBD_CtlError>
      err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
    break;
 800673e:	e11e      	b.n	800697e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	7c12      	ldrb	r2, [r2, #16]
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
 8006754:	60f8      	str	r0, [r7, #12]
    break;
 8006756:	e112      	b.n	800697e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	7c1b      	ldrb	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10d      	bne.n	800677c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f107 0208 	add.w	r2, r7, #8
 800676c:	4610      	mov	r0, r2
 800676e:	4798      	blx	r3
 8006770:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	2202      	movs	r2, #2
 8006778:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800677a:	e100      	b.n	800697e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	f107 0208 	add.w	r2, r7, #8
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	2202      	movs	r2, #2
 8006794:	701a      	strb	r2, [r3, #0]
    break;
 8006796:	e0f2      	b.n	800697e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	885b      	ldrh	r3, [r3, #2]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b05      	cmp	r3, #5
 80067a0:	f200 80ac 	bhi.w	80068fc <USBD_GetDescriptor+0x258>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USBD_GetDescriptor+0x108>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067f9 	.word	0x080067f9
 80067b4:	0800682d 	.word	0x0800682d
 80067b8:	08006861 	.word	0x08006861
 80067bc:	08006895 	.word	0x08006895
 80067c0:	080068c9 	.word	0x080068c9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	7c12      	ldrb	r2, [r2, #16]
 80067dc:	f107 0108 	add.w	r1, r7, #8
 80067e0:	4610      	mov	r0, r2
 80067e2:	4798      	blx	r3
 80067e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e6:	e091      	b.n	800690c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 faaa 	bl	8006d44 <USBD_CtlError>
        err++;
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	3301      	adds	r3, #1
 80067f4:	72fb      	strb	r3, [r7, #11]
      break;
 80067f6:	e089      	b.n	800690c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	7c12      	ldrb	r2, [r2, #16]
 8006810:	f107 0108 	add.w	r1, r7, #8
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800681a:	e077      	b.n	800690c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa90 	bl	8006d44 <USBD_CtlError>
        err++;
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	3301      	adds	r3, #1
 8006828:	72fb      	strb	r3, [r7, #11]
      break;
 800682a:	e06f      	b.n	800690c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	7c12      	ldrb	r2, [r2, #16]
 8006844:	f107 0108 	add.w	r1, r7, #8
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
 800684c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800684e:	e05d      	b.n	800690c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa76 	bl	8006d44 <USBD_CtlError>
        err++;
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	3301      	adds	r3, #1
 800685c:	72fb      	strb	r3, [r7, #11]
      break;
 800685e:	e055      	b.n	800690c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	7c12      	ldrb	r2, [r2, #16]
 8006878:	f107 0108 	add.w	r1, r7, #8
 800687c:	4610      	mov	r0, r2
 800687e:	4798      	blx	r3
 8006880:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006882:	e043      	b.n	800690c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa5c 	bl	8006d44 <USBD_CtlError>
        err++;
 800688c:	7afb      	ldrb	r3, [r7, #11]
 800688e:	3301      	adds	r3, #1
 8006890:	72fb      	strb	r3, [r7, #11]
      break;
 8006892:	e03b      	b.n	800690c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	7c12      	ldrb	r2, [r2, #16]
 80068ac:	f107 0108 	add.w	r1, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068b6:	e029      	b.n	800690c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa42 	bl	8006d44 <USBD_CtlError>
        err++;
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	3301      	adds	r3, #1
 80068c4:	72fb      	strb	r3, [r7, #11]
      break;
 80068c6:	e021      	b.n	800690c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	7c12      	ldrb	r2, [r2, #16]
 80068e0:	f107 0108 	add.w	r1, r7, #8
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ea:	e00f      	b.n	800690c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa28 	bl	8006d44 <USBD_CtlError>
        err++;
 80068f4:	7afb      	ldrb	r3, [r7, #11]
 80068f6:	3301      	adds	r3, #1
 80068f8:	72fb      	strb	r3, [r7, #11]
      break;
 80068fa:	e007      	b.n	800690c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa20 	bl	8006d44 <USBD_CtlError>
      err++;
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	3301      	adds	r3, #1
 8006908:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800690a:	bf00      	nop
    }
    break;
 800690c:	e037      	b.n	800697e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7c1b      	ldrb	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	f107 0208 	add.w	r2, r7, #8
 8006922:	4610      	mov	r0, r2
 8006924:	4798      	blx	r3
 8006926:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006928:	e029      	b.n	800697e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa09 	bl	8006d44 <USBD_CtlError>
      err++;
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	3301      	adds	r3, #1
 8006936:	72fb      	strb	r3, [r7, #11]
    break;
 8006938:	e021      	b.n	800697e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7c1b      	ldrb	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10d      	bne.n	800695e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f107 0208 	add.w	r2, r7, #8
 800694e:	4610      	mov	r0, r2
 8006950:	4798      	blx	r3
 8006952:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	2207      	movs	r2, #7
 800695a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800695c:	e00f      	b.n	800697e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f9ef 	bl	8006d44 <USBD_CtlError>
      err++;
 8006966:	7afb      	ldrb	r3, [r7, #11]
 8006968:	3301      	adds	r3, #1
 800696a:	72fb      	strb	r3, [r7, #11]
    break;
 800696c:	e007      	b.n	800697e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9e7 	bl	8006d44 <USBD_CtlError>
    err++;
 8006976:	7afb      	ldrb	r3, [r7, #11]
 8006978:	3301      	adds	r3, #1
 800697a:	72fb      	strb	r3, [r7, #11]
    break;
 800697c:	bf00      	nop
  }

  if (err != 0U)
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d11e      	bne.n	80069c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	88db      	ldrh	r3, [r3, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d016      	beq.n	80069ba <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800698c:	893b      	ldrh	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88da      	ldrh	r2, [r3, #6]
 8006996:	893b      	ldrh	r3, [r7, #8]
 8006998:	4293      	cmp	r3, r2
 800699a:	bf28      	it	cs
 800699c:	4613      	movcs	r3, r2
 800699e:	b29b      	uxth	r3, r3
 80069a0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80069a2:	893b      	ldrh	r3, [r7, #8]
 80069a4:	461a      	mov	r2, r3
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa3c 	bl	8006e26 <USBD_CtlSendData>
 80069ae:	e009      	b.n	80069c4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9c6 	bl	8006d44 <USBD_CtlError>
 80069b8:	e004      	b.n	80069c4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa8d 	bl	8006eda <USBD_CtlSendStatus>
 80069c0:	e000      	b.n	80069c4 <USBD_GetDescriptor+0x320>
    return;
 80069c2:	bf00      	nop
    }
  }
}
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop

080069cc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	889b      	ldrh	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d130      	bne.n	8006a40 <USBD_SetAddress+0x74>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	88db      	ldrh	r3, [r3, #6]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d12c      	bne.n	8006a40 <USBD_SetAddress+0x74>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	885b      	ldrh	r3, [r3, #2]
 80069ea:	2b7f      	cmp	r3, #127	; 0x7f
 80069ec:	d828      	bhi.n	8006a40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	885b      	ldrh	r3, [r3, #2]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d104      	bne.n	8006a0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f99c 	bl	8006d44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0c:	e01c      	b.n	8006a48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7bfa      	ldrb	r2, [r7, #15]
 8006a12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 ff8c 	bl	8007938 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fa5a 	bl	8006eda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	e008      	b.n	8006a48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3e:	e003      	b.n	8006a48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f97e 	bl	8006d44 <USBD_CtlError>
  }
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	885b      	ldrh	r3, [r3, #2]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <USBD_SetConfig+0x144>)
 8006a66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a68:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <USBD_SetConfig+0x144>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d905      	bls.n	8006a7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f966 	bl	8006d44 <USBD_CtlError>
    return USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e087      	b.n	8006b8c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d002      	beq.n	8006a8c <USBD_SetConfig+0x3c>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d025      	beq.n	8006ad6 <USBD_SetConfig+0x86>
 8006a8a:	e071      	b.n	8006b70 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006a8c:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <USBD_SetConfig+0x144>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01c      	beq.n	8006ace <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006a94:	4b3f      	ldr	r3, [pc, #252]	; (8006b94 <USBD_SetConfig+0x144>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <USBD_SetConfig+0x144>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff f97b 	bl	8005da0 <USBD_SetClassConfig>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f944 	bl	8006d44 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006abc:	e065      	b.n	8006b8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa0b 	bl	8006eda <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006acc:	e05d      	b.n	8006b8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa03 	bl	8006eda <USBD_CtlSendStatus>
    break;
 8006ad4:	e059      	b.n	8006b8a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006ad6:	4b2f      	ldr	r3, [pc, #188]	; (8006b94 <USBD_SetConfig+0x144>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d112      	bne.n	8006b04 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006ae6:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <USBD_SetConfig+0x144>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <USBD_SetConfig+0x144>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff f96e 	bl	8005dd8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f9ec 	bl	8006eda <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b02:	e042      	b.n	8006b8a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006b04:	4b23      	ldr	r3, [pc, #140]	; (8006b94 <USBD_SetConfig+0x144>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d02a      	beq.n	8006b68 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff f95c 	bl	8005dd8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006b20:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <USBD_SetConfig+0x144>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <USBD_SetConfig+0x144>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff f935 	bl	8005da0 <USBD_SetClassConfig>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8fe 	bl	8006d44 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff f941 	bl	8005dd8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006b5e:	e014      	b.n	8006b8a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f9ba 	bl	8006eda <USBD_CtlSendStatus>
    break;
 8006b66:	e010      	b.n	8006b8a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9b6 	bl	8006eda <USBD_CtlSendStatus>
    break;
 8006b6e:	e00c      	b.n	8006b8a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f8e6 	bl	8006d44 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <USBD_SetConfig+0x144>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff f92a 	bl	8005dd8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	73fb      	strb	r3, [r7, #15]
    break;
 8006b88:	bf00      	nop
  }

  return ret;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000260 	.word	0x20000260

08006b98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	88db      	ldrh	r3, [r3, #6]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d004      	beq.n	8006bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8c9 	bl	8006d44 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006bb2:	e021      	b.n	8006bf8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	db17      	blt.n	8006bee <USBD_GetConfig+0x56>
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	dd02      	ble.n	8006bc8 <USBD_GetConfig+0x30>
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d00b      	beq.n	8006bde <USBD_GetConfig+0x46>
 8006bc6:	e012      	b.n	8006bee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f925 	bl	8006e26 <USBD_CtlSendData>
      break;
 8006bdc:	e00c      	b.n	8006bf8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3304      	adds	r3, #4
 8006be2:	2201      	movs	r2, #1
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f91d 	bl	8006e26 <USBD_CtlSendData>
      break;
 8006bec:	e004      	b.n	8006bf8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f8a7 	bl	8006d44 <USBD_CtlError>
      break;
 8006bf6:	bf00      	nop
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c10:	3b01      	subs	r3, #1
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d81e      	bhi.n	8006c54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	88db      	ldrh	r3, [r3, #6]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d004      	beq.n	8006c28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f88f 	bl	8006d44 <USBD_CtlError>
      break;
 8006c26:	e01a      	b.n	8006c5e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f043 0202 	orr.w	r2, r3, #2
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	330c      	adds	r3, #12
 8006c48:	2202      	movs	r2, #2
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8ea 	bl	8006e26 <USBD_CtlSendData>
    break;
 8006c52:	e004      	b.n	8006c5e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f874 	bl	8006d44 <USBD_CtlError>
    break;
 8006c5c:	bf00      	nop
  }
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	885b      	ldrh	r3, [r3, #2]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d106      	bne.n	8006c86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f92a 	bl	8006eda <USBD_CtlSendStatus>
  }
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d80b      	bhi.n	8006cbc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	885b      	ldrh	r3, [r3, #2]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d10c      	bne.n	8006cc6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f910 	bl	8006eda <USBD_CtlSendStatus>
      }
      break;
 8006cba:	e004      	b.n	8006cc6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f840 	bl	8006d44 <USBD_CtlError>
      break;
 8006cc4:	e000      	b.n	8006cc8 <USBD_ClrFeature+0x3a>
      break;
 8006cc6:	bf00      	nop
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff faa7 	bl	800624e <SWAPBYTE>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fa9a 	bl	800624e <SWAPBYTE>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fa8d 	bl	800624e <SWAPBYTE>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	80da      	strh	r2, [r3, #6]
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fd59 	bl	8007808 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d56:	2100      	movs	r1, #0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fd55 	bl	8007808 <USBD_LL_StallEP>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d036      	beq.n	8006dea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d80:	6938      	ldr	r0, [r7, #16]
 8006d82:	f000 f836 	bl	8006df2 <USBD_GetLen>
 8006d86:	4603      	mov	r3, r0
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4413      	add	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	3301      	adds	r3, #1
 8006da4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4413      	add	r3, r2
 8006dac:	2203      	movs	r2, #3
 8006dae:	701a      	strb	r2, [r3, #0]
  idx++;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	3301      	adds	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006db6:	e013      	b.n	8006de0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	613b      	str	r3, [r7, #16]
    idx++;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e7      	bne.n	8006db8 <USBD_GetString+0x52>
 8006de8:	e000      	b.n	8006dec <USBD_GetString+0x86>
    return;
 8006dea:	bf00      	nop
  }
}
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e02:	e005      	b.n	8006e10 <USBD_GetLen+0x1e>
  {
    len++;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	3301      	adds	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1f5      	bne.n	8006e04 <USBD_GetLen+0x12>
  }

  return len;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2202      	movs	r2, #2
 8006e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fda9 	bl	80079a4 <USBD_LL_Transmit>

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fd98 	bl	80079a4 <USBD_LL_Transmit>

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fdb3 	bl	8007a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fda2 	bl	8007a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eea:	2300      	movs	r3, #0
 8006eec:	2200      	movs	r2, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fd57 	bl	80079a4 <USBD_LL_Transmit>

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f10:	2300      	movs	r3, #0
 8006f12:	2200      	movs	r2, #0
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fd7c 	bl	8007a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4912      	ldr	r1, [pc, #72]	; (8006f78 <MX_USB_DEVICE_Init+0x50>)
 8006f30:	4812      	ldr	r0, [pc, #72]	; (8006f7c <MX_USB_DEVICE_Init+0x54>)
 8006f32:	f7fe fec7 	bl	8005cc4 <USBD_Init>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f3c:	f7f9 fc3a 	bl	80007b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f40:	490f      	ldr	r1, [pc, #60]	; (8006f80 <MX_USB_DEVICE_Init+0x58>)
 8006f42:	480e      	ldr	r0, [pc, #56]	; (8006f7c <MX_USB_DEVICE_Init+0x54>)
 8006f44:	f7fe feee 	bl	8005d24 <USBD_RegisterClass>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f4e:	f7f9 fc31 	bl	80007b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f52:	490c      	ldr	r1, [pc, #48]	; (8006f84 <MX_USB_DEVICE_Init+0x5c>)
 8006f54:	4809      	ldr	r0, [pc, #36]	; (8006f7c <MX_USB_DEVICE_Init+0x54>)
 8006f56:	f7fe fe19 	bl	8005b8c <USBD_CDC_RegisterInterface>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f60:	f7f9 fc28 	bl	80007b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f64:	4805      	ldr	r0, [pc, #20]	; (8006f7c <MX_USB_DEVICE_Init+0x54>)
 8006f66:	f7fe ff04 	bl	8005d72 <USBD_Start>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f70:	f7f9 fc20 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f74:	bf00      	nop
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000130 	.word	0x20000130
 8006f7c:	20000270 	.word	0x20000270
 8006f80:	20000018 	.word	0x20000018
 8006f84:	2000011c 	.word	0x2000011c

08006f88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4905      	ldr	r1, [pc, #20]	; (8006fa4 <CDC_Init_FS+0x1c>)
 8006f90:	4805      	ldr	r0, [pc, #20]	; (8006fa8 <CDC_Init_FS+0x20>)
 8006f92:	f7fe fe10 	bl	8005bb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f96:	4905      	ldr	r1, [pc, #20]	; (8006fac <CDC_Init_FS+0x24>)
 8006f98:	4803      	ldr	r0, [pc, #12]	; (8006fa8 <CDC_Init_FS+0x20>)
 8006f9a:	f7fe fe25 	bl	8005be8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000d40 	.word	0x20000d40
 8006fa8:	20000270 	.word	0x20000270
 8006fac:	20000540 	.word	0x20000540

08006fb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b23      	cmp	r3, #35	; 0x23
 8006fd4:	d84a      	bhi.n	800706c <CDC_Control_FS+0xac>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <CDC_Control_FS+0x1c>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	0800706d 	.word	0x0800706d
 8006fe0:	0800706d 	.word	0x0800706d
 8006fe4:	0800706d 	.word	0x0800706d
 8006fe8:	0800706d 	.word	0x0800706d
 8006fec:	0800706d 	.word	0x0800706d
 8006ff0:	0800706d 	.word	0x0800706d
 8006ff4:	0800706d 	.word	0x0800706d
 8006ff8:	0800706d 	.word	0x0800706d
 8006ffc:	0800706d 	.word	0x0800706d
 8007000:	0800706d 	.word	0x0800706d
 8007004:	0800706d 	.word	0x0800706d
 8007008:	0800706d 	.word	0x0800706d
 800700c:	0800706d 	.word	0x0800706d
 8007010:	0800706d 	.word	0x0800706d
 8007014:	0800706d 	.word	0x0800706d
 8007018:	0800706d 	.word	0x0800706d
 800701c:	0800706d 	.word	0x0800706d
 8007020:	0800706d 	.word	0x0800706d
 8007024:	0800706d 	.word	0x0800706d
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	0800706d 	.word	0x0800706d
 8007034:	0800706d 	.word	0x0800706d
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800706d 	.word	0x0800706d
 8007040:	0800706d 	.word	0x0800706d
 8007044:	0800706d 	.word	0x0800706d
 8007048:	0800706d 	.word	0x0800706d
 800704c:	0800706d 	.word	0x0800706d
 8007050:	0800706d 	.word	0x0800706d
 8007054:	0800706d 	.word	0x0800706d
 8007058:	0800706d 	.word	0x0800706d
 800705c:	0800706d 	.word	0x0800706d
 8007060:	0800706d 	.word	0x0800706d
 8007064:	0800706d 	.word	0x0800706d
 8007068:	0800706d 	.word	0x0800706d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800706c:	bf00      	nop
  }

  return (USBD_OK);
 800706e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4805      	ldr	r0, [pc, #20]	; (80070a0 <CDC_Receive_FS+0x24>)
 800708a:	f7fe fdad 	bl	8005be8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800708e:	4804      	ldr	r0, [pc, #16]	; (80070a0 <CDC_Receive_FS+0x24>)
 8007090:	f7fe fdee 	bl	8005c70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007094:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000270 	.word	0x20000270

080070a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80070b4:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <CDC_Transmit_FS+0x48>)
 80070b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e00b      	b.n	80070e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80070ca:	887b      	ldrh	r3, [r7, #2]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	4806      	ldr	r0, [pc, #24]	; (80070ec <CDC_Transmit_FS+0x48>)
 80070d2:	f7fe fd70 	bl	8005bb6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070d6:	4805      	ldr	r0, [pc, #20]	; (80070ec <CDC_Transmit_FS+0x48>)
 80070d8:	f7fe fd9a 	bl	8005c10 <USBD_CDC_TransmitPacket>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000270 	.word	0x20000270

080070f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2212      	movs	r2, #18
 8007124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007126:	4b03      	ldr	r3, [pc, #12]	; (8007134 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20000150 	.word	0x20000150

08007138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	6039      	str	r1, [r7, #0]
 8007142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2204      	movs	r2, #4
 8007148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800714a:	4b03      	ldr	r3, [pc, #12]	; (8007158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20000170 	.word	0x20000170

0800715c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4907      	ldr	r1, [pc, #28]	; (8007190 <USBD_FS_ProductStrDescriptor+0x34>)
 8007172:	4808      	ldr	r0, [pc, #32]	; (8007194 <USBD_FS_ProductStrDescriptor+0x38>)
 8007174:	f7ff fdf7 	bl	8006d66 <USBD_GetString>
 8007178:	e004      	b.n	8007184 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	4904      	ldr	r1, [pc, #16]	; (8007190 <USBD_FS_ProductStrDescriptor+0x34>)
 800717e:	4805      	ldr	r0, [pc, #20]	; (8007194 <USBD_FS_ProductStrDescriptor+0x38>)
 8007180:	f7ff fdf1 	bl	8006d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20001540 	.word	0x20001540
 8007194:	08008464 	.word	0x08008464

08007198 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	4904      	ldr	r1, [pc, #16]	; (80071b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071a8:	4804      	ldr	r0, [pc, #16]	; (80071bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071aa:	f7ff fddc 	bl	8006d66 <USBD_GetString>
  return USBD_StrDesc;
 80071ae:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20001540 	.word	0x20001540
 80071bc:	0800847c 	.word	0x0800847c

080071c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	221a      	movs	r2, #26
 80071d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071d2:	f000 f855 	bl	8007280 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071d6:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20000174 	.word	0x20000174

080071e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	4907      	ldr	r1, [pc, #28]	; (8007218 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071fa:	4808      	ldr	r0, [pc, #32]	; (800721c <USBD_FS_ConfigStrDescriptor+0x38>)
 80071fc:	f7ff fdb3 	bl	8006d66 <USBD_GetString>
 8007200:	e004      	b.n	800720c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4904      	ldr	r1, [pc, #16]	; (8007218 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007208:	f7ff fdad 	bl	8006d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20001540 	.word	0x20001540
 800721c:	08008490 	.word	0x08008490

08007220 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4907      	ldr	r1, [pc, #28]	; (8007254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007236:	4808      	ldr	r0, [pc, #32]	; (8007258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007238:	f7ff fd95 	bl	8006d66 <USBD_GetString>
 800723c:	e004      	b.n	8007248 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007244:	f7ff fd8f 	bl	8006d66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20001540 	.word	0x20001540
 8007258:	0800849c 	.word	0x0800849c

0800725c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	220c      	movs	r2, #12
 800726c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800726e:	4b03      	ldr	r3, [pc, #12]	; (800727c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	20000164 	.word	0x20000164

08007280 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <Get_SerialNum+0x44>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800728c:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <Get_SerialNum+0x48>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007292:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <Get_SerialNum+0x4c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072a6:	2208      	movs	r2, #8
 80072a8:	4909      	ldr	r1, [pc, #36]	; (80072d0 <Get_SerialNum+0x50>)
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f814 	bl	80072d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072b0:	2204      	movs	r2, #4
 80072b2:	4908      	ldr	r1, [pc, #32]	; (80072d4 <Get_SerialNum+0x54>)
 80072b4:	68b8      	ldr	r0, [r7, #8]
 80072b6:	f000 f80f 	bl	80072d8 <IntToUnicode>
  }
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	1fff7590 	.word	0x1fff7590
 80072c8:	1fff7594 	.word	0x1fff7594
 80072cc:	1fff7598 	.word	0x1fff7598
 80072d0:	20000176 	.word	0x20000176
 80072d4:	20000186 	.word	0x20000186

080072d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
 80072ee:	e027      	b.n	8007340 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	0f1b      	lsrs	r3, r3, #28
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	d80b      	bhi.n	8007310 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	0f1b      	lsrs	r3, r3, #28
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4619      	mov	r1, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	440b      	add	r3, r1
 8007308:	3230      	adds	r2, #48	; 0x30
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e00a      	b.n	8007326 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	0f1b      	lsrs	r3, r3, #28
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4619      	mov	r1, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	440b      	add	r3, r1
 8007320:	3237      	adds	r2, #55	; 0x37
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	3301      	adds	r3, #1
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	4413      	add	r3, r2
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	3301      	adds	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
 8007340:	7dfa      	ldrb	r2, [r7, #23]
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	429a      	cmp	r2, r3
 8007346:	d3d3      	bcc.n	80072f0 <IntToUnicode+0x18>
  }
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	; 0x28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007374:	d14e      	bne.n	8007414 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007376:	4b29      	ldr	r3, [pc, #164]	; (800741c <HAL_PCD_MspInit+0xc8>)
 8007378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737a:	4a28      	ldr	r2, [pc, #160]	; (800741c <HAL_PCD_MspInit+0xc8>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007382:	4b26      	ldr	r3, [pc, #152]	; (800741c <HAL_PCD_MspInit+0xc8>)
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800738e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007394:	2302      	movs	r3, #2
 8007396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800739c:	2303      	movs	r3, #3
 800739e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073a0:	230a      	movs	r3, #10
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073a4:	f107 0314 	add.w	r3, r7, #20
 80073a8:	4619      	mov	r1, r3
 80073aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073ae:	f7f9 fe69 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073b2:	4b1a      	ldr	r3, [pc, #104]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b6:	4a19      	ldr	r2, [pc, #100]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073be:	4b17      	ldr	r3, [pc, #92]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d114      	bne.n	8007400 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	4a10      	ldr	r2, [pc, #64]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e0:	6593      	str	r3, [r2, #88]	; 0x58
 80073e2:	4b0e      	ldr	r3, [pc, #56]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80073ee:	f7fb f90f 	bl	8002610 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f2:	4b0a      	ldr	r3, [pc, #40]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f6:	4a09      	ldr	r2, [pc, #36]	; (800741c <HAL_PCD_MspInit+0xc8>)
 80073f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073fc:	6593      	str	r3, [r2, #88]	; 0x58
 80073fe:	e001      	b.n	8007404 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007400:	f7fb f906 	bl	8002610 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	2043      	movs	r0, #67	; 0x43
 800740a:	f7f9 fe04 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800740e:	2043      	movs	r0, #67	; 0x43
 8007410:	f7f9 fe1d 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007414:	bf00      	nop
 8007416:	3728      	adds	r7, #40	; 0x28
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40021000 	.word	0x40021000

08007420 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f7fe fce6 	bl	8005e08 <USBD_LL_SetupStage>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	4619      	mov	r1, r3
 800746e:	f7fe fd1e 	bl	8005eae <USBD_LL_DataOutStage>
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800748c:	78fa      	ldrb	r2, [r7, #3]
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	1a9b      	subs	r3, r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	3348      	adds	r3, #72	; 0x48
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	4619      	mov	r1, r3
 80074a2:	f7fe fd67 	bl	8005f74 <USBD_LL_DataInStage>
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe fe6b 	bl	8006198 <USBD_LL_SOF>
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d001      	beq.n	80074e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074de:	f7f9 f969 	bl	80007b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e8:	7bfa      	ldrb	r2, [r7, #15]
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fe18 	bl	8006122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fdd1 	bl	80060a0 <USBD_LL_Reset>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fe07 	bl	8006142 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <HAL_PCD_SuspendCallback+0x48>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	4a03      	ldr	r2, [pc, #12]	; (8007550 <HAL_PCD_SuspendCallback+0x48>)
 8007542:	f043 0306 	orr.w	r3, r3, #6
 8007546:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	e000ed00 	.word	0xe000ed00

08007554 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800757c:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <HAL_PCD_ResumeCallback+0x4c>)
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	4a07      	ldr	r2, [pc, #28]	; (80075a0 <HAL_PCD_ResumeCallback+0x4c>)
 8007582:	f023 0306 	bic.w	r3, r3, #6
 8007586:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007588:	f000 fade 	bl	8007b48 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fdea 	bl	800616c <USBD_LL_Resume>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	e000ed00 	.word	0xe000ed00

080075a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fe13 	bl	80061e6 <USBD_LL_IsoOUTIncomplete>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	4611      	mov	r1, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fdf4 	bl	80061cc <USBD_LL_IsoINIncomplete>
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fe00 	bl	8006200 <USBD_LL_DevConnected>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fdfd 	bl	8006216 <USBD_LL_DevDisconnected>
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d13c      	bne.n	80076ae <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007634:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <USBD_LL_Init+0x94>)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <USBD_LL_Init+0x94>)
 8007640:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007644:	4b1c      	ldr	r3, [pc, #112]	; (80076b8 <USBD_LL_Init+0x94>)
 8007646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800764a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800764c:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <USBD_LL_Init+0x94>)
 800764e:	2206      	movs	r2, #6
 8007650:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007652:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <USBD_LL_Init+0x94>)
 8007654:	2202      	movs	r2, #2
 8007656:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007658:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <USBD_LL_Init+0x94>)
 800765a:	2202      	movs	r2, #2
 800765c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800765e:	4b16      	ldr	r3, [pc, #88]	; (80076b8 <USBD_LL_Init+0x94>)
 8007660:	2200      	movs	r2, #0
 8007662:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007664:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <USBD_LL_Init+0x94>)
 8007666:	2200      	movs	r2, #0
 8007668:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <USBD_LL_Init+0x94>)
 800766c:	2200      	movs	r2, #0
 800766e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <USBD_LL_Init+0x94>)
 8007672:	2200      	movs	r2, #0
 8007674:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007676:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <USBD_LL_Init+0x94>)
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <USBD_LL_Init+0x94>)
 800767e:	2200      	movs	r2, #0
 8007680:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007682:	480d      	ldr	r0, [pc, #52]	; (80076b8 <USBD_LL_Init+0x94>)
 8007684:	f7f9 fec0 	bl	8001408 <HAL_PCD_Init>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800768e:	f7f9 f891 	bl	80007b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007692:	2180      	movs	r1, #128	; 0x80
 8007694:	4808      	ldr	r0, [pc, #32]	; (80076b8 <USBD_LL_Init+0x94>)
 8007696:	f7fa ff22 	bl	80024de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	2100      	movs	r1, #0
 800769e:	4806      	ldr	r0, [pc, #24]	; (80076b8 <USBD_LL_Init+0x94>)
 80076a0:	f7fa fed6 	bl	8002450 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076a4:	2280      	movs	r2, #128	; 0x80
 80076a6:	2101      	movs	r1, #1
 80076a8:	4803      	ldr	r0, [pc, #12]	; (80076b8 <USBD_LL_Init+0x94>)
 80076aa:	f7fa fed1 	bl	8002450 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20001740 	.word	0x20001740

080076bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7f9 ffbc 	bl	8001650 <HAL_PCD_Start>
 80076d8:	4603      	mov	r3, r0
 80076da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d816      	bhi.n	8007710 <USBD_LL_Start+0x54>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <USBD_LL_Start+0x2c>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	080076ff 	.word	0x080076ff
 80076f0:	08007705 	.word	0x08007705
 80076f4:	0800770b 	.word	0x0800770b
    case HAL_OK :
      usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
    break;
 80076fc:	e00b      	b.n	8007716 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076fe:	2303      	movs	r3, #3
 8007700:	73fb      	strb	r3, [r7, #15]
    break;
 8007702:	e008      	b.n	8007716 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007704:	2301      	movs	r3, #1
 8007706:	73fb      	strb	r3, [r7, #15]
    break;
 8007708:	e005      	b.n	8007716 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	73fb      	strb	r3, [r7, #15]
    break;
 800770e:	e002      	b.n	8007716 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007710:	2303      	movs	r3, #3
 8007712:	73fb      	strb	r3, [r7, #15]
    break;
 8007714:	bf00      	nop
  }
  return usb_status;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	4603      	mov	r3, r0
 8007730:	70fb      	strb	r3, [r7, #3]
 8007732:	460b      	mov	r3, r1
 8007734:	70bb      	strb	r3, [r7, #2]
 8007736:	4613      	mov	r3, r2
 8007738:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007748:	78bb      	ldrb	r3, [r7, #2]
 800774a:	883a      	ldrh	r2, [r7, #0]
 800774c:	78f9      	ldrb	r1, [r7, #3]
 800774e:	f7fa fb77 	bl	8001e40 <HAL_PCD_EP_Open>
 8007752:	4603      	mov	r3, r0
 8007754:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d817      	bhi.n	800778c <USBD_LL_OpenEP+0x6c>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_LL_OpenEP+0x44>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007775 	.word	0x08007775
 8007768:	0800777b 	.word	0x0800777b
 800776c:	08007781 	.word	0x08007781
 8007770:	08007787 	.word	0x08007787
    case HAL_OK :
      usb_status = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	e00b      	b.n	8007792 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	73fb      	strb	r3, [r7, #15]
    break;
 800777e:	e008      	b.n	8007792 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007780:	2301      	movs	r3, #1
 8007782:	73fb      	strb	r3, [r7, #15]
    break;
 8007784:	e005      	b.n	8007792 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007786:	2303      	movs	r3, #3
 8007788:	73fb      	strb	r3, [r7, #15]
    break;
 800778a:	e002      	b.n	8007792 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800778c:	2303      	movs	r3, #3
 800778e:	73fb      	strb	r3, [r7, #15]
    break;
 8007790:	bf00      	nop
  }
  return usb_status;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa fba8 	bl	8001f10 <HAL_PCD_EP_Close>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d816      	bhi.n	80077f8 <USBD_LL_CloseEP+0x5c>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBD_LL_CloseEP+0x34>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077e7 	.word	0x080077e7
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077f3 	.word	0x080077f3
    case HAL_OK :
      usb_status = USBD_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
    break;
 80077e4:	e00b      	b.n	80077fe <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077e6:	2303      	movs	r3, #3
 80077e8:	73fb      	strb	r3, [r7, #15]
    break;
 80077ea:	e008      	b.n	80077fe <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
    break;
 80077f0:	e005      	b.n	80077fe <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
    break;
 80077f6:	e002      	b.n	80077fe <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
    break;
 80077fc:	bf00      	nop
  }
  return usb_status;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fc4f 	bl	80020ca <HAL_PCD_EP_SetStall>
 800782c:	4603      	mov	r3, r0
 800782e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d816      	bhi.n	8007864 <USBD_LL_StallEP+0x5c>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <USBD_LL_StallEP+0x34>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007853 	.word	0x08007853
 8007844:	08007859 	.word	0x08007859
 8007848:	0800785f 	.word	0x0800785f
    case HAL_OK :
      usb_status = USBD_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
    break;
 8007850:	e00b      	b.n	800786a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007852:	2303      	movs	r3, #3
 8007854:	73fb      	strb	r3, [r7, #15]
    break;
 8007856:	e008      	b.n	800786a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
    break;
 800785c:	e005      	b.n	800786a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	73fb      	strb	r3, [r7, #15]
    break;
 8007862:	e002      	b.n	800786a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007864:	2303      	movs	r3, #3
 8007866:	73fb      	strb	r3, [r7, #15]
    break;
 8007868:	bf00      	nop
  }
  return usb_status;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7fa fc7b 	bl	800218e <HAL_PCD_EP_ClrStall>
 8007898:	4603      	mov	r3, r0
 800789a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d816      	bhi.n	80078d0 <USBD_LL_ClearStallEP+0x5c>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <USBD_LL_ClearStallEP+0x34>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078b9 	.word	0x080078b9
 80078ac:	080078bf 	.word	0x080078bf
 80078b0:	080078c5 	.word	0x080078c5
 80078b4:	080078cb 	.word	0x080078cb
    case HAL_OK :
      usb_status = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
    break;
 80078bc:	e00b      	b.n	80078d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078be:	2303      	movs	r3, #3
 80078c0:	73fb      	strb	r3, [r7, #15]
    break;
 80078c2:	e008      	b.n	80078d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
    break;
 80078c8:	e005      	b.n	80078d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078ca:	2303      	movs	r3, #3
 80078cc:	73fb      	strb	r3, [r7, #15]
    break;
 80078ce:	e002      	b.n	80078d6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80078d0:	2303      	movs	r3, #3
 80078d2:	73fb      	strb	r3, [r7, #15]
    break;
 80078d4:	bf00      	nop
  }
  return usb_status;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da0b      	bge.n	8007914 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	4613      	mov	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	333e      	adds	r3, #62	; 0x3e
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	e00b      	b.n	800792c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	4613      	mov	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800792a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f7fa fa4d 	bl	8001df6 <HAL_PCD_SetAddress>
 800795c:	4603      	mov	r3, r0
 800795e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b03      	cmp	r3, #3
 8007964:	d816      	bhi.n	8007994 <USBD_LL_SetUSBAddress+0x5c>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <USBD_LL_SetUSBAddress+0x34>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	0800797d 	.word	0x0800797d
 8007970:	08007983 	.word	0x08007983
 8007974:	08007989 	.word	0x08007989
 8007978:	0800798f 	.word	0x0800798f
    case HAL_OK :
      usb_status = USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
    break;
 8007980:	e00b      	b.n	800799a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	73fb      	strb	r3, [r7, #15]
    break;
 8007986:	e008      	b.n	800799a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	e005      	b.n	800799a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	73fb      	strb	r3, [r7, #15]
    break;
 8007992:	e002      	b.n	800799a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	73fb      	strb	r3, [r7, #15]
    break;
 8007998:	bf00      	nop
  }
  return usb_status;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	460b      	mov	r3, r1
 80079b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079c2:	7af9      	ldrb	r1, [r7, #11]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	f7fa fb42 	bl	8002050 <HAL_PCD_EP_Transmit>
 80079cc:	4603      	mov	r3, r0
 80079ce:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80079d0:	7dbb      	ldrb	r3, [r7, #22]
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d816      	bhi.n	8007a04 <USBD_LL_Transmit+0x60>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <USBD_LL_Transmit+0x38>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	080079f3 	.word	0x080079f3
 80079e4:	080079f9 	.word	0x080079f9
 80079e8:	080079ff 	.word	0x080079ff
    case HAL_OK :
      usb_status = USBD_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	75fb      	strb	r3, [r7, #23]
    break;
 80079f0:	e00b      	b.n	8007a0a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079f2:	2303      	movs	r3, #3
 80079f4:	75fb      	strb	r3, [r7, #23]
    break;
 80079f6:	e008      	b.n	8007a0a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
    break;
 80079fc:	e005      	b.n	8007a0a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	75fb      	strb	r3, [r7, #23]
    break;
 8007a02:	e002      	b.n	8007a0a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007a04:	2303      	movs	r3, #3
 8007a06:	75fb      	strb	r3, [r7, #23]
    break;
 8007a08:	bf00      	nop
  }
  return usb_status;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	460b      	mov	r3, r1
 8007a22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a32:	7af9      	ldrb	r1, [r7, #11]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	f7fa fab4 	bl	8001fa4 <HAL_PCD_EP_Receive>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007a40:	7dbb      	ldrb	r3, [r7, #22]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d816      	bhi.n	8007a74 <USBD_LL_PrepareReceive+0x60>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBD_LL_PrepareReceive+0x38>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a63 	.word	0x08007a63
 8007a54:	08007a69 	.word	0x08007a69
 8007a58:	08007a6f 	.word	0x08007a6f
    case HAL_OK :
      usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007a60:	e00b      	b.n	8007a7a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	75fb      	strb	r3, [r7, #23]
    break;
 8007a66:	e008      	b.n	8007a7a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007a6c:	e005      	b.n	8007a7a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	75fb      	strb	r3, [r7, #23]
    break;
 8007a72:	e002      	b.n	8007a7a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	75fb      	strb	r3, [r7, #23]
    break;
 8007a78:	bf00      	nop
  }
  return usb_status;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	4611      	mov	r1, r2
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa fac0 	bl	8002020 <HAL_PCD_EP_GetRxCount>
 8007aa0:	4603      	mov	r3, r0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_PCDEx_LPM_Callback+0x18>
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d01f      	beq.n	8007b02 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007ac2:	e03b      	b.n	8007b3c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007acc:	f000 f83c 	bl	8007b48 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ad6:	f023 0306 	bic.w	r3, r3, #6
 8007ada:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fb36 	bl	800616c <USBD_LL_Resume>
    break;
 8007b00:	e01c      	b.n	8007b3c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6812      	ldr	r2, [r2, #0]
 8007b10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b14:	f043 0301 	orr.w	r3, r3, #1
 8007b18:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fb0e 	bl	8006142 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	4a04      	ldr	r2, [pc, #16]	; (8007b44 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b34:	f043 0306 	orr.w	r3, r3, #6
 8007b38:	6113      	str	r3, [r2, #16]
    break;
 8007b3a:	bf00      	nop
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	e000ed00 	.word	0xe000ed00

08007b48 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007b4c:	f7f8 fc92 	bl	8000474 <SystemClock_Config>
}
 8007b50:	bf00      	nop
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	; (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000190 	.word	0x20000190

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4e0d      	ldr	r6, [pc, #52]	; (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	; (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1ba4      	subs	r4, r4, r6
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	42a5      	cmp	r5, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4e0b      	ldr	r6, [pc, #44]	; (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	; (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f000 fc36 	bl	80083e4 <_init>
 8007b78:	1ba4      	subs	r4, r4, r6
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2500      	movs	r5, #0
 8007b7e:	42a5      	cmp	r5, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b88:	4798      	blx	r3
 8007b8a:	3501      	adds	r5, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b92:	4798      	blx	r3
 8007b94:	3501      	adds	r5, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	08008520 	.word	0x08008520
 8007b9c:	08008520 	.word	0x08008520
 8007ba0:	08008520 	.word	0x08008520
 8007ba4:	08008524 	.word	0x08008524

08007ba8 <malloc>:
 8007ba8:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <malloc+0xc>)
 8007baa:	4601      	mov	r1, r0
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	f000 b861 	b.w	8007c74 <_malloc_r>
 8007bb2:	bf00      	nop
 8007bb4:	20000190 	.word	0x20000190

08007bb8 <free>:
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <free+0xc>)
 8007bba:	4601      	mov	r1, r0
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	f000 b80b 	b.w	8007bd8 <_free_r>
 8007bc2:	bf00      	nop
 8007bc4:	20000190 	.word	0x20000190

08007bc8 <memset>:
 8007bc8:	4402      	add	r2, r0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d100      	bne.n	8007bd2 <memset+0xa>
 8007bd0:	4770      	bx	lr
 8007bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd6:	e7f9      	b.n	8007bcc <memset+0x4>

08007bd8 <_free_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4605      	mov	r5, r0
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d045      	beq.n	8007c6c <_free_r+0x94>
 8007be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be4:	1f0c      	subs	r4, r1, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfb8      	it	lt
 8007bea:	18e4      	addlt	r4, r4, r3
 8007bec:	f000 f8cc 	bl	8007d88 <__malloc_lock>
 8007bf0:	4a1f      	ldr	r2, [pc, #124]	; (8007c70 <_free_r+0x98>)
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	b933      	cbnz	r3, 8007c06 <_free_r+0x2e>
 8007bf8:	6063      	str	r3, [r4, #4]
 8007bfa:	6014      	str	r4, [r2, #0]
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c02:	f000 b8c2 	b.w	8007d8a <__malloc_unlock>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	d90c      	bls.n	8007c24 <_free_r+0x4c>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	1862      	adds	r2, r4, r1
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	bf04      	itt	eq
 8007c12:	681a      	ldreq	r2, [r3, #0]
 8007c14:	685b      	ldreq	r3, [r3, #4]
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	bf04      	itt	eq
 8007c1a:	1852      	addeq	r2, r2, r1
 8007c1c:	6022      	streq	r2, [r4, #0]
 8007c1e:	6004      	str	r4, [r0, #0]
 8007c20:	e7ec      	b.n	8007bfc <_free_r+0x24>
 8007c22:	4613      	mov	r3, r2
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	b10a      	cbz	r2, 8007c2c <_free_r+0x54>
 8007c28:	42a2      	cmp	r2, r4
 8007c2a:	d9fa      	bls.n	8007c22 <_free_r+0x4a>
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	1858      	adds	r0, r3, r1
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d10b      	bne.n	8007c4c <_free_r+0x74>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	4401      	add	r1, r0
 8007c38:	1858      	adds	r0, r3, r1
 8007c3a:	4282      	cmp	r2, r0
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	d1dd      	bne.n	8007bfc <_free_r+0x24>
 8007c40:	6810      	ldr	r0, [r2, #0]
 8007c42:	6852      	ldr	r2, [r2, #4]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	4401      	add	r1, r0
 8007c48:	6019      	str	r1, [r3, #0]
 8007c4a:	e7d7      	b.n	8007bfc <_free_r+0x24>
 8007c4c:	d902      	bls.n	8007c54 <_free_r+0x7c>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	e7d3      	b.n	8007bfc <_free_r+0x24>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428a      	cmp	r2, r1
 8007c5a:	bf04      	itt	eq
 8007c5c:	6811      	ldreq	r1, [r2, #0]
 8007c5e:	6852      	ldreq	r2, [r2, #4]
 8007c60:	6062      	str	r2, [r4, #4]
 8007c62:	bf04      	itt	eq
 8007c64:	1809      	addeq	r1, r1, r0
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	605c      	str	r4, [r3, #4]
 8007c6a:	e7c7      	b.n	8007bfc <_free_r+0x24>
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000264 	.word	0x20000264

08007c74 <_malloc_r>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	1ccd      	adds	r5, r1, #3
 8007c78:	f025 0503 	bic.w	r5, r5, #3
 8007c7c:	3508      	adds	r5, #8
 8007c7e:	2d0c      	cmp	r5, #12
 8007c80:	bf38      	it	cc
 8007c82:	250c      	movcc	r5, #12
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	4606      	mov	r6, r0
 8007c88:	db01      	blt.n	8007c8e <_malloc_r+0x1a>
 8007c8a:	42a9      	cmp	r1, r5
 8007c8c:	d903      	bls.n	8007c96 <_malloc_r+0x22>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	6033      	str	r3, [r6, #0]
 8007c92:	2000      	movs	r0, #0
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	f000 f877 	bl	8007d88 <__malloc_lock>
 8007c9a:	4a21      	ldr	r2, [pc, #132]	; (8007d20 <_malloc_r+0xac>)
 8007c9c:	6814      	ldr	r4, [r2, #0]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	b991      	cbnz	r1, 8007cc8 <_malloc_r+0x54>
 8007ca2:	4c20      	ldr	r4, [pc, #128]	; (8007d24 <_malloc_r+0xb0>)
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	b91b      	cbnz	r3, 8007cb0 <_malloc_r+0x3c>
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f000 f83d 	bl	8007d28 <_sbrk_r>
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 f838 	bl	8007d28 <_sbrk_r>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d124      	bne.n	8007d06 <_malloc_r+0x92>
 8007cbc:	230c      	movs	r3, #12
 8007cbe:	6033      	str	r3, [r6, #0]
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 f862 	bl	8007d8a <__malloc_unlock>
 8007cc6:	e7e4      	b.n	8007c92 <_malloc_r+0x1e>
 8007cc8:	680b      	ldr	r3, [r1, #0]
 8007cca:	1b5b      	subs	r3, r3, r5
 8007ccc:	d418      	bmi.n	8007d00 <_malloc_r+0x8c>
 8007cce:	2b0b      	cmp	r3, #11
 8007cd0:	d90f      	bls.n	8007cf2 <_malloc_r+0x7e>
 8007cd2:	600b      	str	r3, [r1, #0]
 8007cd4:	50cd      	str	r5, [r1, r3]
 8007cd6:	18cc      	adds	r4, r1, r3
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f000 f856 	bl	8007d8a <__malloc_unlock>
 8007cde:	f104 000b 	add.w	r0, r4, #11
 8007ce2:	1d23      	adds	r3, r4, #4
 8007ce4:	f020 0007 	bic.w	r0, r0, #7
 8007ce8:	1ac3      	subs	r3, r0, r3
 8007cea:	d0d3      	beq.n	8007c94 <_malloc_r+0x20>
 8007cec:	425a      	negs	r2, r3
 8007cee:	50e2      	str	r2, [r4, r3]
 8007cf0:	e7d0      	b.n	8007c94 <_malloc_r+0x20>
 8007cf2:	428c      	cmp	r4, r1
 8007cf4:	684b      	ldr	r3, [r1, #4]
 8007cf6:	bf16      	itet	ne
 8007cf8:	6063      	strne	r3, [r4, #4]
 8007cfa:	6013      	streq	r3, [r2, #0]
 8007cfc:	460c      	movne	r4, r1
 8007cfe:	e7eb      	b.n	8007cd8 <_malloc_r+0x64>
 8007d00:	460c      	mov	r4, r1
 8007d02:	6849      	ldr	r1, [r1, #4]
 8007d04:	e7cc      	b.n	8007ca0 <_malloc_r+0x2c>
 8007d06:	1cc4      	adds	r4, r0, #3
 8007d08:	f024 0403 	bic.w	r4, r4, #3
 8007d0c:	42a0      	cmp	r0, r4
 8007d0e:	d005      	beq.n	8007d1c <_malloc_r+0xa8>
 8007d10:	1a21      	subs	r1, r4, r0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f808 	bl	8007d28 <_sbrk_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d0cf      	beq.n	8007cbc <_malloc_r+0x48>
 8007d1c:	6025      	str	r5, [r4, #0]
 8007d1e:	e7db      	b.n	8007cd8 <_malloc_r+0x64>
 8007d20:	20000264 	.word	0x20000264
 8007d24:	20000268 	.word	0x20000268

08007d28 <_sbrk_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4c06      	ldr	r4, [pc, #24]	; (8007d44 <_sbrk_r+0x1c>)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4605      	mov	r5, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	f7f8 ff68 	bl	8000c08 <_sbrk>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_sbrk_r+0x1a>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_sbrk_r+0x1a>
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20001b48 	.word	0x20001b48

08007d48 <siprintf>:
 8007d48:	b40e      	push	{r1, r2, r3}
 8007d4a:	b500      	push	{lr}
 8007d4c:	b09c      	sub	sp, #112	; 0x70
 8007d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d50:	9002      	str	r0, [sp, #8]
 8007d52:	9006      	str	r0, [sp, #24]
 8007d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <siprintf+0x38>)
 8007d5a:	9107      	str	r1, [sp, #28]
 8007d5c:	9104      	str	r1, [sp, #16]
 8007d5e:	4909      	ldr	r1, [pc, #36]	; (8007d84 <siprintf+0x3c>)
 8007d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d64:	9105      	str	r1, [sp, #20]
 8007d66:	6800      	ldr	r0, [r0, #0]
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	a902      	add	r1, sp, #8
 8007d6c:	f000 f868 	bl	8007e40 <_svfiprintf_r>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	b01c      	add	sp, #112	; 0x70
 8007d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d7c:	b003      	add	sp, #12
 8007d7e:	4770      	bx	lr
 8007d80:	20000190 	.word	0x20000190
 8007d84:	ffff0208 	.word	0xffff0208

08007d88 <__malloc_lock>:
 8007d88:	4770      	bx	lr

08007d8a <__malloc_unlock>:
 8007d8a:	4770      	bx	lr

08007d8c <__ssputs_r>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	688e      	ldr	r6, [r1, #8]
 8007d92:	429e      	cmp	r6, r3
 8007d94:	4682      	mov	sl, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	4690      	mov	r8, r2
 8007d9a:	4699      	mov	r9, r3
 8007d9c:	d837      	bhi.n	8007e0e <__ssputs_r+0x82>
 8007d9e:	898a      	ldrh	r2, [r1, #12]
 8007da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007da4:	d031      	beq.n	8007e0a <__ssputs_r+0x7e>
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	6909      	ldr	r1, [r1, #16]
 8007daa:	1a6f      	subs	r7, r5, r1
 8007dac:	6965      	ldr	r5, [r4, #20]
 8007dae:	2302      	movs	r3, #2
 8007db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007db4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007db8:	f109 0301 	add.w	r3, r9, #1
 8007dbc:	443b      	add	r3, r7
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	bf38      	it	cc
 8007dc2:	461d      	movcc	r5, r3
 8007dc4:	0553      	lsls	r3, r2, #21
 8007dc6:	d530      	bpl.n	8007e2a <__ssputs_r+0x9e>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7ff ff53 	bl	8007c74 <_malloc_r>
 8007dce:	4606      	mov	r6, r0
 8007dd0:	b950      	cbnz	r0, 8007de8 <__ssputs_r+0x5c>
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	f8ca 3000 	str.w	r3, [sl]
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295
 8007de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de8:	463a      	mov	r2, r7
 8007dea:	6921      	ldr	r1, [r4, #16]
 8007dec:	f000 faa8 	bl	8008340 <memcpy>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfa:	81a3      	strh	r3, [r4, #12]
 8007dfc:	6126      	str	r6, [r4, #16]
 8007dfe:	6165      	str	r5, [r4, #20]
 8007e00:	443e      	add	r6, r7
 8007e02:	1bed      	subs	r5, r5, r7
 8007e04:	6026      	str	r6, [r4, #0]
 8007e06:	60a5      	str	r5, [r4, #8]
 8007e08:	464e      	mov	r6, r9
 8007e0a:	454e      	cmp	r6, r9
 8007e0c:	d900      	bls.n	8007e10 <__ssputs_r+0x84>
 8007e0e:	464e      	mov	r6, r9
 8007e10:	4632      	mov	r2, r6
 8007e12:	4641      	mov	r1, r8
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	f000 fa9e 	bl	8008356 <memmove>
 8007e1a:	68a3      	ldr	r3, [r4, #8]
 8007e1c:	1b9b      	subs	r3, r3, r6
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	441e      	add	r6, r3
 8007e24:	6026      	str	r6, [r4, #0]
 8007e26:	2000      	movs	r0, #0
 8007e28:	e7dc      	b.n	8007de4 <__ssputs_r+0x58>
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	f000 faac 	bl	8008388 <_realloc_r>
 8007e30:	4606      	mov	r6, r0
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d1e2      	bne.n	8007dfc <__ssputs_r+0x70>
 8007e36:	6921      	ldr	r1, [r4, #16]
 8007e38:	4650      	mov	r0, sl
 8007e3a:	f7ff fecd 	bl	8007bd8 <_free_r>
 8007e3e:	e7c8      	b.n	8007dd2 <__ssputs_r+0x46>

08007e40 <_svfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	461d      	mov	r5, r3
 8007e46:	898b      	ldrh	r3, [r1, #12]
 8007e48:	061f      	lsls	r7, r3, #24
 8007e4a:	b09d      	sub	sp, #116	; 0x74
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	4616      	mov	r6, r2
 8007e52:	d50f      	bpl.n	8007e74 <_svfiprintf_r+0x34>
 8007e54:	690b      	ldr	r3, [r1, #16]
 8007e56:	b96b      	cbnz	r3, 8007e74 <_svfiprintf_r+0x34>
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	f7ff ff0b 	bl	8007c74 <_malloc_r>
 8007e5e:	6020      	str	r0, [r4, #0]
 8007e60:	6120      	str	r0, [r4, #16]
 8007e62:	b928      	cbnz	r0, 8007e70 <_svfiprintf_r+0x30>
 8007e64:	230c      	movs	r3, #12
 8007e66:	f8c8 3000 	str.w	r3, [r8]
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6e:	e0c8      	b.n	8008002 <_svfiprintf_r+0x1c2>
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	6163      	str	r3, [r4, #20]
 8007e74:	2300      	movs	r3, #0
 8007e76:	9309      	str	r3, [sp, #36]	; 0x24
 8007e78:	2320      	movs	r3, #32
 8007e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e7e:	2330      	movs	r3, #48	; 0x30
 8007e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e84:	9503      	str	r5, [sp, #12]
 8007e86:	f04f 0b01 	mov.w	fp, #1
 8007e8a:	4637      	mov	r7, r6
 8007e8c:	463d      	mov	r5, r7
 8007e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e92:	b10b      	cbz	r3, 8007e98 <_svfiprintf_r+0x58>
 8007e94:	2b25      	cmp	r3, #37	; 0x25
 8007e96:	d13e      	bne.n	8007f16 <_svfiprintf_r+0xd6>
 8007e98:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e9c:	d00b      	beq.n	8007eb6 <_svfiprintf_r+0x76>
 8007e9e:	4653      	mov	r3, sl
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	f7ff ff71 	bl	8007d8c <__ssputs_r>
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f000 80a4 	beq.w	8007ff8 <_svfiprintf_r+0x1b8>
 8007eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb2:	4453      	add	r3, sl
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb6:	783b      	ldrb	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 809d 	beq.w	8007ff8 <_svfiprintf_r+0x1b8>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	9307      	str	r3, [sp, #28]
 8007ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ed2:	462f      	mov	r7, r5
 8007ed4:	2205      	movs	r2, #5
 8007ed6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007eda:	4850      	ldr	r0, [pc, #320]	; (800801c <_svfiprintf_r+0x1dc>)
 8007edc:	f7f8 f990 	bl	8000200 <memchr>
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	b9d0      	cbnz	r0, 8007f1a <_svfiprintf_r+0xda>
 8007ee4:	06d9      	lsls	r1, r3, #27
 8007ee6:	bf44      	itt	mi
 8007ee8:	2220      	movmi	r2, #32
 8007eea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007eee:	071a      	lsls	r2, r3, #28
 8007ef0:	bf44      	itt	mi
 8007ef2:	222b      	movmi	r2, #43	; 0x2b
 8007ef4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ef8:	782a      	ldrb	r2, [r5, #0]
 8007efa:	2a2a      	cmp	r2, #42	; 0x2a
 8007efc:	d015      	beq.n	8007f2a <_svfiprintf_r+0xea>
 8007efe:	9a07      	ldr	r2, [sp, #28]
 8007f00:	462f      	mov	r7, r5
 8007f02:	2000      	movs	r0, #0
 8007f04:	250a      	movs	r5, #10
 8007f06:	4639      	mov	r1, r7
 8007f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0c:	3b30      	subs	r3, #48	; 0x30
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d94d      	bls.n	8007fae <_svfiprintf_r+0x16e>
 8007f12:	b1b8      	cbz	r0, 8007f44 <_svfiprintf_r+0x104>
 8007f14:	e00f      	b.n	8007f36 <_svfiprintf_r+0xf6>
 8007f16:	462f      	mov	r7, r5
 8007f18:	e7b8      	b.n	8007e8c <_svfiprintf_r+0x4c>
 8007f1a:	4a40      	ldr	r2, [pc, #256]	; (800801c <_svfiprintf_r+0x1dc>)
 8007f1c:	1a80      	subs	r0, r0, r2
 8007f1e:	fa0b f000 	lsl.w	r0, fp, r0
 8007f22:	4318      	orrs	r0, r3
 8007f24:	9004      	str	r0, [sp, #16]
 8007f26:	463d      	mov	r5, r7
 8007f28:	e7d3      	b.n	8007ed2 <_svfiprintf_r+0x92>
 8007f2a:	9a03      	ldr	r2, [sp, #12]
 8007f2c:	1d11      	adds	r1, r2, #4
 8007f2e:	6812      	ldr	r2, [r2, #0]
 8007f30:	9103      	str	r1, [sp, #12]
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	db01      	blt.n	8007f3a <_svfiprintf_r+0xfa>
 8007f36:	9207      	str	r2, [sp, #28]
 8007f38:	e004      	b.n	8007f44 <_svfiprintf_r+0x104>
 8007f3a:	4252      	negs	r2, r2
 8007f3c:	f043 0302 	orr.w	r3, r3, #2
 8007f40:	9207      	str	r2, [sp, #28]
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	783b      	ldrb	r3, [r7, #0]
 8007f46:	2b2e      	cmp	r3, #46	; 0x2e
 8007f48:	d10c      	bne.n	8007f64 <_svfiprintf_r+0x124>
 8007f4a:	787b      	ldrb	r3, [r7, #1]
 8007f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4e:	d133      	bne.n	8007fb8 <_svfiprintf_r+0x178>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9203      	str	r2, [sp, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfb8      	it	lt
 8007f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f60:	3702      	adds	r7, #2
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	4d2e      	ldr	r5, [pc, #184]	; (8008020 <_svfiprintf_r+0x1e0>)
 8007f66:	7839      	ldrb	r1, [r7, #0]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7f8 f948 	bl	8000200 <memchr>
 8007f70:	b138      	cbz	r0, 8007f82 <_svfiprintf_r+0x142>
 8007f72:	2340      	movs	r3, #64	; 0x40
 8007f74:	1b40      	subs	r0, r0, r5
 8007f76:	fa03 f000 	lsl.w	r0, r3, r0
 8007f7a:	9b04      	ldr	r3, [sp, #16]
 8007f7c:	4303      	orrs	r3, r0
 8007f7e:	3701      	adds	r7, #1
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	7839      	ldrb	r1, [r7, #0]
 8007f84:	4827      	ldr	r0, [pc, #156]	; (8008024 <_svfiprintf_r+0x1e4>)
 8007f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f8a:	2206      	movs	r2, #6
 8007f8c:	1c7e      	adds	r6, r7, #1
 8007f8e:	f7f8 f937 	bl	8000200 <memchr>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d038      	beq.n	8008008 <_svfiprintf_r+0x1c8>
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <_svfiprintf_r+0x1e8>)
 8007f98:	bb13      	cbnz	r3, 8007fe0 <_svfiprintf_r+0x1a0>
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	3307      	adds	r3, #7
 8007f9e:	f023 0307 	bic.w	r3, r3, #7
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa8:	444b      	add	r3, r9
 8007faa:	9309      	str	r3, [sp, #36]	; 0x24
 8007fac:	e76d      	b.n	8007e8a <_svfiprintf_r+0x4a>
 8007fae:	fb05 3202 	mla	r2, r5, r2, r3
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	e7a6      	b.n	8007f06 <_svfiprintf_r+0xc6>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	3701      	adds	r7, #1
 8007fbc:	9305      	str	r3, [sp, #20]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	250a      	movs	r5, #10
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc8:	3a30      	subs	r2, #48	; 0x30
 8007fca:	2a09      	cmp	r2, #9
 8007fcc:	d903      	bls.n	8007fd6 <_svfiprintf_r+0x196>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0c8      	beq.n	8007f64 <_svfiprintf_r+0x124>
 8007fd2:	9105      	str	r1, [sp, #20]
 8007fd4:	e7c6      	b.n	8007f64 <_svfiprintf_r+0x124>
 8007fd6:	fb05 2101 	mla	r1, r5, r1, r2
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4607      	mov	r7, r0
 8007fde:	e7f0      	b.n	8007fc2 <_svfiprintf_r+0x182>
 8007fe0:	ab03      	add	r3, sp, #12
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <_svfiprintf_r+0x1ec>)
 8007fe8:	a904      	add	r1, sp, #16
 8007fea:	4640      	mov	r0, r8
 8007fec:	f3af 8000 	nop.w
 8007ff0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ff4:	4681      	mov	r9, r0
 8007ff6:	d1d6      	bne.n	8007fa6 <_svfiprintf_r+0x166>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	065b      	lsls	r3, r3, #25
 8007ffc:	f53f af35 	bmi.w	8007e6a <_svfiprintf_r+0x2a>
 8008000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008002:	b01d      	add	sp, #116	; 0x74
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	ab03      	add	r3, sp, #12
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4622      	mov	r2, r4
 800800e:	4b07      	ldr	r3, [pc, #28]	; (800802c <_svfiprintf_r+0x1ec>)
 8008010:	a904      	add	r1, sp, #16
 8008012:	4640      	mov	r0, r8
 8008014:	f000 f882 	bl	800811c <_printf_i>
 8008018:	e7ea      	b.n	8007ff0 <_svfiprintf_r+0x1b0>
 800801a:	bf00      	nop
 800801c:	080084ec 	.word	0x080084ec
 8008020:	080084f2 	.word	0x080084f2
 8008024:	080084f6 	.word	0x080084f6
 8008028:	00000000 	.word	0x00000000
 800802c:	08007d8d 	.word	0x08007d8d

08008030 <_printf_common>:
 8008030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008034:	4691      	mov	r9, r2
 8008036:	461f      	mov	r7, r3
 8008038:	688a      	ldr	r2, [r1, #8]
 800803a:	690b      	ldr	r3, [r1, #16]
 800803c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008040:	4293      	cmp	r3, r2
 8008042:	bfb8      	it	lt
 8008044:	4613      	movlt	r3, r2
 8008046:	f8c9 3000 	str.w	r3, [r9]
 800804a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800804e:	4606      	mov	r6, r0
 8008050:	460c      	mov	r4, r1
 8008052:	b112      	cbz	r2, 800805a <_printf_common+0x2a>
 8008054:	3301      	adds	r3, #1
 8008056:	f8c9 3000 	str.w	r3, [r9]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	0699      	lsls	r1, r3, #26
 800805e:	bf42      	ittt	mi
 8008060:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008064:	3302      	addmi	r3, #2
 8008066:	f8c9 3000 	strmi.w	r3, [r9]
 800806a:	6825      	ldr	r5, [r4, #0]
 800806c:	f015 0506 	ands.w	r5, r5, #6
 8008070:	d107      	bne.n	8008082 <_printf_common+0x52>
 8008072:	f104 0a19 	add.w	sl, r4, #25
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	f8d9 2000 	ldr.w	r2, [r9]
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	42ab      	cmp	r3, r5
 8008080:	dc28      	bgt.n	80080d4 <_printf_common+0xa4>
 8008082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	3300      	adds	r3, #0
 800808a:	bf18      	it	ne
 800808c:	2301      	movne	r3, #1
 800808e:	0692      	lsls	r2, r2, #26
 8008090:	d42d      	bmi.n	80080ee <_printf_common+0xbe>
 8008092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008096:	4639      	mov	r1, r7
 8008098:	4630      	mov	r0, r6
 800809a:	47c0      	blx	r8
 800809c:	3001      	adds	r0, #1
 800809e:	d020      	beq.n	80080e2 <_printf_common+0xb2>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	68e5      	ldr	r5, [r4, #12]
 80080a4:	f8d9 2000 	ldr.w	r2, [r9]
 80080a8:	f003 0306 	and.w	r3, r3, #6
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	bf08      	it	eq
 80080b0:	1aad      	subeq	r5, r5, r2
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	6922      	ldr	r2, [r4, #16]
 80080b6:	bf0c      	ite	eq
 80080b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080bc:	2500      	movne	r5, #0
 80080be:	4293      	cmp	r3, r2
 80080c0:	bfc4      	itt	gt
 80080c2:	1a9b      	subgt	r3, r3, r2
 80080c4:	18ed      	addgt	r5, r5, r3
 80080c6:	f04f 0900 	mov.w	r9, #0
 80080ca:	341a      	adds	r4, #26
 80080cc:	454d      	cmp	r5, r9
 80080ce:	d11a      	bne.n	8008106 <_printf_common+0xd6>
 80080d0:	2000      	movs	r0, #0
 80080d2:	e008      	b.n	80080e6 <_printf_common+0xb6>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4652      	mov	r2, sl
 80080d8:	4639      	mov	r1, r7
 80080da:	4630      	mov	r0, r6
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d103      	bne.n	80080ea <_printf_common+0xba>
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	3501      	adds	r5, #1
 80080ec:	e7c3      	b.n	8008076 <_printf_common+0x46>
 80080ee:	18e1      	adds	r1, r4, r3
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	2030      	movs	r0, #48	; 0x30
 80080f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080f8:	4422      	add	r2, r4
 80080fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008102:	3302      	adds	r3, #2
 8008104:	e7c5      	b.n	8008092 <_printf_common+0x62>
 8008106:	2301      	movs	r3, #1
 8008108:	4622      	mov	r2, r4
 800810a:	4639      	mov	r1, r7
 800810c:	4630      	mov	r0, r6
 800810e:	47c0      	blx	r8
 8008110:	3001      	adds	r0, #1
 8008112:	d0e6      	beq.n	80080e2 <_printf_common+0xb2>
 8008114:	f109 0901 	add.w	r9, r9, #1
 8008118:	e7d8      	b.n	80080cc <_printf_common+0x9c>
	...

0800811c <_printf_i>:
 800811c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008120:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008124:	460c      	mov	r4, r1
 8008126:	7e09      	ldrb	r1, [r1, #24]
 8008128:	b085      	sub	sp, #20
 800812a:	296e      	cmp	r1, #110	; 0x6e
 800812c:	4617      	mov	r7, r2
 800812e:	4606      	mov	r6, r0
 8008130:	4698      	mov	r8, r3
 8008132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008134:	f000 80b3 	beq.w	800829e <_printf_i+0x182>
 8008138:	d822      	bhi.n	8008180 <_printf_i+0x64>
 800813a:	2963      	cmp	r1, #99	; 0x63
 800813c:	d036      	beq.n	80081ac <_printf_i+0x90>
 800813e:	d80a      	bhi.n	8008156 <_printf_i+0x3a>
 8008140:	2900      	cmp	r1, #0
 8008142:	f000 80b9 	beq.w	80082b8 <_printf_i+0x19c>
 8008146:	2958      	cmp	r1, #88	; 0x58
 8008148:	f000 8083 	beq.w	8008252 <_printf_i+0x136>
 800814c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008150:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008154:	e032      	b.n	80081bc <_printf_i+0xa0>
 8008156:	2964      	cmp	r1, #100	; 0x64
 8008158:	d001      	beq.n	800815e <_printf_i+0x42>
 800815a:	2969      	cmp	r1, #105	; 0x69
 800815c:	d1f6      	bne.n	800814c <_printf_i+0x30>
 800815e:	6820      	ldr	r0, [r4, #0]
 8008160:	6813      	ldr	r3, [r2, #0]
 8008162:	0605      	lsls	r5, r0, #24
 8008164:	f103 0104 	add.w	r1, r3, #4
 8008168:	d52a      	bpl.n	80081c0 <_printf_i+0xa4>
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	da03      	bge.n	800817a <_printf_i+0x5e>
 8008172:	222d      	movs	r2, #45	; 0x2d
 8008174:	425b      	negs	r3, r3
 8008176:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800817a:	486f      	ldr	r0, [pc, #444]	; (8008338 <_printf_i+0x21c>)
 800817c:	220a      	movs	r2, #10
 800817e:	e039      	b.n	80081f4 <_printf_i+0xd8>
 8008180:	2973      	cmp	r1, #115	; 0x73
 8008182:	f000 809d 	beq.w	80082c0 <_printf_i+0x1a4>
 8008186:	d808      	bhi.n	800819a <_printf_i+0x7e>
 8008188:	296f      	cmp	r1, #111	; 0x6f
 800818a:	d020      	beq.n	80081ce <_printf_i+0xb2>
 800818c:	2970      	cmp	r1, #112	; 0x70
 800818e:	d1dd      	bne.n	800814c <_printf_i+0x30>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	f043 0320 	orr.w	r3, r3, #32
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	e003      	b.n	80081a2 <_printf_i+0x86>
 800819a:	2975      	cmp	r1, #117	; 0x75
 800819c:	d017      	beq.n	80081ce <_printf_i+0xb2>
 800819e:	2978      	cmp	r1, #120	; 0x78
 80081a0:	d1d4      	bne.n	800814c <_printf_i+0x30>
 80081a2:	2378      	movs	r3, #120	; 0x78
 80081a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081a8:	4864      	ldr	r0, [pc, #400]	; (800833c <_printf_i+0x220>)
 80081aa:	e055      	b.n	8008258 <_printf_i+0x13c>
 80081ac:	6813      	ldr	r3, [r2, #0]
 80081ae:	1d19      	adds	r1, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6011      	str	r1, [r2, #0]
 80081b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081bc:	2301      	movs	r3, #1
 80081be:	e08c      	b.n	80082da <_printf_i+0x1be>
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6011      	str	r1, [r2, #0]
 80081c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081c8:	bf18      	it	ne
 80081ca:	b21b      	sxthne	r3, r3
 80081cc:	e7cf      	b.n	800816e <_printf_i+0x52>
 80081ce:	6813      	ldr	r3, [r2, #0]
 80081d0:	6825      	ldr	r5, [r4, #0]
 80081d2:	1d18      	adds	r0, r3, #4
 80081d4:	6010      	str	r0, [r2, #0]
 80081d6:	0628      	lsls	r0, r5, #24
 80081d8:	d501      	bpl.n	80081de <_printf_i+0xc2>
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	e002      	b.n	80081e4 <_printf_i+0xc8>
 80081de:	0668      	lsls	r0, r5, #25
 80081e0:	d5fb      	bpl.n	80081da <_printf_i+0xbe>
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	4854      	ldr	r0, [pc, #336]	; (8008338 <_printf_i+0x21c>)
 80081e6:	296f      	cmp	r1, #111	; 0x6f
 80081e8:	bf14      	ite	ne
 80081ea:	220a      	movne	r2, #10
 80081ec:	2208      	moveq	r2, #8
 80081ee:	2100      	movs	r1, #0
 80081f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081f4:	6865      	ldr	r5, [r4, #4]
 80081f6:	60a5      	str	r5, [r4, #8]
 80081f8:	2d00      	cmp	r5, #0
 80081fa:	f2c0 8095 	blt.w	8008328 <_printf_i+0x20c>
 80081fe:	6821      	ldr	r1, [r4, #0]
 8008200:	f021 0104 	bic.w	r1, r1, #4
 8008204:	6021      	str	r1, [r4, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d13d      	bne.n	8008286 <_printf_i+0x16a>
 800820a:	2d00      	cmp	r5, #0
 800820c:	f040 808e 	bne.w	800832c <_printf_i+0x210>
 8008210:	4665      	mov	r5, ip
 8008212:	2a08      	cmp	r2, #8
 8008214:	d10b      	bne.n	800822e <_printf_i+0x112>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	07db      	lsls	r3, r3, #31
 800821a:	d508      	bpl.n	800822e <_printf_i+0x112>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	6862      	ldr	r2, [r4, #4]
 8008220:	429a      	cmp	r2, r3
 8008222:	bfde      	ittt	le
 8008224:	2330      	movle	r3, #48	; 0x30
 8008226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800822a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800822e:	ebac 0305 	sub.w	r3, ip, r5
 8008232:	6123      	str	r3, [r4, #16]
 8008234:	f8cd 8000 	str.w	r8, [sp]
 8008238:	463b      	mov	r3, r7
 800823a:	aa03      	add	r2, sp, #12
 800823c:	4621      	mov	r1, r4
 800823e:	4630      	mov	r0, r6
 8008240:	f7ff fef6 	bl	8008030 <_printf_common>
 8008244:	3001      	adds	r0, #1
 8008246:	d14d      	bne.n	80082e4 <_printf_i+0x1c8>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	b005      	add	sp, #20
 800824e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008252:	4839      	ldr	r0, [pc, #228]	; (8008338 <_printf_i+0x21c>)
 8008254:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008258:	6813      	ldr	r3, [r2, #0]
 800825a:	6821      	ldr	r1, [r4, #0]
 800825c:	1d1d      	adds	r5, r3, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6015      	str	r5, [r2, #0]
 8008262:	060a      	lsls	r2, r1, #24
 8008264:	d50b      	bpl.n	800827e <_printf_i+0x162>
 8008266:	07ca      	lsls	r2, r1, #31
 8008268:	bf44      	itt	mi
 800826a:	f041 0120 	orrmi.w	r1, r1, #32
 800826e:	6021      	strmi	r1, [r4, #0]
 8008270:	b91b      	cbnz	r3, 800827a <_printf_i+0x15e>
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	f022 0220 	bic.w	r2, r2, #32
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	2210      	movs	r2, #16
 800827c:	e7b7      	b.n	80081ee <_printf_i+0xd2>
 800827e:	064d      	lsls	r5, r1, #25
 8008280:	bf48      	it	mi
 8008282:	b29b      	uxthmi	r3, r3
 8008284:	e7ef      	b.n	8008266 <_printf_i+0x14a>
 8008286:	4665      	mov	r5, ip
 8008288:	fbb3 f1f2 	udiv	r1, r3, r2
 800828c:	fb02 3311 	mls	r3, r2, r1, r3
 8008290:	5cc3      	ldrb	r3, [r0, r3]
 8008292:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008296:	460b      	mov	r3, r1
 8008298:	2900      	cmp	r1, #0
 800829a:	d1f5      	bne.n	8008288 <_printf_i+0x16c>
 800829c:	e7b9      	b.n	8008212 <_printf_i+0xf6>
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	6825      	ldr	r5, [r4, #0]
 80082a2:	6961      	ldr	r1, [r4, #20]
 80082a4:	1d18      	adds	r0, r3, #4
 80082a6:	6010      	str	r0, [r2, #0]
 80082a8:	0628      	lsls	r0, r5, #24
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	d501      	bpl.n	80082b2 <_printf_i+0x196>
 80082ae:	6019      	str	r1, [r3, #0]
 80082b0:	e002      	b.n	80082b8 <_printf_i+0x19c>
 80082b2:	066a      	lsls	r2, r5, #25
 80082b4:	d5fb      	bpl.n	80082ae <_printf_i+0x192>
 80082b6:	8019      	strh	r1, [r3, #0]
 80082b8:	2300      	movs	r3, #0
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	4665      	mov	r5, ip
 80082be:	e7b9      	b.n	8008234 <_printf_i+0x118>
 80082c0:	6813      	ldr	r3, [r2, #0]
 80082c2:	1d19      	adds	r1, r3, #4
 80082c4:	6011      	str	r1, [r2, #0]
 80082c6:	681d      	ldr	r5, [r3, #0]
 80082c8:	6862      	ldr	r2, [r4, #4]
 80082ca:	2100      	movs	r1, #0
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7f7 ff97 	bl	8000200 <memchr>
 80082d2:	b108      	cbz	r0, 80082d8 <_printf_i+0x1bc>
 80082d4:	1b40      	subs	r0, r0, r5
 80082d6:	6060      	str	r0, [r4, #4]
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	6123      	str	r3, [r4, #16]
 80082dc:	2300      	movs	r3, #0
 80082de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082e2:	e7a7      	b.n	8008234 <_printf_i+0x118>
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	462a      	mov	r2, r5
 80082e8:	4639      	mov	r1, r7
 80082ea:	4630      	mov	r0, r6
 80082ec:	47c0      	blx	r8
 80082ee:	3001      	adds	r0, #1
 80082f0:	d0aa      	beq.n	8008248 <_printf_i+0x12c>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	079b      	lsls	r3, r3, #30
 80082f6:	d413      	bmi.n	8008320 <_printf_i+0x204>
 80082f8:	68e0      	ldr	r0, [r4, #12]
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	4298      	cmp	r0, r3
 80082fe:	bfb8      	it	lt
 8008300:	4618      	movlt	r0, r3
 8008302:	e7a3      	b.n	800824c <_printf_i+0x130>
 8008304:	2301      	movs	r3, #1
 8008306:	464a      	mov	r2, r9
 8008308:	4639      	mov	r1, r7
 800830a:	4630      	mov	r0, r6
 800830c:	47c0      	blx	r8
 800830e:	3001      	adds	r0, #1
 8008310:	d09a      	beq.n	8008248 <_printf_i+0x12c>
 8008312:	3501      	adds	r5, #1
 8008314:	68e3      	ldr	r3, [r4, #12]
 8008316:	9a03      	ldr	r2, [sp, #12]
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	42ab      	cmp	r3, r5
 800831c:	dcf2      	bgt.n	8008304 <_printf_i+0x1e8>
 800831e:	e7eb      	b.n	80082f8 <_printf_i+0x1dc>
 8008320:	2500      	movs	r5, #0
 8008322:	f104 0919 	add.w	r9, r4, #25
 8008326:	e7f5      	b.n	8008314 <_printf_i+0x1f8>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1ac      	bne.n	8008286 <_printf_i+0x16a>
 800832c:	7803      	ldrb	r3, [r0, #0]
 800832e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008332:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008336:	e76c      	b.n	8008212 <_printf_i+0xf6>
 8008338:	080084fd 	.word	0x080084fd
 800833c:	0800850e 	.word	0x0800850e

08008340 <memcpy>:
 8008340:	b510      	push	{r4, lr}
 8008342:	1e43      	subs	r3, r0, #1
 8008344:	440a      	add	r2, r1
 8008346:	4291      	cmp	r1, r2
 8008348:	d100      	bne.n	800834c <memcpy+0xc>
 800834a:	bd10      	pop	{r4, pc}
 800834c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008354:	e7f7      	b.n	8008346 <memcpy+0x6>

08008356 <memmove>:
 8008356:	4288      	cmp	r0, r1
 8008358:	b510      	push	{r4, lr}
 800835a:	eb01 0302 	add.w	r3, r1, r2
 800835e:	d807      	bhi.n	8008370 <memmove+0x1a>
 8008360:	1e42      	subs	r2, r0, #1
 8008362:	4299      	cmp	r1, r3
 8008364:	d00a      	beq.n	800837c <memmove+0x26>
 8008366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800836e:	e7f8      	b.n	8008362 <memmove+0xc>
 8008370:	4283      	cmp	r3, r0
 8008372:	d9f5      	bls.n	8008360 <memmove+0xa>
 8008374:	1881      	adds	r1, r0, r2
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	42d3      	cmn	r3, r2
 800837a:	d100      	bne.n	800837e <memmove+0x28>
 800837c:	bd10      	pop	{r4, pc}
 800837e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008382:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008386:	e7f7      	b.n	8008378 <memmove+0x22>

08008388 <_realloc_r>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	4607      	mov	r7, r0
 800838c:	4614      	mov	r4, r2
 800838e:	460e      	mov	r6, r1
 8008390:	b921      	cbnz	r1, 800839c <_realloc_r+0x14>
 8008392:	4611      	mov	r1, r2
 8008394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008398:	f7ff bc6c 	b.w	8007c74 <_malloc_r>
 800839c:	b922      	cbnz	r2, 80083a8 <_realloc_r+0x20>
 800839e:	f7ff fc1b 	bl	8007bd8 <_free_r>
 80083a2:	4625      	mov	r5, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a8:	f000 f814 	bl	80083d4 <_malloc_usable_size_r>
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	d20f      	bcs.n	80083d0 <_realloc_r+0x48>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4638      	mov	r0, r7
 80083b4:	f7ff fc5e 	bl	8007c74 <_malloc_r>
 80083b8:	4605      	mov	r5, r0
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0f2      	beq.n	80083a4 <_realloc_r+0x1c>
 80083be:	4631      	mov	r1, r6
 80083c0:	4622      	mov	r2, r4
 80083c2:	f7ff ffbd 	bl	8008340 <memcpy>
 80083c6:	4631      	mov	r1, r6
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff fc05 	bl	8007bd8 <_free_r>
 80083ce:	e7e9      	b.n	80083a4 <_realloc_r+0x1c>
 80083d0:	4635      	mov	r5, r6
 80083d2:	e7e7      	b.n	80083a4 <_realloc_r+0x1c>

080083d4 <_malloc_usable_size_r>:
 80083d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d8:	1f18      	subs	r0, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bfbc      	itt	lt
 80083de:	580b      	ldrlt	r3, [r1, r0]
 80083e0:	18c0      	addlt	r0, r0, r3
 80083e2:	4770      	bx	lr

080083e4 <_init>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr

080083f0 <_fini>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	bf00      	nop
 80083f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f6:	bc08      	pop	{r3}
 80083f8:	469e      	mov	lr, r3
 80083fa:	4770      	bx	lr

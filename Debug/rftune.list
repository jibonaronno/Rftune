
rftune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008590  08008590  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008590  08008590  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008590  08008590  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  200001f4  0800878c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  0800878c  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d016  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a06  00000000  00000000  0003d23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  00040c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  00042028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ec0c  00000000  00000000  00043268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132ed  00000000  00000000  00071e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001035fe  00000000  00000000  00085161  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018875f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000552c  00000000  00000000  001887dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008470 	.word	0x08008470

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08008470 	.word	0x08008470

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_Z8delay_usmP17TIM_HandleTypeDef>:

#include "main.h"
#include "delay.h"

void delay_us (uint32_t us, TIM_HandleTypeDef *htim)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2200      	movs	r2, #0
 80002b0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	bf8c      	ite	hi
 80002be:	2301      	movhi	r3, #1
 80002c0:	2300      	movls	r3, #0
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d000      	beq.n	80002ca <_Z8delay_usmP17TIM_HandleTypeDef+0x2a>
 80002c8:	e7f3      	b.n	80002b2 <_Z8delay_usmP17TIM_HandleTypeDef+0x12>
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <_Z8usbPrintPKc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void usbPrint(const char *s)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t *)s, strlen(s));
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff86 	bl	80001f0 <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	4619      	mov	r1, r3
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f006 ff20 	bl	8007130 <CDC_Transmit_FS>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0b2      	sub	sp, #200	; 0xc8
 80002fc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//uint8_t cdc_buf[] = "Sample Text From CDC Buffer";
	char ch_buf1[100];
	int local_idx = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000304:	f000 fd5b 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000308:	f000 f8c4 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030c:	f000 f9c0 	bl	8000690 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000310:	f000 f962 	bl	80005d8 <_ZL12MX_TIM2_Initv>
  MX_USB_DEVICE_Init();
 8000314:	f006 fe4e 	bl	8006fb4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MXEX_GPIO_INIT();
 8000318:	f000 fa2a 	bl	8000770 <_ZL14MXEX_GPIO_INITv>
  HAL_TIM_Base_Start(&htim2);
 800031c:	4856      	ldr	r0, [pc, #344]	; (8000478 <main+0x180>)
 800031e:	f003 fcf5 	bl	8003d0c <HAL_TIM_Base_Start>

  //RFFC(GPIO_TypeDef *port_sclk, uint16_t pin_sclk, GPIO_TypeDef *port_sdata, uint16_t pin_sdata, GPIO_TypeDef *port_resetx, uint16_t pin_resetx, GPIO_TypeDef *port_enx, uint16_t pin_enx);
  RFFC rffc(GPIOD, GPIO_PIN_1, GPIOD, GPIO_PIN_4, GPIOD, GPIO_PIN_2, GPIOD, GPIO_PIN_0);
 8000322:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000326:	2301      	movs	r3, #1
 8000328:	9304      	str	r3, [sp, #16]
 800032a:	4b54      	ldr	r3, [pc, #336]	; (800047c <main+0x184>)
 800032c:	9303      	str	r3, [sp, #12]
 800032e:	2304      	movs	r3, #4
 8000330:	9302      	str	r3, [sp, #8]
 8000332:	4b52      	ldr	r3, [pc, #328]	; (800047c <main+0x184>)
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2310      	movs	r3, #16
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	4b50      	ldr	r3, [pc, #320]	; (800047c <main+0x184>)
 800033c:	2202      	movs	r2, #2
 800033e:	494f      	ldr	r1, [pc, #316]	; (800047c <main+0x184>)
 8000340:	f000 fa68 	bl	8000814 <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>

  RFFC r2fc(GPIOB, GPIO_PIN_3, GPIOB, GPIO_PIN_5, GPIOG, GPIO_PIN_14, GPIOG, GPIO_PIN_15);
 8000344:	1d38      	adds	r0, r7, #4
 8000346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800034a:	9304      	str	r3, [sp, #16]
 800034c:	4b4c      	ldr	r3, [pc, #304]	; (8000480 <main+0x188>)
 800034e:	9303      	str	r3, [sp, #12]
 8000350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	4b4a      	ldr	r3, [pc, #296]	; (8000480 <main+0x188>)
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2320      	movs	r3, #32
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	4b49      	ldr	r3, [pc, #292]	; (8000484 <main+0x18c>)
 8000360:	2208      	movs	r2, #8
 8000362:	4948      	ldr	r1, [pc, #288]	; (8000484 <main+0x18c>)
 8000364:	f000 fa56 	bl	8000814 <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);

  uint16_t SDI_CTRL = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

  rffc.resetLow();
 800036e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000372:	4618      	mov	r0, r3
 8000374:	f000 fa85 	bl	8000882 <_ZN4RFFC8resetLowEv>
  usbPrint("Reseting RFFC. Wait 10 Second");
 8000378:	4843      	ldr	r0, [pc, #268]	; (8000488 <main+0x190>)
 800037a:	f7ff ffac 	bl	80002d6 <_Z8usbPrintPKc>
  HAL_Delay(10000);
 800037e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000382:	f000 fd91 	bl	8000ea8 <HAL_Delay>
  rffc.resetHigh();
 8000386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fa69 	bl	8000862 <_ZN4RFFC9resetHighEv>

  SDI_CTRL = rffc.read(0x15);
 8000390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000394:	2115      	movs	r1, #21
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fa84 	bl	80008a4 <_ZN4RFFC4readEh>
 800039c:	4603      	mov	r3, r0
 800039e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  sprintf(ch_buf1,"REG(15) : %03d\r\n", SDI_CTRL);
 80003a2:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80003a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003aa:	4938      	ldr	r1, [pc, #224]	; (800048c <main+0x194>)
 80003ac:	4618      	mov	r0, r3
 80003ae:	f007 fd11 	bl	8007dd4 <siprintf>
  for(local_idx=0;local_idx<16;local_idx++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80003b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80003bc:	2b0f      	cmp	r3, #15
 80003be:	dc27      	bgt.n	8000410 <main+0x118>
  {
	  SDI_CTRL = rffc.read(local_idx);
 80003c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ca:	4611      	mov	r1, r2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 fa69 	bl	80008a4 <_ZN4RFFC4readEh>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	  sprintf(ch_buf1,"REG(0X%04X) : 0X%04X\r\n", local_idx,  SDI_CTRL);
 80003d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80003dc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80003e4:	492a      	ldr	r1, [pc, #168]	; (8000490 <main+0x198>)
 80003e6:	f007 fcf5 	bl	8007dd4 <siprintf>
	  CDC_Transmit_FS((uint8_t *)ch_buf1, strlen(ch_buf1));
 80003ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff fefe 	bl	80001f0 <strlen>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fc:	4611      	mov	r1, r2
 80003fe:	4618      	mov	r0, r3
 8000400:	f006 fe96 	bl	8007130 <CDC_Transmit_FS>
  for(local_idx=0;local_idx<16;local_idx++)
 8000404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000408:	3301      	adds	r3, #1
 800040a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800040e:	e7d3      	b.n	80003b8 <main+0xc0>
	  delay_us(10000, &htim2);
	  */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(5000);
 8000410:	f241 3088 	movw	r0, #5000	; 0x1388
 8000414:	f000 fd48 	bl	8000ea8 <HAL_Delay>
	for(local_idx=0;local_idx<16;local_idx++)
 8000418:	2300      	movs	r3, #0
 800041a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800041e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000422:	2b0f      	cmp	r3, #15
 8000424:	dcf4      	bgt.n	8000410 <main+0x118>
	{
	  SDI_CTRL = rffc.read(local_idx);
 8000426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800042a:	b2da      	uxtb	r2, r3
 800042c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000430:	4611      	mov	r1, r2
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fa36 	bl	80008a4 <_ZN4RFFC4readEh>
 8000438:	4603      	mov	r3, r0
 800043a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	  sprintf(ch_buf1,"REG(0X%04X) : 0X%04X\r\n", local_idx,  SDI_CTRL);
 800043e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000442:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000446:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800044a:	4911      	ldr	r1, [pc, #68]	; (8000490 <main+0x198>)
 800044c:	f007 fcc2 	bl	8007dd4 <siprintf>
	  CDC_Transmit_FS((uint8_t *)ch_buf1, strlen(ch_buf1));
 8000450:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fecb 	bl	80001f0 <strlen>
 800045a:	4603      	mov	r3, r0
 800045c:	b29a      	uxth	r2, r3
 800045e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f006 fe63 	bl	8007130 <CDC_Transmit_FS>
	for(local_idx=0;local_idx<16;local_idx++)
 800046a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800046e:	3301      	adds	r3, #1
 8000470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000474:	e7d3      	b.n	800041e <main+0x126>
 8000476:	bf00      	nop
 8000478:	20000210 	.word	0x20000210
 800047c:	48000c00 	.word	0x48000c00
 8000480:	48001800 	.word	0x48001800
 8000484:	48000400 	.word	0x48000400
 8000488:	08008488 	.word	0x08008488
 800048c:	080084a8 	.word	0x080084a8
 8000490:	080084bc 	.word	0x080084bc

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b0ba      	sub	sp, #232	; 0xe8
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800049e:	2244      	movs	r2, #68	; 0x44
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f007 fbd6 	bl	8007c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	228c      	movs	r2, #140	; 0x8c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 fbc8 	bl	8007c54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80004c4:	2314      	movs	r3, #20
 80004c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80004ca:	2300      	movs	r3, #0
 80004cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004dc:	2360      	movs	r3, #96	; 0x60
 80004de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004e8:	2301      	movs	r3, #1
 80004ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 80004f4:	2328      	movs	r3, #40	; 0x28
 80004f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000500:	2302      	movs	r3, #2
 8000502:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000506:	2302      	movs	r3, #2
 8000508:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000510:	4618      	mov	r0, r3
 8000512:	f002 f8d3 	bl	80026bc <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf14      	ite	ne
 800051c:	2301      	movne	r3, #1
 800051e:	2300      	moveq	r3, #0
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000526:	f000 f971 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052a:	230f      	movs	r3, #15
 800052c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000530:	2303      	movs	r3, #3
 8000532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000548:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800054c:	2104      	movs	r1, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fcda 	bl	8002f08 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000564:	f000 f952 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800056e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000572:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000574:	2301      	movs	r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800057c:	2318      	movs	r3, #24
 800057e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800058c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000590:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fe8f 	bl	80032b8 <HAL_RCCEx_PeriphCLKConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80005aa:	f000 f92f 	bl	800080c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b2:	f002 f81d 	bl	80025f0 <HAL_PWREx_ControlVoltageScaling>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x136>
  {
    Error_Handler();
 80005c6:	f000 f921 	bl	800080c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005ca:	f003 f96d 	bl	80038a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ce:	bf00      	nop
 80005d0:	37e8      	adds	r7, #232	; 0xe8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 80005f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 8000600:	2250      	movs	r2, #80	; 0x50
 8000602:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 800060c:	f04f 32ff 	mov.w	r2, #4294967295
 8000610:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061e:	481b      	ldr	r0, [pc, #108]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 8000620:	f003 fb1c 	bl	8003c5c <HAL_TIM_Base_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000634:	f000 f8ea 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 8000646:	f003 fbc9 	bl	8003ddc <HAL_TIM_ConfigClockSource>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800065a:	f000 f8d7 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <_ZL12MX_TIM2_Initv+0xb4>)
 800066c:	f003 fda4 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8000680:	f000 f8c4 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000210 	.word	0x20000210

08000690 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a22      	ldr	r2, [pc, #136]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <_ZL12MX_GPIO_Initv+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <_ZL12MX_GPIO_Initv+0xd8>)
 800070e:	f000 fea9 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_ON_GPIO_Port, LDO_ON_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000718:	4814      	ldr	r0, [pc, #80]	; (800076c <_ZL12MX_GPIO_Initv+0xdc>)
 800071a:	f000 fea3 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800071e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	480c      	ldr	r0, [pc, #48]	; (8000768 <_ZL12MX_GPIO_Initv+0xd8>)
 8000738:	f000 fcea 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_ON_Pin */
  GPIO_InitStruct.Pin = LDO_ON_Pin;
 800073c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDO_ON_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <_ZL12MX_GPIO_Initv+0xdc>)
 8000756:	f000 fcdb 	bl	8001110 <HAL_GPIO_Init>

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400
 800076c:	48000c00 	.word	0x48000c00

08000770 <_ZL14MXEX_GPIO_INITv>:

/* USER CODE BEGIN 4 */

static void MXEX_GPIO_INIT(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);   //ENX - NORMALLY HIGH. ACTIVE LOW.
 8000784:	2201      	movs	r2, #1
 8000786:	2101      	movs	r1, #1
 8000788:	481e      	ldr	r0, [pc, #120]	; (8000804 <_ZL14MXEX_GPIO_INITv+0x94>)
 800078a:	f000 fe6b 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET); //SCLK
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	481c      	ldr	r0, [pc, #112]	; (8000804 <_ZL14MXEX_GPIO_INITv+0x94>)
 8000794:	f000 fe66 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //RESETX
 8000798:	2200      	movs	r2, #0
 800079a:	2104      	movs	r1, #4
 800079c:	4819      	ldr	r0, [pc, #100]	; (8000804 <_ZL14MXEX_GPIO_INITv+0x94>)
 800079e:	f000 fe61 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); //SDATA
 80007a2:	2200      	movs	r2, #0
 80007a4:	2110      	movs	r1, #16
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <_ZL14MXEX_GPIO_INITv+0x94>)
 80007a8:	f000 fe5c 	bl	8001464 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80007ac:	2317      	movs	r3, #23
 80007ae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <_ZL14MXEX_GPIO_INITv+0x94>)
 80007c2:	f000 fca5 	bl	8001110 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 80007c6:	2328      	movs	r3, #40	; 0x28
 80007c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <_ZL14MXEX_GPIO_INITv+0x94>)
 80007dc:	f000 fc98 	bl	8001110 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 80007e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <_ZL14MXEX_GPIO_INITv+0x98>)
 80007f8:	f000 fc8a 	bl	8001110 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	48000c00 	.word	0x48000c00
 8000808:	48001800 	.word	0x48001800

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000812:	e7fe      	b.n	8000812 <Error_Handler+0x6>

08000814 <_ZN4RFFCC1EP12GPIO_TypeDeftS1_tS1_tS1_t>:
						delay_us(RFFC5071_FSCL, &htim2);\
						HAL_GPIO_WritePin(Port_sclk, Pin_sclk, GPIO_PIN_RESET)

extern TIM_HandleTypeDef htim2;

RFFC::RFFC(GPIO_TypeDef *port_sclk, uint16_t pin_sclk, GPIO_TypeDef *port_sdata, uint16_t pin_sdata, GPIO_TypeDef *port_resetx, uint16_t pin_resetx, GPIO_TypeDef *port_enx, uint16_t pin_enx)
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4613      	mov	r3, r2
 8000822:	80fb      	strh	r3, [r7, #6]
{
	Port_sclk = port_sclk;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	601a      	str	r2, [r3, #0]
	Pin_sclk = pin_sclk;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	809a      	strh	r2, [r3, #4]
	Port_sdata = port_sdata;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	609a      	str	r2, [r3, #8]
	Pin_sdata = pin_sdata;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	8b3a      	ldrh	r2, [r7, #24]
 800083a:	819a      	strh	r2, [r3, #12]
	Port_resetx = port_resetx;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	611a      	str	r2, [r3, #16]
	Pin_resetx = pin_resetx;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	8c3a      	ldrh	r2, [r7, #32]
 8000846:	829a      	strh	r2, [r3, #20]
	Port_enx = port_enx;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800084c:	619a      	str	r2, [r3, #24]
	Pin_enx = pin_enx;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000852:	839a      	strh	r2, [r3, #28]
}
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_ZN4RFFC9resetHighEv>:

void RFFC::resetHigh()
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port_resetx, Pin_resetx, GPIO_PIN_SET);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6918      	ldr	r0, [r3, #16]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	2201      	movs	r2, #1
 8000874:	4619      	mov	r1, r3
 8000876:	f000 fdf5 	bl	8001464 <HAL_GPIO_WritePin>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_ZN4RFFC8resetLowEv>:

void RFFC::resetLow()
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port_resetx, Pin_resetx, GPIO_PIN_RESET);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6918      	ldr	r0, [r3, #16]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	8a9b      	ldrh	r3, [r3, #20]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f000 fde5 	bl	8001464 <HAL_GPIO_WritePin>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <_ZN4RFFC4readEh>:
	RFFC5071_SCL();
	*/
}

uint16_t RFFC::read(uint8_t reg)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
	uint8_t rmask = 0x80;
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	73bb      	strb	r3, [r7, #14]
	uint16_t vmask = 0x8000;
 80008b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008bc:	81bb      	strh	r3, [r7, #12]
	uint16_t val = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	817b      	strh	r3, [r7, #10]
	uint8_t ireg = 0x80 | reg;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c8:	727b      	strb	r3, [r7, #9]
	 *
	 *
	 */

	//two clocks before enx goes low, undocumented
	RFFC5071_SCL();
 80008ca:	49a0      	ldr	r1, [pc, #640]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 80008cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d0:	f7ff fce6 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	889b      	ldrh	r3, [r3, #4]
 80008dc:	2201      	movs	r2, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	f000 fdc0 	bl	8001464 <HAL_GPIO_WritePin>
 80008e4:	4999      	ldr	r1, [pc, #612]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f7ff fcd9 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	f000 fdb3 	bl	8001464 <HAL_GPIO_WritePin>
	RFFC5071_SCL();
 80008fe:	4993      	ldr	r1, [pc, #588]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000904:	f7ff fccc 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	889b      	ldrh	r3, [r3, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	4619      	mov	r1, r3
 8000914:	f000 fda6 	bl	8001464 <HAL_GPIO_WritePin>
 8000918:	498c      	ldr	r1, [pc, #560]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f7ff fcbf 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6818      	ldr	r0, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	f000 fd99 	bl	8001464 <HAL_GPIO_WritePin>

	//gpio_set_pin_low(chip->enx);
	HAL_GPIO_WritePin(Port_enx, Pin_enx, GPIO_PIN_RESET);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6998      	ldr	r0, [r3, #24]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	8b9b      	ldrh	r3, [r3, #28]
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	f000 fd91 	bl	8001464 <HAL_GPIO_WritePin>

	//clock out the undefined bit, set sda = 0
	//gpio_set_pin_low(chip->sda);
	HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_SET);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6898      	ldr	r0, [r3, #8]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	f000 fd89 	bl	8001464 <HAL_GPIO_WritePin>

	RFFC5071_SCL();
 8000952:	497e      	ldr	r1, [pc, #504]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000958:	f7ff fca2 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	889b      	ldrh	r3, [r3, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	f000 fd7c 	bl	8001464 <HAL_GPIO_WritePin>
 800096c:	4977      	ldr	r1, [pc, #476]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 800096e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000972:	f7ff fc95 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	889b      	ldrh	r3, [r3, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	f000 fd6f 	bl	8001464 <HAL_GPIO_WritePin>

	//ireg is reg with R bit set
	for(i=0; i<8; i++)
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d837      	bhi.n	8000a00 <_ZN4RFFC4readEh+0x15c>
	{
		if(rmask & ireg)
 8000990:	7bba      	ldrb	r2, [r7, #14]
 8000992:	7a7b      	ldrb	r3, [r7, #9]
 8000994:	4013      	ands	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <_ZN4RFFC4readEh+0x10a>
		{
			//gpio_set_pin_high(chip->sda);
			HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_SET);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6898      	ldr	r0, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	899b      	ldrh	r3, [r3, #12]
 80009a4:	2201      	movs	r2, #1
 80009a6:	4619      	mov	r1, r3
 80009a8:	f000 fd5c 	bl	8001464 <HAL_GPIO_WritePin>
 80009ac:	e007      	b.n	80009be <_ZN4RFFC4readEh+0x11a>
		}
		else
		{
			//gpio_set_pin_low(chip->sda);
			HAL_GPIO_WritePin(Port_sdata, Pin_sdata, GPIO_PIN_RESET);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6898      	ldr	r0, [r3, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	899b      	ldrh	r3, [r3, #12]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 fd53 	bl	8001464 <HAL_GPIO_WritePin>
		}
		RFFC5071_SCL();
 80009be:	4963      	ldr	r1, [pc, #396]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 80009c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c4:	f7ff fc6c 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	889b      	ldrh	r3, [r3, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	f000 fd46 	bl	8001464 <HAL_GPIO_WritePin>
 80009d8:	495c      	ldr	r1, [pc, #368]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 80009da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009de:	f7ff fc5f 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	889b      	ldrh	r3, [r3, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	f000 fd39 	bl	8001464 <HAL_GPIO_WritePin>
		rmask >>= 1;
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	105b      	asrs	r3, r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
	for(i=0; i<8; i++)
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	3301      	adds	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	e7c4      	b.n	800098a <_ZN4RFFC4readEh+0xe6>
	}

	//1.5 clocks delay
	RFFC5071_SCL();
 8000a00:	4952      	ldr	r1, [pc, #328]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a06:	f7ff fc4b 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	889b      	ldrh	r3, [r3, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	f000 fd25 	bl	8001464 <HAL_GPIO_WritePin>
 8000a1a:	494c      	ldr	r1, [pc, #304]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a20:	f7ff fc3e 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	889b      	ldrh	r3, [r3, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f000 fd18 	bl	8001464 <HAL_GPIO_WritePin>
	//set SDA to input for a while
	//ioport_set_pin_dir(chip->sda,IOPORT_DIR_INPUT);
	changePinDirection(Port_sdata, Pin_sdata, 0); //0 for input
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6899      	ldr	r1, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	899a      	ldrh	r2, [r3, #12]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f886 	bl	8000b50 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>
	//now the value
	for(i=0; i<16; i++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d834      	bhi.n	8000ab8 <_ZN4RFFC4readEh+0x214>
	{
		RFFC5071_SCL();
 8000a4e:	493f      	ldr	r1, [pc, #252]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f7ff fc24 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	889b      	ldrh	r3, [r3, #4]
 8000a60:	2201      	movs	r2, #1
 8000a62:	4619      	mov	r1, r3
 8000a64:	f000 fcfe 	bl	8001464 <HAL_GPIO_WritePin>
 8000a68:	4938      	ldr	r1, [pc, #224]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f7ff fc17 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	889b      	ldrh	r3, [r3, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f000 fcf1 	bl	8001464 <HAL_GPIO_WritePin>
		//if(gpio_pin_is_high(chip->sda))
		if(HAL_GPIO_ReadPin(Port_sdata, Pin_sdata) == GPIO_PIN_SET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	899b      	ldrh	r3, [r3, #12]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	f000 fcd1 	bl	8001434 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <_ZN4RFFC4readEh+0x206>
		{
			val |= vmask;
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	89bb      	ldrh	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	817b      	strh	r3, [r7, #10]
		}
		vmask >>= 1;
 8000aaa:	89bb      	ldrh	r3, [r7, #12]
 8000aac:	105b      	asrs	r3, r3, #1
 8000aae:	81bb      	strh	r3, [r7, #12]
	for(i=0; i<16; i++)
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e7c7      	b.n	8000a48 <_ZN4RFFC4readEh+0x1a4>
	}

	HAL_GPIO_WritePin(Port_enx, Pin_enx, GPIO_PIN_SET);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6998      	ldr	r0, [r3, #24]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	8b9b      	ldrh	r3, [r3, #28]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f000 fcce 	bl	8001464 <HAL_GPIO_WritePin>
	//pull enx high again
	RFFC5071_SCL();
 8000ac8:	4920      	ldr	r1, [pc, #128]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ace:	f7ff fbe7 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	f000 fcc1 	bl	8001464 <HAL_GPIO_WritePin>
 8000ae2:	491a      	ldr	r1, [pc, #104]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae8:	f7ff fbda 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	889b      	ldrh	r3, [r3, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	f000 fcb4 	bl	8001464 <HAL_GPIO_WritePin>
	RFFC5071_SCL();
 8000afc:	4913      	ldr	r1, [pc, #76]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b02:	f7ff fbcd 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	889b      	ldrh	r3, [r3, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	f000 fca7 	bl	8001464 <HAL_GPIO_WritePin>
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <_ZN4RFFC4readEh+0x2a8>)
 8000b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1c:	f7ff fbc0 	bl	80002a0 <_Z8delay_usmP17TIM_HandleTypeDef>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	889b      	ldrh	r3, [r3, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f000 fc9a 	bl	8001464 <HAL_GPIO_WritePin>

	changePinDirection(Port_sdata, Pin_sdata, 1); //1 for output
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6899      	ldr	r1, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	899a      	ldrh	r2, [r3, #12]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f808 	bl	8000b50 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>

	return val;
 8000b40:	897b      	ldrh	r3, [r7, #10]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000210 	.word	0x20000210

08000b50 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt>:

//#define PIN_MODE_OUTPUT	1
//#define PIN_MODE_INPUT	0
void RFFC::changePinDirection(GPIO_TypeDef *port, uint16_t pin, uint16_t dir)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	460b      	mov	r3, r1
 8000b60:	80fb      	strh	r3, [r7, #6]
 8000b62:	4613      	mov	r3, r2
 8000b64:	80bb      	strh	r3, [r7, #4]
	if(dir == PIN_MODE_OUTPUT)
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d109      	bne.n	8000b80 <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x30>
	{
		port->MODER |= (0b01<<pin); // GPIO_MODER_MODE8_0;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	601a      	str	r2, [r3, #0]
	}
	else if(dir == PIN_MODE_INPUT)
	{
		port->MODER &= ~(0b11<<pin);
	}
}
 8000b7e:	e00c      	b.n	8000b9a <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x4a>
	else if(dir == PIN_MODE_INPUT)
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d109      	bne.n	8000b9a <_ZN4RFFC18changePinDirectionEP12GPIO_TypeDeftt+0x4a>
		port->MODER &= ~(0b11<<pin);
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	88fa      	ldrh	r2, [r7, #6]
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	43d2      	mvns	r2, r2
 8000b94:	401a      	ands	r2, r3
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c00:	d10b      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_TIM_Base_MspInit+0x38>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_TIM_Base_MspInit+0x38>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_TIM_Base_MspInit+0x38>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8f6 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <OTG_FS_IRQHandler+0x10>)
 8000c86:	f000 fd58 	bl	800173a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20001740 	.word	0x20001740

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f006 ff8c 	bl	8007be0 <__errno>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	230c      	movs	r3, #12
 8000ccc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20050000 	.word	0x20050000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	2000025c 	.word	0x2000025c
 8000cfc:	20001b50 	.word	0x20001b50

08000d00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <SystemInit+0x64>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <SystemInit+0x64>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <SystemInit+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <SystemInit+0x68>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <SystemInit+0x68>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <SystemInit+0x68>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <SystemInit+0x68>)
 8000d2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <SystemInit+0x68>)
 8000d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SystemInit+0x68>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <SystemInit+0x68>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <SystemInit+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SystemInit+0x64>)
 8000d52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d56:	609a      	str	r2, [r3, #8]
#endif
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	40021000 	.word	0x40021000

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffc6 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
	ldr	r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <LoopForever+0x16>)
	cmp	r2, r3
 8000d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f006 ff27 	bl	8007bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff faab 	bl	80002f8 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000da8:	08008598 	.word	0x08008598
	ldr	r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000db0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000db4:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000db8:	20001b4c 	.word	0x20001b4c

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>

08000dbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f95f 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f80e 	bl	8000df0 <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e001      	b.n	8000de4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de0:	f7ff fee2 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_InitTick+0x6c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d023      	beq.n	8000e4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_InitTick+0x70>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f96b 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10f      	bne.n	8000e46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d809      	bhi.n	8000e40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f935 	bl	80010a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_InitTick+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e004      	b.n	8000e50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e001      	b.n	8000e50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	2000026c 	.word	0x2000026c

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000026c 	.word	0x2000026c

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_Delay+0x40>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff29 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff3e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff31 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e166      	b.n	80013ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8158 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d00b      	beq.n	8001158 <HAL_GPIO_Init+0x48>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114c:	2b11      	cmp	r3, #17
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b12      	cmp	r3, #18
 8001156:	d130      	bne.n	80011ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118e:	2201      	movs	r2, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 0201 	and.w	r2, r3, #1
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0xea>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b2 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_GPIO_Init+0x2fc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6613      	str	r3, [r2, #96]	; 0x60
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x300>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c6:	d02b      	beq.n	8001320 <HAL_GPIO_Init+0x210>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x304>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d025      	beq.n	800131c <HAL_GPIO_Init+0x20c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x308>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01f      	beq.n	8001318 <HAL_GPIO_Init+0x208>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_GPIO_Init+0x204>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x200>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1fc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x31c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1f4>
 8001300:	2307      	movs	r3, #7
 8001302:	e00e      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001304:	2308      	movs	r3, #8
 8001306:	e00c      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001308:	2306      	movs	r3, #6
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800130c:	2305      	movs	r3, #5
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_GPIO_Init+0x300>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x320>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae91 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	48001800 	.word	0x48001800
 800142c:	48001c00 	.word	0x48001c00
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b08f      	sub	sp, #60	; 0x3c
 8001498:	af0a      	add	r7, sp, #40	; 0x28
 800149a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e116      	b.n	80016d4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d106      	bne.n	80014c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f005 ff8d 	bl	80073e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 ffee 	bl	80044c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	687e      	ldr	r6, [r7, #4]
 80014f2:	466d      	mov	r5, sp
 80014f4:	f106 0410 	add.w	r4, r6, #16
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001504:	e885 0003 	stmia.w	r5, {r0, r1}
 8001508:	1d33      	adds	r3, r6, #4
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f002 fedb 	bl	80042c8 <USB_CoreInit>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0d7      	b.n	80016d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f002 ffdc 	bl	80044e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e04a      	b.n	80015cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	333d      	adds	r3, #61	; 0x3d
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	333c      	adds	r3, #60	; 0x3c
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	b298      	uxth	r0, r3
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3342      	adds	r3, #66	; 0x42
 8001572:	4602      	mov	r2, r0
 8001574:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	333f      	adds	r3, #63	; 0x3f
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3344      	adds	r3, #68	; 0x44
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3348      	adds	r3, #72	; 0x48
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3350      	adds	r3, #80	; 0x50
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3af      	bcc.n	8001536 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e044      	b.n	8001666 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	3301      	adds	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3b5      	bcc.n	80015dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	687e      	ldr	r6, [r7, #4]
 8001678:	466d      	mov	r5, sp
 800167a:	f106 0410 	add.w	r4, r6, #16
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168a:	e885 0003 	stmia.w	r5, {r0, r1}
 800168e:	1d33      	adds	r3, r6, #4
 8001690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f002 ff52 	bl	800453c <USB_DevInit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2202      	movs	r2, #2
 80016a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e014      	b.n	80016d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 ff62 	bl	800258c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fed4 	bl	800547a <USB_DevDisconnect>

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_PCD_Start+0x1c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e01c      	b.n	8001732 <HAL_PCD_Start+0x56>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fec3 	bl	80044a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fe88 	bl	8005438 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800173a:	b590      	push	{r4, r7, lr}
 800173c:	b08d      	sub	sp, #52	; 0x34
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 ff46 	bl	80055e2 <USB_GetMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 838f 	bne.w	8001e7c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f003 feaa 	bl	80054bc <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8385 	beq.w	8001e7a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fea1 	bl	80054bc <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b02      	cmp	r3, #2
 8001782:	d107      	bne.n	8001794 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f002 0202 	and.w	r2, r2, #2
 8001792:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fe8f 	bl	80054bc <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d161      	bne.n	800186c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0210 	bic.w	r2, r2, #16
 80017b6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f003 020f 	and.w	r2, r3, #15
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	3304      	adds	r3, #4
 80017d6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	0c5b      	lsrs	r3, r3, #17
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d124      	bne.n	800182e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d035      	beq.n	800185c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	6a38      	ldr	r0, [r7, #32]
 8001804:	f003 fcf5 	bl	80051f2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001814:	441a      	add	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001826:	441a      	add	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	e016      	b.n	800185c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	0c5b      	lsrs	r3, r3, #17
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	2b06      	cmp	r3, #6
 8001838:	d110      	bne.n	800185c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001840:	2208      	movs	r2, #8
 8001842:	4619      	mov	r1, r3
 8001844:	6a38      	ldr	r0, [r7, #32]
 8001846:	f003 fcd4 	bl	80051f2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001856:	441a      	add	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0210 	orr.w	r2, r2, #16
 800186a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fe23 	bl	80054bc <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001880:	d16e      	bne.n	8001960 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fe29 	bl	80054e2 <USB_ReadDevAllOutEpInterrupt>
 8001890:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001892:	e062      	b.n	800195a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d057      	beq.n	800194e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fe4e 	bl	800554a <USB_ReadDevOutEPInterrupt>
 80018ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c6:	461a      	mov	r2, r3
 80018c8:	2301      	movs	r3, #1
 80018ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fd82 	bl	80023d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00c      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ea:	461a      	mov	r2, r3
 80018ec:	2308      	movs	r3, #8
 80018ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fdbe 	bl	8002474 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190e:	461a      	mov	r2, r3
 8001910:	2310      	movs	r3, #16
 8001912:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192a:	461a      	mov	r2, r3
 800192c:	2320      	movs	r3, #32
 800192e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001946:	461a      	mov	r2, r3
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d199      	bne.n	8001894 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fda9 	bl	80054bc <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001974:	f040 8087 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fdca 	bl	8005516 <USB_ReadDevAllInEpInterrupt>
 8001982:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001988:	e07a      	b.n	8001a80 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d06f      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fdf1 	bl	8005586 <USB_ReadDevInEPInterrupt>
 80019a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	2201      	movs	r2, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69f9      	ldr	r1, [r7, #28]
 80019cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019d0:	4013      	ands	r3, r2
 80019d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e0:	461a      	mov	r2, r3
 80019e2:	2301      	movs	r3, #1
 80019e4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f005 fd8a 	bl	8007506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a24:	461a      	mov	r2, r3
 8001a26:	2310      	movs	r3, #16
 8001a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a40:	461a      	mov	r2, r3
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2302      	movs	r3, #2
 8001a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fc29 	bl	80022c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d181      	bne.n	800198a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fd16 	bl	80054bc <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a9a:	d122      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f006 f837 	bl	8007b38 <HAL_PCDEx_LPM_Callback>
 8001aca:	e002      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f005 fd87 	bl	80075e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fce8 	bl	80054bc <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001af6:	d112      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f005 fd43 	bl	8007594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b1c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fcca 	bl	80054bc <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b32:	d121      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d111      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	f003 020f 	and.w	r2, r3, #15
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f005 ffe4 	bl	8007b38 <HAL_PCDEx_LPM_Callback>
 8001b70:	e002      	b.n	8001b78 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f005 fd0e 	bl	8007594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fc9d 	bl	80054bc <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8c:	f040 80c5 	bne.w	8001d1a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2110      	movs	r1, #16
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fe12 	bl	80047d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb4:	e056      	b.n	8001c64 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bda:	0151      	lsls	r1, r2, #5
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	440a      	add	r2, r1
 8001be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001be8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfa:	0151      	lsls	r1, r2, #5
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	440a      	add	r2, r1
 8001c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c16:	461a      	mov	r2, r3
 8001c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2e:	0151      	lsls	r1, r2, #5
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	440a      	add	r2, r1
 8001c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4e:	0151      	lsls	r1, r2, #5
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	440a      	add	r2, r1
 8001c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	3301      	adds	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3a3      	bcc.n	8001bb6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9a:	f043 030b 	orr.w	r3, r3, #11
 8001c9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb0:	f043 030b 	orr.w	r3, r3, #11
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	e015      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cde:	f043 030b 	orr.w	r3, r3, #11
 8001ce2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f003 fc9d 	bl	8005644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fbcc 	bl	80054bc <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2e:	d124      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fc62 	bl	80055fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fda9 	bl	8004896 <USB_GetDevSpeed>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	f001 fa46 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8001d54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f002 fb04 	bl	800436c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f005 fbf6 	bl	8007556 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fb9c 	bl	80054bc <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d10a      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f005 fbd3 	bl	800753a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f002 0208 	and.w	r2, r2, #8
 8001da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fb87 	bl	80054bc <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001db8:	d10f      	bne.n	8001dda <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f005 fc45 	bl	8007654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fb6c 	bl	80054bc <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dee:	d10f      	bne.n	8001e10 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f005 fc18 	bl	8007630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fb51 	bl	80054bc <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d10a      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f005 fc26 	bl	8007678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fb3b 	bl	80054bc <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d115      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f005 fc16 	bl	8007694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	e000      	b.n	8001e7c <HAL_PCD_IRQHandler+0x742>
      return;
 8001e7a:	bf00      	nop
    }
  }
}
 8001e7c:	3734      	adds	r7, #52	; 0x34
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}

08001e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_PCD_SetAddress+0x1a>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e013      	b.n	8001ec4 <HAL_PCD_SetAddress+0x42>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fa99 	bl	80053ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	803b      	strh	r3, [r7, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3338      	adds	r3, #56	; 0x38
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00f      	b.n	8001f32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f3e:	883a      	ldrh	r2, [r7, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	78ba      	ldrb	r2, [r7, #2]
 8001f48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f5c:	78bb      	ldrb	r3, [r7, #2]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d102      	bne.n	8001f68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_EP_Open+0xaa>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e00e      	b.n	8001f94 <HAL_PCD_EP_Open+0xc8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fca5 	bl	80048d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f92:	7afb      	ldrb	r3, [r7, #11]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da0f      	bge.n	8001fd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3338      	adds	r3, #56	; 0x38
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	705a      	strb	r2, [r3, #1]
 8001fce:	e00f      	b.n	8001ff0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 020f 	and.w	r2, r3, #15
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_PCD_EP_Close+0x6e>
 8002006:	2302      	movs	r3, #2
 8002008:	e00e      	b.n	8002028 <HAL_PCD_EP_Close+0x8c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68f9      	ldr	r1, [r7, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fce3 	bl	80049e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2200      	movs	r2, #0
 8002070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002072:	7afb      	ldrb	r3, [r7, #11]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	b2da      	uxtb	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6979      	ldr	r1, [r7, #20]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 ff60 	bl	8004f54 <USB_EP0StartXfer>
 8002094:	e005      	b.n	80020a2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6979      	ldr	r1, [r7, #20]
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fd7d 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	460b      	mov	r3, r1
 80020ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	3338      	adds	r3, #56	; 0x38
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2201      	movs	r2, #1
 800211a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	b2da      	uxtb	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002128:	7afb      	ldrb	r3, [r7, #11]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6979      	ldr	r1, [r7, #20]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 ff0b 	bl	8004f54 <USB_EP0StartXfer>
 800213e:	e005      	b.n	800214c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fd28 	bl	8004b9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 020f 	and.w	r2, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d901      	bls.n	8002174 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e04e      	b.n	8002212 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0f      	bge.n	800219c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 020f 	and.w	r2, r3, #15
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	705a      	strb	r2, [r3, #1]
 800219a:	e00d      	b.n	80021b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_EP_SetStall+0x82>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e01c      	b.n	8002212 <HAL_PCD_EP_SetStall+0xbc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68f9      	ldr	r1, [r7, #12]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 f82c 	bl	8005244 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f003 fa1e 	bl	8005644 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 020f 	and.w	r2, r3, #15
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d901      	bls.n	8002238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e042      	b.n	80022be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da0f      	bge.n	8002260 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 020f 	and.w	r2, r3, #15
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	3338      	adds	r3, #56	; 0x38
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	705a      	strb	r2, [r3, #1]
 800225e:	e00f      	b.n	8002280 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	3304      	adds	r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_EP_ClrStall+0x86>
 800229c:	2302      	movs	r3, #2
 800229e:	e00e      	b.n	80022be <HAL_PCD_EP_ClrStall+0xa4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 f836 	bl	8005320 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b088      	sub	sp, #32
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3338      	adds	r3, #56	; 0x38
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	3304      	adds	r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d901      	bls.n	80022fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e067      	b.n	80023ce <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	d902      	bls.n	800231a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3303      	adds	r3, #3
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002322:	e026      	b.n	8002372 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	429a      	cmp	r2, r3
 8002338:	d902      	bls.n	8002340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3303      	adds	r3, #3
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	b29b      	uxth	r3, r3
 8002354:	6978      	ldr	r0, [r7, #20]
 8002356:	f002 ff1b 	bl	8005190 <USB_WritePacket>

    ep->xfer_buff  += len;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	441a      	add	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	441a      	add	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	b29b      	uxth	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	429a      	cmp	r2, r3
 8002386:	d809      	bhi.n	800239c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002390:	429a      	cmp	r2, r3
 8002392:	d203      	bcs.n	800239c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1c3      	bne.n	8002324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d811      	bhi.n	80023cc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	2201      	movs	r2, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023c8:	4013      	ands	r3, r2
 80023ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	333c      	adds	r3, #60	; 0x3c
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <PCD_EP_OutXfrComplete_int+0x98>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d124      	bne.n	8002458 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002424:	461a      	mov	r2, r3
 8002426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242a:	6093      	str	r3, [r2, #8]
 800242c:	e01a      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	2320      	movs	r3, #32
 8002448:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f005 f83d 	bl	80074d0 <HAL_PCD_DataOutStageCallback>
 8002456:	e005      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f005 f836 	bl	80074d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	4f54310a 	.word	0x4f54310a

08002474 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	333c      	adds	r3, #60	; 0x3c
 800248c:	3304      	adds	r3, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <PCD_EP_OutSetupPacket_int+0x64>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d90e      	bls.n	80024c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	461a      	mov	r2, r3
 80024c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f004 ffef 	bl	80074ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	4f54300a 	.word	0x4f54300a

080024dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	4613      	mov	r3, r2
 80024ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024fa:	883b      	ldrh	r3, [r7, #0]
 80024fc:	0419      	lsls	r1, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	430a      	orrs	r2, r1
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
 8002508:	e028      	b.n	800255c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e00d      	b.n	800253a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3340      	adds	r3, #64	; 0x40
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	3301      	adds	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	3b01      	subs	r3, #1
 8002540:	429a      	cmp	r2, r3
 8002542:	d3ec      	bcc.n	800251e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002544:	883b      	ldrh	r3, [r7, #0]
 8002546:	0418      	lsls	r0, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	3b01      	subs	r3, #1
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4302      	orrs	r2, r0
 8002554:	3340      	adds	r3, #64	; 0x40
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	f043 0303 	orr.w	r3, r3, #3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_PWREx_GetVoltageRange+0x18>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000

080025f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fe:	d130      	bne.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260c:	d038      	beq.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2232      	movs	r2, #50	; 0x32
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0c9b      	lsrs	r3, r3, #18
 8002630:	3301      	adds	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002634:	e002      	b.n	800263c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3b01      	subs	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002648:	d102      	bne.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x60>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f2      	bne.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d110      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e00f      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266e:	d007      	beq.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40007000 	.word	0x40007000
 8002694:	20000000 	.word	0x20000000
 8002698:	431bde83 	.word	0x431bde83

0800269c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026aa:	6053      	str	r3, [r2, #4]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 bc16 	b.w	8002efc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d0:	4ba0      	ldr	r3, [pc, #640]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026da:	4b9e      	ldr	r3, [pc, #632]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80e4 	beq.w	80028ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_RCC_OscConfig+0x4c>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	f040 808b 	bne.w	8002816 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 8087 	bne.w	8002816 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002708:	4b92      	ldr	r3, [pc, #584]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x64>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e3ed      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <HAL_RCC_OscConfig+0x7e>
 8002730:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002738:	e005      	b.n	8002746 <HAL_RCC_OscConfig+0x8a>
 800273a:	4b86      	ldr	r3, [pc, #536]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800273c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002746:	4293      	cmp	r3, r2
 8002748:	d223      	bcs.n	8002792 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fd52 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e3ce      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275e:	4b7d      	ldr	r3, [pc, #500]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7c      	ldr	r2, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b7a      	ldr	r3, [pc, #488]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4977      	ldr	r1, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	4b75      	ldr	r3, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	4972      	ldr	r1, [pc, #456]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e025      	b.n	80027de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002792:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6f      	ldr	r2, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	496a      	ldr	r1, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fd12 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e38e      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027de:	f000 fc75 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 80027e2:	4601      	mov	r1, r0
 80027e4:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	4a5a      	ldr	r2, [pc, #360]	; (8002958 <HAL_RCC_OscConfig+0x29c>)
 80027f0:	5cd3      	ldrb	r3, [r2, r3]
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	fa21 f303 	lsr.w	r3, r1, r3
 80027fa:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x2a0>)
 80027fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027fe:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_RCC_OscConfig+0x2a4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe faf4 	bl	8000df0 <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d052      	beq.n	80028b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	e372      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d032      	beq.n	8002884 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800281e:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800282a:	f7fe fb31 	bl	8000e90 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002832:	f7fe fb2d 	bl	8000e90 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e35b      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002844:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002850:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002856:	f043 0308 	orr.w	r3, r3, #8
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	493a      	ldr	r1, [pc, #232]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286e:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
 8002882:	e01a      	b.n	80028ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800288a:	f023 0301 	bic.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002890:	f7fe fafe 	bl	8000e90 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002898:	f7fe fafa 	bl	8000e90 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e328      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x1dc>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d073      	beq.n	80029ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x21c>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d10e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d063      	beq.n	80029ac <HAL_RCC_OscConfig+0x2f0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d15f      	bne.n	80029ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e305      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x24c>
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0x288>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x270>
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x288>
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a05      	ldr	r2, [pc, #20]	; (8002954 <HAL_RCC_OscConfig+0x298>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe faa0 	bl	8000e90 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002952:	e010      	b.n	8002976 <HAL_RCC_OscConfig+0x2ba>
 8002954:	40021000 	.word	0x40021000
 8002958:	0800851c 	.word	0x0800851c
 800295c:	20000000 	.word	0x20000000
 8002960:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fa94 	bl	8000e90 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e2c2      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	4baf      	ldr	r3, [pc, #700]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x2a8>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fa84 	bl	8000e90 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fa80 	bl	8000e90 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e2ae      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	4ba5      	ldr	r3, [pc, #660]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x2d0>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d060      	beq.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0x310>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d119      	bne.n	80029fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d116      	bne.n	80029fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029cc:	4b99      	ldr	r3, [pc, #612]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x328>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e28b      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b93      	ldr	r3, [pc, #588]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	4990      	ldr	r1, [pc, #576]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f8:	e040      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d023      	beq.n	8002a4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a02:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a8b      	ldr	r2, [pc, #556]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fa3f 	bl	8000e90 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fa3b 	bl	8000e90 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e269      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b7f      	ldr	r3, [pc, #508]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	497c      	ldr	r1, [pc, #496]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
 8002a48:	e018      	b.n	8002a7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b7a      	ldr	r3, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a79      	ldr	r2, [pc, #484]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fa1b 	bl	8000e90 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fa17 	bl	8000e90 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e245      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a70:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01c      	beq.n	8002aca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe f9f6 	bl	8000e90 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe f9f2 	bl	8000e90 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e220      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aba:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x3ec>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad0:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe f9d9 	bl	8000e90 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae2:	f7fe f9d5 	bl	8000e90 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e203      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af4:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80a6 	beq.w	8002c5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b14:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <HAL_RCC_OscConfig+0x57c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d118      	bne.n	8002b7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_OscConfig+0x57c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3a      	ldr	r2, [pc, #232]	; (8002c38 <HAL_RCC_OscConfig+0x57c>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b54:	f7fe f99c 	bl	8000e90 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fe f998 	bl	8000e90 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1c6      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_RCC_OscConfig+0x57c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4d8>
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b92:	e024      	b.n	8002bde <HAL_RCC_OscConfig+0x522>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d110      	bne.n	8002bbe <HAL_RCC_OscConfig+0x502>
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bbc:	e00f      	b.n	8002bde <HAL_RCC_OscConfig+0x522>
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe f953 	bl	8000e90 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe f94f 	bl	8000e90 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e17b      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x578>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ed      	beq.n	8002bee <HAL_RCC_OscConfig+0x532>
 8002c12:	e01a      	b.n	8002c4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe f93c 	bl	8000e90 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c1a:	e00f      	b.n	8002c3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe f938 	bl	8000e90 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d906      	bls.n	8002c3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e164      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c3c:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e8      	bne.n	8002c1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4ba3      	ldr	r3, [pc, #652]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	4aa2      	ldr	r2, [pc, #648]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d03c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01c      	beq.n	8002caa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c70:	4b9b      	ldr	r3, [pc, #620]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c76:	4a9a      	ldr	r2, [pc, #616]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe f906 	bl	8000e90 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c88:	f7fe f902 	bl	8000e90 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e130      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c9a:	4b91      	ldr	r3, [pc, #580]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ef      	beq.n	8002c88 <HAL_RCC_OscConfig+0x5cc>
 8002ca8:	e01b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002caa:	4b8d      	ldr	r3, [pc, #564]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cb0:	4a8b      	ldr	r2, [pc, #556]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fe f8e9 	bl	8000e90 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc2:	f7fe f8e5 	bl	8000e90 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e113      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd4:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ef      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8107 	beq.w	8002efa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f040 80cb 	bne.w	8002e8c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cf6:	4b7a      	ldr	r3, [pc, #488]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d12c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	3b01      	subs	r3, #1
 8002d16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d123      	bne.n	8002d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d11b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d113      	bne.n	8002d64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d109      	bne.n	8002d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d06d      	beq.n	8002e40 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d068      	beq.n	8002e3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0ba      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d86:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a55      	ldr	r2, [pc, #340]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d92:	f7fe f87d 	bl	8000e90 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe f879 	bl	8000e90 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0a7      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	4b4c      	ldr	r3, [pc, #304]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db8:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b49      	ldr	r3, [pc, #292]	; (8002ee4 <HAL_RCC_OscConfig+0x828>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd2:	0212      	lsls	r2, r2, #8
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dda:	0852      	lsrs	r2, r2, #1
 8002ddc:	3a01      	subs	r2, #1
 8002dde:	0552      	lsls	r2, r2, #21
 8002de0:	4311      	orrs	r1, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0652      	lsls	r2, r2, #25
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df2:	06d2      	lsls	r2, r2, #27
 8002df4:	430a      	orrs	r2, r1
 8002df6:	493a      	ldr	r1, [pc, #232]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a34      	ldr	r2, [pc, #208]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e14:	f7fe f83c 	bl	8000e90 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f838 	bl	8000e90 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e066      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3a:	e05e      	b.n	8002efa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e05d      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e40:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d156      	bne.n	8002efa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a23      	ldr	r2, [pc, #140]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e64:	f7fe f814 	bl	8000e90 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe f810 	bl	8000e90 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e03e      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x7b0>
 8002e8a:	e036      	b.n	8002efa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d031      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002eb0:	f023 0303 	bic.w	r3, r3, #3
 8002eb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x824>)
 8002ebc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fd ffe3 	bl	8000e90 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ecc:	e00c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fd ffdf 	bl	8000e90 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d905      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e00d      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x848>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ec      	bne.n	8002ece <HAL_RCC_OscConfig+0x812>
 8002ef4:	e001      	b.n	8002efa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0c8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d910      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4961      	ldr	r1, [pc, #388]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b0      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d04c      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f60:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e09e      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e092      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e086      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e07e      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb0:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 0203 	bic.w	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	493f      	ldr	r1, [pc, #252]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc2:	f7fd ff65 	bl	8000e90 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fca:	f7fd ff61 	bl	8000e90 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e066      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 020c 	and.w	r2, r3, #12
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d1eb      	bne.n	8002fca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	492c      	ldr	r1, [pc, #176]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d210      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0207 	bic.w	r2, r3, #7
 8003026:	4924      	ldr	r1, [pc, #144]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e036      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4918      	ldr	r1, [pc, #96]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4910      	ldr	r1, [pc, #64]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307e:	f000 f825 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003082:	4601      	mov	r1, r0
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	fa21 f303 	lsr.w	r3, r1, r3
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fea4 	bl	8000df0 <HAL_InitTick>
 80030a8:	4603      	mov	r3, r0
 80030aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ac:	7afb      	ldrb	r3, [r7, #11]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800851c 	.word	0x0800851c
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d121      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d11e      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003100:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e005      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800311c:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d102      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e004      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d101      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d133      	bne.n	80031c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d002      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0xa4>
 800316a:	2b03      	cmp	r3, #3
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0xaa>
 800316e:	e005      	b.n	800317c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003172:	617b      	str	r3, [r7, #20]
      break;
 8003174:	e005      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003178:	617b      	str	r3, [r7, #20]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	617b      	str	r3, [r7, #20]
      break;
 8003180:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	3301      	adds	r3, #1
 800318e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	fb02 f203 	mul.w	r2, r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0e5b      	lsrs	r3, r3, #25
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031c2:	69bb      	ldr	r3, [r7, #24]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3724      	adds	r7, #36	; 0x24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40021000 	.word	0x40021000
 80031d4:	0800852c 	.word	0x0800852c
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000

080031f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003210:	f7ff f9e0 	bl	80025d4 <HAL_PWREx_GetVoltageRange>
 8003214:	6178      	str	r0, [r7, #20]
 8003216:	e014      	b.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff f9d0 	bl	80025d4 <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d10b      	bne.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	d919      	bls.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2ba0      	cmp	r3, #160	; 0xa0
 8003254:	d902      	bls.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003256:	2302      	movs	r3, #2
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e013      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e010      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d902      	bls.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003268:	2303      	movs	r3, #3
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e00a      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d102      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e004      	b.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d101      	bne.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003280:	2301      	movs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 0207 	bic.w	r2, r3, #7
 800328c:	4909      	ldr	r1, [pc, #36]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40022000 	.word	0x40022000

080032b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032c0:	2300      	movs	r3, #0
 80032c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c4:	2300      	movs	r3, #0
 80032c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032dc:	d01c      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d802      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032e8:	e01f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80032ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032f4:	d01c      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80032f6:	e018      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f8:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a84      	ldr	r2, [pc, #528]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003302:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003304:	e015      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fadb 	bl	80038c8 <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3320      	adds	r3, #32
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fbc2 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e003      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	74fb      	strb	r3, [r7, #19]
      break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003346:	4972      	ldr	r1, [pc, #456]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800334e:	e001      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03f      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003368:	d01c      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800336a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336e:	d802      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003374:	e01f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800337a:	d003      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800337c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003380:	d01c      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003382:	e018      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003384:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003390:	e015      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fa95 	bl	80038c8 <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033a2:	e00c      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3320      	adds	r3, #32
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb7c 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b4:	e003      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	74fb      	strb	r3, [r7, #19]
      break;
 80033ba:	e000      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80033bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d2:	494f      	ldr	r1, [pc, #316]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a0 	beq.w	800352e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a40      	ldr	r2, [pc, #256]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003430:	f7fd fd2e 	bl	8000e90 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003436:	e009      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd fd2a 	bl	8000e90 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d902      	bls.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	74fb      	strb	r3, [r7, #19]
        break;
 800344a:	e005      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ef      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d15c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003468:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	d019      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd fce9 	bl	8000e90 <HAL_GetTick>
 80034be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c0:	e00b      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fd fce5 	bl	8000e90 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d902      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	74fb      	strb	r3, [r7, #19]
            break;
 80034d8:	e006      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ec      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	4904      	ldr	r1, [pc, #16]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351c:	7c7b      	ldrb	r3, [r7, #17]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003522:	4ba6      	ldr	r3, [pc, #664]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	4aa5      	ldr	r2, [pc, #660]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353a:	4ba0      	ldr	r3, [pc, #640]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 0203 	bic.w	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	499c      	ldr	r1, [pc, #624]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355c:	4b97      	ldr	r3, [pc, #604]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 020c 	bic.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	4994      	ldr	r1, [pc, #592]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800357e:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	498b      	ldr	r1, [pc, #556]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035a0:	4b86      	ldr	r3, [pc, #536]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4983      	ldr	r1, [pc, #524]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c2:	4b7e      	ldr	r3, [pc, #504]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	497a      	ldr	r1, [pc, #488]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	4972      	ldr	r1, [pc, #456]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003606:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	4969      	ldr	r1, [pc, #420]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003628:	4b64      	ldr	r3, [pc, #400]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003636:	4961      	ldr	r1, [pc, #388]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	4958      	ldr	r1, [pc, #352]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800366c:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	4950      	ldr	r1, [pc, #320]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800368e:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	4947      	ldr	r1, [pc, #284]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	493f      	ldr	r1, [pc, #252]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d028      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4936      	ldr	r1, [pc, #216]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f0:	d106      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f2:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4a31      	ldr	r2, [pc, #196]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80036f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fc:	60d3      	str	r3, [r2, #12]
 80036fe:	e011      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2101      	movs	r1, #1
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f8d9 	bl	80038c8 <RCCEx_PLLSAI1_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d028      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	491f      	ldr	r1, [pc, #124]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374e:	d106      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375a:	60d3      	str	r3, [r2, #12]
 800375c:	e011      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003766:	d10c      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	2101      	movs	r1, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f8aa 	bl	80038c8 <RCCEx_PLLSAI1_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ac:	d108      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ae:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4a02      	ldr	r2, [pc, #8]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80037b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b8:	60d3      	str	r3, [r2, #12]
 80037ba:	e013      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80037bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f879 	bl	80038c8 <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037fe:	4929      	ldr	r1, [pc, #164]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800380e:	d10d      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f856 	bl	80038c8 <RCCEx_PLLSAI1_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d014      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	74bb      	strb	r3, [r7, #18]
 800382a:	e011      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d10c      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3320      	adds	r3, #32
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f933 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386c:	490d      	ldr	r1, [pc, #52]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003890:	4904      	ldr	r1, [pc, #16]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003898:	7cbb      	ldrb	r3, [r7, #18]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000

080038a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038d6:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038e2:	4b70      	ldr	r3, [pc, #448]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d10d      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
       ||
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038fa:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
       ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d044      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e041      	b.n	8003998 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d00c      	beq.n	8003936 <RCCEx_PLLSAI1_Config+0x6e>
 800391c:	2b03      	cmp	r3, #3
 800391e:	d013      	beq.n	8003948 <RCCEx_PLLSAI1_Config+0x80>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d120      	bne.n	8003966 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003924:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11d      	bne.n	800396c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003934:	e01a      	b.n	800396c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003946:	e013      	b.n	8003970 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003948:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10f      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003964:	e006      	b.n	8003974 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      break;
 800396a:	e004      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800396c:	bf00      	nop
 800396e:	e002      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003970:	bf00      	nop
 8003972:	e000      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003974:	bf00      	nop
    }

    if(status == HAL_OK)
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6819      	ldr	r1, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	3b01      	subs	r3, #1
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	430b      	orrs	r3, r1
 8003992:	4944      	ldr	r1, [pc, #272]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d17c      	bne.n	8003a98 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039aa:	f7fd fa71 	bl	8000e90 <HAL_GetTick>
 80039ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b0:	e009      	b.n	80039c6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b2:	f7fd fa6d 	bl	8000e90 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d902      	bls.n	80039c6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	73fb      	strb	r3, [r7, #15]
        break;
 80039c4:	e005      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1ef      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d15f      	bne.n	8003a98 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d110      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80039e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6892      	ldr	r2, [r2, #8]
 80039ee:	0211      	lsls	r1, r2, #8
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68d2      	ldr	r2, [r2, #12]
 80039f4:	06d2      	lsls	r2, r2, #27
 80039f6:	430a      	orrs	r2, r1
 80039f8:	492a      	ldr	r1, [pc, #168]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	610b      	str	r3, [r1, #16]
 80039fe:	e027      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d112      	bne.n	8003a2c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	0211      	lsls	r1, r2, #8
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6912      	ldr	r2, [r2, #16]
 8003a1c:	0852      	lsrs	r2, r2, #1
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0552      	lsls	r2, r2, #21
 8003a22:	430a      	orrs	r2, r1
 8003a24:	491f      	ldr	r1, [pc, #124]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	610b      	str	r3, [r1, #16]
 8003a2a:	e011      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	0211      	lsls	r1, r2, #8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6952      	ldr	r2, [r2, #20]
 8003a42:	0852      	lsrs	r2, r2, #1
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0652      	lsls	r2, r2, #25
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fa18 	bl	8000e90 <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a62:	e009      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a64:	f7fd fa14 	bl	8000e90 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	73fb      	strb	r3, [r7, #15]
          break;
 8003a76:	e005      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ef      	beq.n	8003a64 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ab6:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ac2:	4b65      	ldr	r3, [pc, #404]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d10d      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ada:	4b5f      	ldr	r3, [pc, #380]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d044      	beq.n	8003b78 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e041      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d00c      	beq.n	8003b16 <RCCEx_PLLSAI2_Config+0x6e>
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d013      	beq.n	8003b28 <RCCEx_PLLSAI2_Config+0x80>
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d120      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b04:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11d      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b14:	e01a      	b.n	8003b4c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b16:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d116      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b26:	e013      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10f      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b44:	e006      	b.n	8003b54 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4a:	e004      	b.n	8003b56 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003b4c:	bf00      	nop
 8003b4e:	e002      	b.n	8003b56 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003b50:	bf00      	nop
 8003b52:	e000      	b.n	8003b56 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003b54:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	430b      	orrs	r3, r1
 8003b72:	4939      	ldr	r1, [pc, #228]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d166      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a35      	ldr	r2, [pc, #212]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8a:	f7fd f981 	bl	8000e90 <HAL_GetTick>
 8003b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b90:	e009      	b.n	8003ba6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b92:	f7fd f97d 	bl	8000e90 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d902      	bls.n	8003ba6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba4:	e005      	b.n	8003bb2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ef      	bne.n	8003b92 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d149      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d110      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003bc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	0211      	lsls	r1, r2, #8
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68d2      	ldr	r2, [r2, #12]
 8003bd4:	06d2      	lsls	r2, r2, #27
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	491f      	ldr	r1, [pc, #124]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	614b      	str	r3, [r1, #20]
 8003bde:	e011      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003be8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	0211      	lsls	r1, r2, #8
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6912      	ldr	r2, [r2, #16]
 8003bf6:	0852      	lsrs	r2, r2, #1
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	0652      	lsls	r2, r2, #25
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	4916      	ldr	r1, [pc, #88]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd f93e 	bl	8000e90 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c18:	f7fd f93a 	bl	8000e90 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
          break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ef      	beq.n	8003c18 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4904      	ldr	r1, [pc, #16]	; (8003c58 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e049      	b.n	8003d02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc ffb4 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 f958 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d001      	beq.n	8003d24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e047      	b.n	8003db4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <HAL_TIM_Base_Start+0xb4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_TIM_Base_Start+0x66>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d018      	beq.n	8003d72 <HAL_TIM_Base_Start+0x66>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_TIM_Base_Start+0xb8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_TIM_Base_Start+0x66>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_TIM_Base_Start+0xbc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIM_Base_Start+0x66>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_TIM_Base_Start+0xc0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_Base_Start+0x66>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_TIM_Base_Start+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_Base_Start+0x66>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_TIM_Base_Start+0xc8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d115      	bne.n	8003d9e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_TIM_Base_Start+0xcc>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d015      	beq.n	8003db0 <HAL_TIM_Base_Start+0xa4>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8a:	d011      	beq.n	8003db0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9c:	e008      	b.n	8003db0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40013400 	.word	0x40013400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	00010007 	.word	0x00010007

08003ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_TIM_ConfigClockSource+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e0a8      	b.n	8003f46 <HAL_TIM_ConfigClockSource+0x16a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d067      	beq.n	8003f00 <HAL_TIM_ConfigClockSource+0x124>
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d80b      	bhi.n	8003e4c <HAL_TIM_ConfigClockSource+0x70>
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d073      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x144>
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d802      	bhi.n	8003e42 <HAL_TIM_ConfigClockSource+0x66>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d06f      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e40:	e078      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d06c      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x144>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d06a      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003e4a:	e073      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d00d      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x90>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d804      	bhi.n	8003e5e <HAL_TIM_ConfigClockSource+0x82>
 8003e54:	2b50      	cmp	r3, #80	; 0x50
 8003e56:	d033      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0xe4>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d041      	beq.n	8003ee0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003e5c:	e06a      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d066      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x156>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d017      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003e6a:	e063      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6899      	ldr	r1, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f000 f97c 	bl	8004178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
      break;
 8003e98:	e04c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6899      	ldr	r1, [r3, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f000 f965 	bl	8004178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebc:	609a      	str	r2, [r3, #8]
      break;
 8003ebe:	e039      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f000 f8d9 	bl	8004084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2150      	movs	r1, #80	; 0x50
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f932 	bl	8004142 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e029      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f000 f8f8 	bl	80040e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2160      	movs	r1, #96	; 0x60
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f922 	bl	8004142 <TIM_ITRx_SetConfig>
      break;
 8003efe:	e019      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f000 f8b9 	bl	8004084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f912 	bl	8004142 <TIM_ITRx_SetConfig>
      break;
 8003f1e:	e009      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 f909 	bl	8004142 <TIM_ITRx_SetConfig>
        break;
 8003f30:	e000      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a40      	ldr	r2, [pc, #256]	; (8004064 <TIM_Base_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3d      	ldr	r2, [pc, #244]	; (8004068 <TIM_Base_SetConfig+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	; (800406c <TIM_Base_SetConfig+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3b      	ldr	r2, [pc, #236]	; (8004070 <TIM_Base_SetConfig+0x120>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x40>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3a      	ldr	r2, [pc, #232]	; (8004074 <TIM_Base_SetConfig+0x124>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <TIM_Base_SetConfig+0x114>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01f      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d01b      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <TIM_Base_SetConfig+0x118>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d017      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <TIM_Base_SetConfig+0x11c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <TIM_Base_SetConfig+0x120>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00f      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a29      	ldr	r2, [pc, #164]	; (8004074 <TIM_Base_SetConfig+0x124>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a28      	ldr	r2, [pc, #160]	; (8004078 <TIM_Base_SetConfig+0x128>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <TIM_Base_SetConfig+0x12c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_Base_SetConfig+0x130>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d108      	bne.n	8003ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <TIM_Base_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00f      	beq.n	8004048 <TIM_Base_SetConfig+0xf8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <TIM_Base_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00b      	beq.n	8004048 <TIM_Base_SetConfig+0xf8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a11      	ldr	r2, [pc, #68]	; (8004078 <TIM_Base_SetConfig+0x128>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <TIM_Base_SetConfig+0xf8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <TIM_Base_SetConfig+0x12c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0xf8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <TIM_Base_SetConfig+0x130>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0201 	bic.w	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 030a 	bic.w	r3, r3, #10
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b087      	sub	sp, #28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0210 	bic.w	r2, r3, #16
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800410c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	031b      	lsls	r3, r3, #12
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	f043 0307 	orr.w	r3, r3, #7
 8004164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	021a      	lsls	r2, r3, #8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	431a      	orrs	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4313      	orrs	r3, r2
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e068      	b.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2e      	ldr	r2, [pc, #184]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800420a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d018      	beq.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10c      	bne.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40013400 	.word	0x40013400
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40014000 	.word	0x40014000

080042c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042c8:	b084      	sub	sp, #16
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	f107 001c 	add.w	r0, r7, #28
 80042d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d122      	bne.n	8004326 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 f9da 	bl	80056d4 <USB_CoreReset>
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	e01a      	b.n	800435c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 f9ce 	bl	80056d4 <USB_CoreReset>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800433c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
 800434e:	e005      	b.n	800435c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004368:	b004      	add	sp, #16
 800436a:	4770      	bx	lr

0800436c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d165      	bne.n	800444c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a3e      	ldr	r2, [pc, #248]	; (800447c <USB_SetTurnaroundTime+0x110>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d906      	bls.n	8004396 <USB_SetTurnaroundTime+0x2a>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a3d      	ldr	r2, [pc, #244]	; (8004480 <USB_SetTurnaroundTime+0x114>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d802      	bhi.n	8004396 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004390:	230f      	movs	r3, #15
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e05c      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a39      	ldr	r2, [pc, #228]	; (8004480 <USB_SetTurnaroundTime+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d906      	bls.n	80043ac <USB_SetTurnaroundTime+0x40>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a38      	ldr	r2, [pc, #224]	; (8004484 <USB_SetTurnaroundTime+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d802      	bhi.n	80043ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043a6:	230e      	movs	r3, #14
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e051      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a35      	ldr	r2, [pc, #212]	; (8004484 <USB_SetTurnaroundTime+0x118>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d906      	bls.n	80043c2 <USB_SetTurnaroundTime+0x56>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a34      	ldr	r2, [pc, #208]	; (8004488 <USB_SetTurnaroundTime+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d802      	bhi.n	80043c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043bc:	230d      	movs	r3, #13
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e046      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4a30      	ldr	r2, [pc, #192]	; (8004488 <USB_SetTurnaroundTime+0x11c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d906      	bls.n	80043d8 <USB_SetTurnaroundTime+0x6c>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a2f      	ldr	r2, [pc, #188]	; (800448c <USB_SetTurnaroundTime+0x120>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d802      	bhi.n	80043d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043d2:	230c      	movs	r3, #12
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e03b      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a2c      	ldr	r2, [pc, #176]	; (800448c <USB_SetTurnaroundTime+0x120>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d906      	bls.n	80043ee <USB_SetTurnaroundTime+0x82>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a2b      	ldr	r2, [pc, #172]	; (8004490 <USB_SetTurnaroundTime+0x124>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d802      	bhi.n	80043ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043e8:	230b      	movs	r3, #11
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e030      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4a27      	ldr	r2, [pc, #156]	; (8004490 <USB_SetTurnaroundTime+0x124>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d906      	bls.n	8004404 <USB_SetTurnaroundTime+0x98>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a26      	ldr	r2, [pc, #152]	; (8004494 <USB_SetTurnaroundTime+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043fe:	230a      	movs	r3, #10
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e025      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a23      	ldr	r2, [pc, #140]	; (8004494 <USB_SetTurnaroundTime+0x128>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d906      	bls.n	800441a <USB_SetTurnaroundTime+0xae>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <USB_SetTurnaroundTime+0x12c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d802      	bhi.n	800441a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004414:	2309      	movs	r3, #9
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e01a      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <USB_SetTurnaroundTime+0x12c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d906      	bls.n	8004430 <USB_SetTurnaroundTime+0xc4>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <USB_SetTurnaroundTime+0x130>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800442a:	2308      	movs	r3, #8
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e00f      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a1a      	ldr	r2, [pc, #104]	; (800449c <USB_SetTurnaroundTime+0x130>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d906      	bls.n	8004446 <USB_SetTurnaroundTime+0xda>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <USB_SetTurnaroundTime+0x134>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d802      	bhi.n	8004446 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004440:	2307      	movs	r3, #7
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e004      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004446:	2306      	movs	r3, #6
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e001      	b.n	8004450 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800444c:	2309      	movs	r3, #9
 800444e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	029b      	lsls	r3, r3, #10
 8004464:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	00d8acbf 	.word	0x00d8acbf
 8004480:	00e4e1bf 	.word	0x00e4e1bf
 8004484:	00f423ff 	.word	0x00f423ff
 8004488:	0106737f 	.word	0x0106737f
 800448c:	011a499f 	.word	0x011a499f
 8004490:	01312cff 	.word	0x01312cff
 8004494:	014ca43f 	.word	0x014ca43f
 8004498:	016e35ff 	.word	0x016e35ff
 800449c:	01a6ab1f 	.word	0x01a6ab1f
 80044a0:	01e847ff 	.word	0x01e847ff

080044a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d106      	bne.n	8004514 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	e00b      	b.n	800452c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	e001      	b.n	800452c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e003      	b.n	8004534 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800452c:	2032      	movs	r0, #50	; 0x32
 800452e:	f7fc fcbb 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800453c:	b084      	sub	sp, #16
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800454a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	e009      	b.n	8004570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3340      	adds	r3, #64	; 0x40
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	2200      	movs	r2, #0
 8004568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3301      	adds	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0e      	cmp	r3, #14
 8004574:	d9f2      	bls.n	800455c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d11c      	bne.n	80045b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458a:	f043 0302 	orr.w	r3, r3, #2
 800458e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e005      	b.n	80045c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045c8:	461a      	mov	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d4:	4619      	mov	r1, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045dc:	461a      	mov	r2, r3
 80045de:	680b      	ldr	r3, [r1, #0]
 80045e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045e2:	2103      	movs	r1, #3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f93d 	bl	8004864 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045ea:	2110      	movs	r1, #16
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f8f1 	bl	80047d4 <USB_FlushTxFifo>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f90f 	bl	8004820 <USB_FlushRxFifo>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	461a      	mov	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	461a      	mov	r2, r3
 8004620:	2300      	movs	r3, #0
 8004622:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	e043      	b.n	80046be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464c:	d118      	bne.n	8004680 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	e013      	b.n	8004692 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	461a      	mov	r2, r3
 8004678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e008      	b.n	8004692 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	461a      	mov	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3301      	adds	r3, #1
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3b7      	bcc.n	8004636 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	e043      	b.n	8004754 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e2:	d118      	bne.n	8004716 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	461a      	mov	r2, r3
 80046f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e013      	b.n	8004728 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	461a      	mov	r2, r3
 800470e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e008      	b.n	8004728 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	2300      	movs	r3, #0
 8004738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800474c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	3301      	adds	r3, #1
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d3b7      	bcc.n	80046cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800476e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800477c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f043 0210 	orr.w	r2, r3, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <USB_DevInit+0x294>)
 8004790:	4313      	orrs	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f043 0208 	orr.w	r2, r3, #8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047be:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ca:	b004      	add	sp, #16
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	803c3800 	.word	0x803c3800

080047d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	019b      	lsls	r3, r3, #6
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <USB_FlushTxFifo+0x48>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e006      	b.n	800480e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b20      	cmp	r3, #32
 800480a:	d0f0      	beq.n	80047ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	00030d40 	.word	0x00030d40

08004820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2210      	movs	r2, #16
 8004830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <USB_FlushRxFifo+0x40>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e006      	b.n	8004852 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d0f0      	beq.n	8004832 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	00030d40 	.word	0x00030d40

08004864 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004896:	b480      	push	{r7}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0306 	and.w	r3, r3, #6
 80048ae:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d002      	beq.n	80048bc <USB_GetDevSpeed+0x26>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d102      	bne.n	80048c2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048bc:	2302      	movs	r3, #2
 80048be:	75fb      	strb	r3, [r7, #23]
 80048c0:	e001      	b.n	80048c6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80048c2:	230f      	movs	r3, #15
 80048c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d13a      	bne.n	8004966 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800490e:	4313      	orrs	r3, r2
 8004910:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d155      	bne.n	80049d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	78db      	ldrb	r3, [r3, #3]
 8004942:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004944:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800494c:	4313      	orrs	r3, r2
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e036      	b.n	80049d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	2101      	movs	r1, #1
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4313      	orrs	r3, r2
 8004986:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11a      	bne.n	80049d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ba:	430b      	orrs	r3, r1
 80049bc:	4313      	orrs	r3, r2
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d161      	bne.n	8004ac4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a16:	d11f      	bne.n	8004a58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a78:	4013      	ands	r3, r2
 8004a7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aba:	4619      	mov	r1, r3
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <USB_DeactivateEndpoint+0x1b0>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
 8004ac2:	e060      	b.n	8004b86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ada:	d11f      	bne.n	8004b1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004afa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	43db      	mvns	r3, r3
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b60:	4013      	ands	r3, r2
 8004b62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0159      	lsls	r1, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	440b      	add	r3, r1
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <USB_DeactivateEndpoint+0x1b4>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	ec337800 	.word	0xec337800
 8004b98:	eff37800 	.word	0xeff37800

08004b9c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 810a 	bne.w	8004dce <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d132      	bne.n	8004c28 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	0cdb      	lsrs	r3, r3, #19
 8004c22:	04db      	lsls	r3, r3, #19
 8004c24:	6113      	str	r3, [r2, #16]
 8004c26:	e074      	b.n	8004d12 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c42:	0cdb      	lsrs	r3, r3, #19
 8004c44:	04db      	lsls	r3, r3, #19
 8004c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6959      	ldr	r1, [r3, #20]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	440b      	add	r3, r1
 8004c84:	1e59      	subs	r1, r3, #1
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8e:	04d9      	lsls	r1, r3, #19
 8004c90:	4baf      	ldr	r3, [pc, #700]	; (8004f50 <USB_EPStartXfer+0x3b4>)
 8004c92:	400b      	ands	r3, r1
 8004c94:	6939      	ldr	r1, [r7, #16]
 8004c96:	0148      	lsls	r0, r1, #5
 8004c98:	6979      	ldr	r1, [r7, #20]
 8004c9a:	4401      	add	r1, r0
 8004c9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cba:	6939      	ldr	r1, [r7, #16]
 8004cbc:	0148      	lsls	r0, r1, #5
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	4401      	add	r1, r0
 8004cc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	78db      	ldrb	r3, [r3, #3]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d11f      	bne.n	8004d12 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cf0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d10:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d30:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	78db      	ldrb	r3, [r3, #3]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d015      	beq.n	8004d66 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8100 	beq.w	8004f44 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d60:	4313      	orrs	r3, r2
 8004d62:	634b      	str	r3, [r1, #52]	; 0x34
 8004d64:	e0ee      	b.n	8004f44 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d110      	bne.n	8004d98 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00f      	b.n	8004db8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68d9      	ldr	r1, [r3, #12]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781a      	ldrb	r2, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9e2 	bl	8005190 <USB_WritePacket>
 8004dcc:	e0ba      	b.n	8004f44 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	0cdb      	lsrs	r3, r3, #19
 8004dea:	04db      	lsls	r3, r3, #19
 8004dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d123      	bne.n	8004e62 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e30:	6939      	ldr	r1, [r7, #16]
 8004e32:	0148      	lsls	r0, r1, #5
 8004e34:	6979      	ldr	r1, [r7, #20]
 8004e36:	4401      	add	r1, r0
 8004e38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e5e:	6113      	str	r3, [r2, #16]
 8004e60:	e033      	b.n	8004eca <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	89fb      	ldrh	r3, [r7, #14]
 8004e88:	04d9      	lsls	r1, r3, #19
 8004e8a:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <USB_EPStartXfer+0x3b4>)
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	6939      	ldr	r1, [r7, #16]
 8004e90:	0148      	lsls	r0, r1, #5
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	4401      	add	r1, r0
 8004e96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	89f9      	ldrh	r1, [r7, #14]
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	6939      	ldr	r1, [r7, #16]
 8004ebc:	0148      	lsls	r0, r1, #5
 8004ebe:	6979      	ldr	r1, [r7, #20]
 8004ec0:	4401      	add	r1, r0
 8004ec2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	78db      	ldrb	r3, [r3, #3]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d128      	bne.n	8004f24 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d110      	bne.n	8004f04 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e00f      	b.n	8004f24 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	1ff80000 	.word	0x1ff80000

08004f54 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 80ab 	bne.w	80050c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d132      	bne.n	8004fe0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	0cdb      	lsrs	r3, r3, #19
 8004fda:	04db      	lsls	r3, r3, #19
 8004fdc:	6113      	str	r3, [r2, #16]
 8004fde:	e04e      	b.n	800507e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffa:	0cdb      	lsrs	r3, r3, #19
 8004ffc:	04db      	lsls	r3, r3, #19
 8004ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800501e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005022:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	d903      	bls.n	8005038 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	0148      	lsls	r0, r1, #5
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	4401      	add	r1, r0
 8005076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800507a:	4313      	orrs	r3, r2
 800507c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005098:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800509c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d06d      	beq.n	8005182 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c2:	4313      	orrs	r3, r2
 80050c4:	634b      	str	r3, [r1, #52]	; 0x34
 80050c6:	e05c      	b.n	8005182 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e2:	0cdb      	lsrs	r3, r3, #19
 80050e4:	04db      	lsls	r3, r3, #19
 80050e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005102:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005106:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800510a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800513a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	0148      	lsls	r0, r1, #5
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	4401      	add	r1, r0
 800515a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800515e:	4313      	orrs	r3, r2
 8005160:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005180:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4611      	mov	r1, r2
 800519c:	461a      	mov	r2, r3
 800519e:	460b      	mov	r3, r1
 80051a0:	71fb      	strb	r3, [r7, #7]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80051ae:	88bb      	ldrh	r3, [r7, #4]
 80051b0:	3303      	adds	r3, #3
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e00f      	b.n	80051dc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	031a      	lsls	r2, r3, #12
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c8:	461a      	mov	r2, r3
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6013      	str	r3, [r2, #0]
    pSrc++;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3304      	adds	r3, #4
 80051d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3301      	adds	r3, #1
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d3eb      	bcc.n	80051bc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3724      	adds	r7, #36	; 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b089      	sub	sp, #36	; 0x24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	3303      	adds	r3, #3
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e00b      	b.n	800522e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	601a      	str	r2, [r3, #0]
    pDest++;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3304      	adds	r3, #4
 8005226:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	3301      	adds	r3, #1
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	429a      	cmp	r2, r3
 8005234:	d3ef      	bcc.n	8005216 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3724      	adds	r7, #36	; 0x24
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d12c      	bne.n	80052ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	db12      	blt.n	8005298 <USB_EPSetStall+0x54>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00f      	beq.n	8005298 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005296:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e02b      	b.n	8005312 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db12      	blt.n	80052f2 <USB_EPSetStall+0xae>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00f      	beq.n	80052f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d128      	bne.n	800538e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800535a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	78db      	ldrb	r3, [r3, #3]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d003      	beq.n	800536c <USB_EPClearStall+0x4c>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	78db      	ldrb	r3, [r3, #3]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d138      	bne.n	80053de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e027      	b.n	80053de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d003      	beq.n	80053be <USB_EPClearStall+0x9e>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	78db      	ldrb	r3, [r3, #3]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d10f      	bne.n	80053de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800540a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800540e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005466:	f023 0302 	bic.w	r3, r3, #2
 800546a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005494:	f023 0303 	bic.w	r3, r3, #3
 8005498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054d4:	68fb      	ldr	r3, [r7, #12]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	4013      	ands	r3, r2
 8005504:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	0c1b      	lsrs	r3, r3, #16
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	b29b      	uxth	r3, r3
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005578:	68bb      	ldr	r3, [r7, #8]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	01db      	lsls	r3, r3, #7
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055d4:	68bb      	ldr	r3, [r7, #8]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0301 	and.w	r3, r3, #1
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005618:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	333c      	adds	r3, #60	; 0x3c
 8005656:	3304      	adds	r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <USB_EP0_OutStart+0x8c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d90a      	bls.n	800567a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005674:	d101      	bne.n	800567a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	e024      	b.n	80056c4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	461a      	mov	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a8:	f043 0318 	orr.w	r3, r3, #24
 80056ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056c0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	4f54300a 	.word	0x4f54300a

080056d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <USB_CoreReset+0x64>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e01b      	b.n	800572a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	daf2      	bge.n	80056e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <USB_CoreReset+0x64>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d0f0      	beq.n	800570a <USB_CoreReset+0x36>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	00030d40 	.word	0x00030d40

0800573c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005748:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800574c:	f002 fa72 	bl	8007c34 <malloc>
 8005750:	4603      	mov	r3, r0
 8005752:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005762:	2302      	movs	r3, #2
 8005764:	e066      	b.n	8005834 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	7c1b      	ldrb	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d119      	bne.n	80057aa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577a:	2202      	movs	r2, #2
 800577c:	2181      	movs	r1, #129	; 0x81
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f002 f814 	bl	80077ac <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800578a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800578e:	2202      	movs	r2, #2
 8005790:	2101      	movs	r1, #1
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 f80a 	bl	80077ac <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2210      	movs	r2, #16
 80057a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057a8:	e016      	b.n	80057d8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057aa:	2340      	movs	r3, #64	; 0x40
 80057ac:	2202      	movs	r2, #2
 80057ae:	2181      	movs	r1, #129	; 0x81
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fffb 	bl	80077ac <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	2202      	movs	r2, #2
 80057c0:	2101      	movs	r1, #1
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f001 fff2 	bl	80077ac <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2210      	movs	r2, #16
 80057d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057d8:	2308      	movs	r3, #8
 80057da:	2203      	movs	r2, #3
 80057dc:	2182      	movs	r1, #130	; 0x82
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 ffe4 	bl	80077ac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7c1b      	ldrb	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005818:	2101      	movs	r1, #1
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 f940 	bl	8007aa0 <USBD_LL_PrepareReceive>
 8005820:	e007      	b.n	8005832 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	2101      	movs	r1, #1
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f002 f937 	bl	8007aa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005848:	2181      	movs	r1, #129	; 0x81
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 ffec 	bl	8007828 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005856:	2101      	movs	r1, #1
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 ffe5 	bl	8007828 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005866:	2182      	movs	r1, #130	; 0x82
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 ffdd 	bl	8007828 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005898:	4618      	mov	r0, r3
 800589a:	f002 f9d3 	bl	8007c44 <free>
    pdev->pClassData = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03a      	beq.n	8005950 <USBD_CDC_Setup+0xa0>
 80058da:	2b20      	cmp	r3, #32
 80058dc:	f040 8097 	bne.w	8005a0e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	88db      	ldrh	r3, [r3, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d029      	beq.n	800593c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da11      	bge.n	8005916 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80058fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	88d2      	ldrh	r2, [r2, #6]
 8005904:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	88db      	ldrh	r3, [r3, #6]
 800590c:	461a      	mov	r2, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 facf 	bl	8006eb2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005914:	e082      	b.n	8005a1c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785a      	ldrb	r2, [r3, #1]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	88db      	ldrh	r3, [r3, #6]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800592c:	6939      	ldr	r1, [r7, #16]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	88db      	ldrh	r3, [r3, #6]
 8005932:	461a      	mov	r2, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 fae8 	bl	8006f0a <USBD_CtlPrepareRx>
      break;
 800593a:	e06f      	b.n	8005a1c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	7850      	ldrb	r0, [r2, #1]
 8005948:	2200      	movs	r2, #0
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	4798      	blx	r3
      break;
 800594e:	e065      	b.n	8005a1c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b0b      	cmp	r3, #11
 8005956:	d84f      	bhi.n	80059f8 <USBD_CDC_Setup+0x148>
 8005958:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <USBD_CDC_Setup+0xb0>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005991 	.word	0x08005991
 8005964:	08005a07 	.word	0x08005a07
 8005968:	080059f9 	.word	0x080059f9
 800596c:	080059f9 	.word	0x080059f9
 8005970:	080059f9 	.word	0x080059f9
 8005974:	080059f9 	.word	0x080059f9
 8005978:	080059f9 	.word	0x080059f9
 800597c:	080059f9 	.word	0x080059f9
 8005980:	080059f9 	.word	0x080059f9
 8005984:	080059f9 	.word	0x080059f9
 8005988:	080059b9 	.word	0x080059b9
 800598c:	080059e1 	.word	0x080059e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005996:	2b03      	cmp	r3, #3
 8005998:	d107      	bne.n	80059aa <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800599a:	f107 030c 	add.w	r3, r7, #12
 800599e:	2202      	movs	r2, #2
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fa85 	bl	8006eb2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059a8:	e030      	b.n	8005a0c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fa0f 	bl	8006dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 80059b2:	2303      	movs	r3, #3
 80059b4:	75fb      	strb	r3, [r7, #23]
          break;
 80059b6:	e029      	b.n	8005a0c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059c2:	f107 030f 	add.w	r3, r7, #15
 80059c6:	2201      	movs	r2, #1
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fa71 	bl	8006eb2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059d0:	e01c      	b.n	8005a0c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 f9fb 	bl	8006dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 80059da:	2303      	movs	r3, #3
 80059dc:	75fb      	strb	r3, [r7, #23]
          break;
 80059de:	e015      	b.n	8005a0c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d00f      	beq.n	8005a0a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f9ef 	bl	8006dd0 <USBD_CtlError>
            ret = USBD_FAIL;
 80059f2:	2303      	movs	r3, #3
 80059f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059f6:	e008      	b.n	8005a0a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 f9e8 	bl	8006dd0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a00:	2303      	movs	r3, #3
 8005a02:	75fb      	strb	r3, [r7, #23]
          break;
 8005a04:	e002      	b.n	8005a0c <USBD_CDC_Setup+0x15c>
          break;
 8005a06:	bf00      	nop
 8005a08:	e008      	b.n	8005a1c <USBD_CDC_Setup+0x16c>
          break;
 8005a0a:	bf00      	nop
      }
      break;
 8005a0c:	e006      	b.n	8005a1c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 f9dd 	bl	8006dd0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a16:	2303      	movs	r3, #3
 8005a18:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e04f      	b.n	8005aea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3318      	adds	r3, #24
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d029      	beq.n	8005abc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	3318      	adds	r3, #24
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	78f9      	ldrb	r1, [r7, #3]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	1a5b      	subs	r3, r3, r1
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4403      	add	r3, r0
 8005a88:	3344      	adds	r3, #68	; 0x44
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a90:	fb03 f301 	mul.w	r3, r3, r1
 8005a94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d110      	bne.n	8005abc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3318      	adds	r3, #24
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005aae:	78f9      	ldrb	r1, [r7, #3]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 ffbb 	bl	8007a30 <USBD_LL_Transmit>
 8005aba:	e015      	b.n	8005ae8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e015      	b.n	8005b40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 fff9 	bl	8007b10 <USBD_LL_GetRxDataSize>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b56:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <USBD_CDC_EP0_RxReady+0x46>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b68:	2bff      	cmp	r3, #255	; 0xff
 8005b6a:	d010      	beq.n	8005b8e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005b7a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b82:	b292      	uxth	r2, r2
 8005b84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	22ff      	movs	r2, #255	; 0xff
 8005b8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2243      	movs	r2, #67	; 0x43
 8005ba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005ba6:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	20000094 	.word	0x20000094

08005bb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2243      	movs	r2, #67	; 0x43
 8005bc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005bc6:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	20000050 	.word	0x20000050

08005bd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2243      	movs	r2, #67	; 0x43
 8005be4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005be6:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	200000d8 	.word	0x200000d8

08005bf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	220a      	movs	r2, #10
 8005c04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	2000000c 	.word	0x2000000c

08005c18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e004      	b.n	8005c36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c84:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005caa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e01a      	b.n	8005cf4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d114      	bne.n	8005cf2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ce6:	2181      	movs	r1, #129	; 0x81
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 fea1 	bl	8007a30 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e016      	b.n	8005d48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7c1b      	ldrb	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 feb6 	bl	8007aa0 <USBD_LL_PrepareReceive>
 8005d34:	e007      	b.n	8005d46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 fead 	bl	8007aa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e01f      	b.n	8005da8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	79fa      	ldrb	r2, [r7, #7]
 8005d9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 fc87 	bl	80076b0 <USBD_LL_Init>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e016      	b.n	8005df6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	f107 020e 	add.w	r2, r7, #14
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
 8005dec:	4602      	mov	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 fc9e 	bl	8007748 <USBD_LL_Start>
 8005e0c:	4603      	mov	r3, r0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	4611      	mov	r1, r2
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	4611      	mov	r1, r2
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
  }

  return USBD_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ff58 	bl	8006d5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d00e      	beq.n	8005eee <USBD_LL_SetupStage+0x5a>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d302      	bcc.n	8005eda <USBD_LL_SetupStage+0x46>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d014      	beq.n	8005f02 <USBD_LL_SetupStage+0x6e>
 8005ed8:	e01d      	b.n	8005f16 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa18 	bl	8006318 <USBD_StdDevReq>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]
      break;
 8005eec:	e020      	b.n	8005f30 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa7c 	bl	80063f4 <USBD_StdItfReq>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
      break;
 8005f00:	e016      	b.n	8005f30 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fab8 	bl	8006480 <USBD_StdEPReq>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e00c      	b.n	8005f30 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fcb5 	bl	8007894 <USBD_LL_StallEP>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2e:	bf00      	nop
  }

  return ret;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	460b      	mov	r3, r1
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d137      	bne.n	8005fbe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d14a      	bne.n	8005ff6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d913      	bls.n	8005f94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bf28      	it	cs
 8005f86:	4613      	movcs	r3, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 ffd9 	bl	8006f44 <USBD_CtlContinueRx>
 8005f92:	e030      	b.n	8005ff6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d105      	bne.n	8005fb6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 ffd5 	bl	8006f66 <USBD_CtlSendStatus>
 8005fbc:	e01b      	b.n	8005ff6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d013      	beq.n	8005ff2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d10e      	bne.n	8005ff2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	7afa      	ldrb	r2, [r7, #11]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	4798      	blx	r3
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	e002      	b.n	8005ff8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e000      	b.n	8005ff8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	460b      	mov	r3, r1
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d16a      	bne.n	80060ea <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3314      	adds	r3, #20
 8006018:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006020:	2b02      	cmp	r3, #2
 8006022:	d155      	bne.n	80060d0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	429a      	cmp	r2, r3
 800602e:	d914      	bls.n	800605a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	1ad2      	subs	r2, r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	461a      	mov	r2, r3
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 ff4e 	bl	8006ee8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800604c:	2300      	movs	r3, #0
 800604e:	2200      	movs	r2, #0
 8006050:	2100      	movs	r1, #0
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f001 fd24 	bl	8007aa0 <USBD_LL_PrepareReceive>
 8006058:	e03a      	b.n	80060d0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d11c      	bne.n	80060a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800606e:	429a      	cmp	r2, r3
 8006070:	d316      	bcc.n	80060a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800607c:	429a      	cmp	r2, r3
 800607e:	d20f      	bcs.n	80060a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006080:	2200      	movs	r2, #0
 8006082:	2100      	movs	r1, #0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 ff2f 	bl	8006ee8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006092:	2300      	movs	r3, #0
 8006094:	2200      	movs	r2, #0
 8006096:	2100      	movs	r1, #0
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f001 fd01 	bl	8007aa0 <USBD_LL_PrepareReceive>
 800609e:	e017      	b.n	80060d0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d105      	bne.n	80060c2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 fbe5 	bl	8007894 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 ff5e 	bl	8006f8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d123      	bne.n	8006122 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fe9b 	bl	8005e16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060e8:	e01b      	b.n	8006122 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d10e      	bne.n	800611e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	4611      	mov	r1, r2
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	4798      	blx	r3
 8006110:	4603      	mov	r3, r0
 8006112:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	e002      	b.n	8006124 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	e000      	b.n	8006124 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6852      	ldr	r2, [r2, #4]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	4611      	mov	r1, r2
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006170:	2340      	movs	r3, #64	; 0x40
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 fb18 	bl	80077ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2240      	movs	r2, #64	; 0x40
 8006188:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	2200      	movs	r2, #0
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fb0a 	bl	80077ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2240      	movs	r2, #64	; 0x40
 80061a2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2204      	movs	r2, #4
 80061e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006206:	2b04      	cmp	r3, #4
 8006208:	d105      	bne.n	8006216 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006232:	2b03      	cmp	r3, #3
 8006234:	d10b      	bne.n	800624e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6852      	ldr	r2, [r2, #4]
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	4611      	mov	r1, r2
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
  }

  return USBD_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062da:	b480      	push	{r7}
 80062dc:	b087      	sub	sp, #28
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	3301      	adds	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062f8:	8a3b      	ldrh	r3, [r7, #16]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	b21a      	sxth	r2, r3
 80062fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006302:	4313      	orrs	r3, r2
 8006304:	b21b      	sxth	r3, r3
 8006306:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006308:	89fb      	ldrh	r3, [r7, #14]
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800632e:	2b20      	cmp	r3, #32
 8006330:	d004      	beq.n	800633c <USBD_StdDevReq+0x24>
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d002      	beq.n	800633c <USBD_StdDevReq+0x24>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <USBD_StdDevReq+0x38>
 800633a:	e050      	b.n	80063de <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
 800634a:	4603      	mov	r3, r0
 800634c:	73fb      	strb	r3, [r7, #15]
    break;
 800634e:	e04b      	b.n	80063e8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b09      	cmp	r3, #9
 8006356:	d83c      	bhi.n	80063d2 <USBD_StdDevReq+0xba>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <USBD_StdDevReq+0x48>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	080063b5 	.word	0x080063b5
 8006364:	080063c9 	.word	0x080063c9
 8006368:	080063d3 	.word	0x080063d3
 800636c:	080063bf 	.word	0x080063bf
 8006370:	080063d3 	.word	0x080063d3
 8006374:	08006393 	.word	0x08006393
 8006378:	08006389 	.word	0x08006389
 800637c:	080063d3 	.word	0x080063d3
 8006380:	080063ab 	.word	0x080063ab
 8006384:	0800639d 	.word	0x0800639d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9d0 	bl	8006730 <USBD_GetDescriptor>
      break;
 8006390:	e024      	b.n	80063dc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fb5f 	bl	8006a58 <USBD_SetAddress>
      break;
 800639a:	e01f      	b.n	80063dc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fb9c 	bl	8006adc <USBD_SetConfig>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
      break;
 80063a8:	e018      	b.n	80063dc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fc39 	bl	8006c24 <USBD_GetConfig>
      break;
 80063b2:	e013      	b.n	80063dc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fc68 	bl	8006c8c <USBD_GetStatus>
      break;
 80063bc:	e00e      	b.n	80063dc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc96 	bl	8006cf2 <USBD_SetFeature>
      break;
 80063c6:	e009      	b.n	80063dc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fca5 	bl	8006d1a <USBD_ClrFeature>
      break;
 80063d0:	e004      	b.n	80063dc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fcfb 	bl	8006dd0 <USBD_CtlError>
      break;
 80063da:	bf00      	nop
    }
    break;
 80063dc:	e004      	b.n	80063e8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fcf5 	bl	8006dd0 <USBD_CtlError>
    break;
 80063e6:	bf00      	nop
  }

  return ret;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800640a:	2b20      	cmp	r3, #32
 800640c:	d003      	beq.n	8006416 <USBD_StdItfReq+0x22>
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d001      	beq.n	8006416 <USBD_StdItfReq+0x22>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d12a      	bne.n	800646c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641c:	3b01      	subs	r3, #1
 800641e:	2b02      	cmp	r3, #2
 8006420:	d81d      	bhi.n	800645e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	889b      	ldrh	r3, [r3, #4]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d813      	bhi.n	8006454 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88db      	ldrh	r3, [r3, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d110      	bne.n	8006468 <USBD_StdItfReq+0x74>
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10d      	bne.n	8006468 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fd8a 	bl	8006f66 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006452:	e009      	b.n	8006468 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fcba 	bl	8006dd0 <USBD_CtlError>
      break;
 800645c:	e004      	b.n	8006468 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fcb5 	bl	8006dd0 <USBD_CtlError>
      break;
 8006466:	e000      	b.n	800646a <USBD_StdItfReq+0x76>
      break;
 8006468:	bf00      	nop
    }
    break;
 800646a:	e004      	b.n	8006476 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fcae 	bl	8006dd0 <USBD_CtlError>
    break;
 8006474:	bf00      	nop
  }

  return ret;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	889b      	ldrh	r3, [r3, #4]
 8006492:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800649c:	2b20      	cmp	r3, #32
 800649e:	d004      	beq.n	80064aa <USBD_StdEPReq+0x2a>
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d002      	beq.n	80064aa <USBD_StdEPReq+0x2a>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <USBD_StdEPReq+0x3e>
 80064a8:	e137      	b.n	800671a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
    break;
 80064bc:	e132      	b.n	8006724 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d03e      	beq.n	8006544 <USBD_StdEPReq+0xc4>
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d002      	beq.n	80064d0 <USBD_StdEPReq+0x50>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d079      	beq.n	80065c2 <USBD_StdEPReq+0x142>
 80064ce:	e11e      	b.n	800670e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d002      	beq.n	80064e0 <USBD_StdEPReq+0x60>
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d015      	beq.n	800650a <USBD_StdEPReq+0x8a>
 80064de:	e02b      	b.n	8006538 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <USBD_StdEPReq+0x80>
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d009      	beq.n	8006500 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 f9cf 	bl	8007894 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064f6:	2180      	movs	r1, #128	; 0x80
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 f9cb 	bl	8007894 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80064fe:	e020      	b.n	8006542 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fc64 	bl	8006dd0 <USBD_CtlError>
        break;
 8006508:	e01b      	b.n	8006542 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	885b      	ldrh	r3, [r3, #2]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10e      	bne.n	8006530 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <USBD_StdEPReq+0xb0>
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	2b80      	cmp	r3, #128	; 0x80
 800651c:	d008      	beq.n	8006530 <USBD_StdEPReq+0xb0>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88db      	ldrh	r3, [r3, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 f9b2 	bl	8007894 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fd18 	bl	8006f66 <USBD_CtlSendStatus>

        break;
 8006536:	e004      	b.n	8006542 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fc48 	bl	8006dd0 <USBD_CtlError>
        break;
 8006540:	bf00      	nop
      }
      break;
 8006542:	e0e9      	b.n	8006718 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	2b02      	cmp	r3, #2
 800654c:	d002      	beq.n	8006554 <USBD_StdEPReq+0xd4>
 800654e:	2b03      	cmp	r3, #3
 8006550:	d015      	beq.n	800657e <USBD_StdEPReq+0xfe>
 8006552:	e02f      	b.n	80065b4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00c      	beq.n	8006574 <USBD_StdEPReq+0xf4>
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d009      	beq.n	8006574 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 f995 	bl	8007894 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 f991 	bl	8007894 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006572:	e025      	b.n	80065c0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fc2a 	bl	8006dd0 <USBD_CtlError>
        break;
 800657c:	e020      	b.n	80065c0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d11b      	bne.n	80065be <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f9b3 	bl	8007900 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fce3 	bl	8006f66 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065b2:	e004      	b.n	80065be <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fc0a 	bl	8006dd0 <USBD_CtlError>
        break;
 80065bc:	e000      	b.n	80065c0 <USBD_StdEPReq+0x140>
        break;
 80065be:	bf00      	nop
      }
      break;
 80065c0:	e0aa      	b.n	8006718 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d002      	beq.n	80065d2 <USBD_StdEPReq+0x152>
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d032      	beq.n	8006636 <USBD_StdEPReq+0x1b6>
 80065d0:	e097      	b.n	8006702 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <USBD_StdEPReq+0x168>
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	2b80      	cmp	r3, #128	; 0x80
 80065dc:	d004      	beq.n	80065e8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fbf5 	bl	8006dd0 <USBD_CtlError>
          break;
 80065e6:	e091      	b.n	800670c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da0b      	bge.n	8006608 <USBD_StdEPReq+0x188>
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	3310      	adds	r3, #16
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	e00b      	b.n	8006620 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4413      	add	r3, r2
 800661e:	3304      	adds	r3, #4
 8006620:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2202      	movs	r2, #2
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fc3f 	bl	8006eb2 <USBD_CtlSendData>
        break;
 8006634:	e06a      	b.n	800670c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	da11      	bge.n	8006662 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	f003 020f 	and.w	r2, r3, #15
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	3324      	adds	r3, #36	; 0x24
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d117      	bne.n	8006688 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fbb8 	bl	8006dd0 <USBD_CtlError>
            break;
 8006660:	e054      	b.n	800670c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	f003 020f 	and.w	r2, r3, #15
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fba5 	bl	8006dd0 <USBD_CtlError>
            break;
 8006686:	e041      	b.n	800670c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da0b      	bge.n	80066a8 <USBD_StdEPReq+0x228>
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	3310      	adds	r3, #16
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	3304      	adds	r3, #4
 80066a6:	e00b      	b.n	80066c0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	3304      	adds	r3, #4
 80066c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <USBD_StdEPReq+0x24e>
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d103      	bne.n	80066d6 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e00e      	b.n	80066f4 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f946 	bl	800796c <USBD_LL_IsStallEP>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e002      	b.n	80066f4 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2202      	movs	r2, #2
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fbd9 	bl	8006eb2 <USBD_CtlSendData>
          break;
 8006700:	e004      	b.n	800670c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb63 	bl	8006dd0 <USBD_CtlError>
        break;
 800670a:	bf00      	nop
      }
      break;
 800670c:	e004      	b.n	8006718 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fb5d 	bl	8006dd0 <USBD_CtlError>
      break;
 8006716:	bf00      	nop
    }
    break;
 8006718:	e004      	b.n	8006724 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fb57 	bl	8006dd0 <USBD_CtlError>
    break;
 8006722:	bf00      	nop
  }

  return ret;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	885b      	ldrh	r3, [r3, #2]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	2b0e      	cmp	r3, #14
 8006752:	f200 8152 	bhi.w	80069fa <USBD_GetDescriptor+0x2ca>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBD_GetDescriptor+0x2c>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	080067cd 	.word	0x080067cd
 8006760:	080067e5 	.word	0x080067e5
 8006764:	08006825 	.word	0x08006825
 8006768:	080069fb 	.word	0x080069fb
 800676c:	080069fb 	.word	0x080069fb
 8006770:	0800699b 	.word	0x0800699b
 8006774:	080069c7 	.word	0x080069c7
 8006778:	080069fb 	.word	0x080069fb
 800677c:	080069fb 	.word	0x080069fb
 8006780:	080069fb 	.word	0x080069fb
 8006784:	080069fb 	.word	0x080069fb
 8006788:	080069fb 	.word	0x080069fb
 800678c:	080069fb 	.word	0x080069fb
 8006790:	080069fb 	.word	0x080069fb
 8006794:	08006799 	.word	0x08006799
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80067ba:	e126      	b.n	8006a0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fb06 	bl	8006dd0 <USBD_CtlError>
      err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
    break;
 80067ca:	e11e      	b.n	8006a0a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	7c12      	ldrb	r2, [r2, #16]
 80067d8:	f107 0108 	add.w	r1, r7, #8
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	60f8      	str	r0, [r7, #12]
    break;
 80067e2:	e112      	b.n	8006a0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7c1b      	ldrb	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f107 0208 	add.w	r2, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	2202      	movs	r2, #2
 8006804:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006806:	e100      	b.n	8006a0a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	f107 0208 	add.w	r2, r7, #8
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	2202      	movs	r2, #2
 8006820:	701a      	strb	r2, [r3, #0]
    break;
 8006822:	e0f2      	b.n	8006a0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	885b      	ldrh	r3, [r3, #2]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b05      	cmp	r3, #5
 800682c:	f200 80ac 	bhi.w	8006988 <USBD_GetDescriptor+0x258>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USBD_GetDescriptor+0x108>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006851 	.word	0x08006851
 800683c:	08006885 	.word	0x08006885
 8006840:	080068b9 	.word	0x080068b9
 8006844:	080068ed 	.word	0x080068ed
 8006848:	08006921 	.word	0x08006921
 800684c:	08006955 	.word	0x08006955
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006872:	e091      	b.n	8006998 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 faaa 	bl	8006dd0 <USBD_CtlError>
        err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
      break;
 8006882:	e089      	b.n	8006998 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 0108 	add.w	r1, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068a6:	e077      	b.n	8006998 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa90 	bl	8006dd0 <USBD_CtlError>
        err++;
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	3301      	adds	r3, #1
 80068b4:	72fb      	strb	r3, [r7, #11]
      break;
 80068b6:	e06f      	b.n	8006998 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	7c12      	ldrb	r2, [r2, #16]
 80068d0:	f107 0108 	add.w	r1, r7, #8
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
 80068d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068da:	e05d      	b.n	8006998 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa76 	bl	8006dd0 <USBD_CtlError>
        err++;
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	3301      	adds	r3, #1
 80068e8:	72fb      	strb	r3, [r7, #11]
      break;
 80068ea:	e055      	b.n	8006998 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	7c12      	ldrb	r2, [r2, #16]
 8006904:	f107 0108 	add.w	r1, r7, #8
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
 800690c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690e:	e043      	b.n	8006998 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa5c 	bl	8006dd0 <USBD_CtlError>
        err++;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	3301      	adds	r3, #1
 800691c:	72fb      	strb	r3, [r7, #11]
      break;
 800691e:	e03b      	b.n	8006998 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006942:	e029      	b.n	8006998 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa42 	bl	8006dd0 <USBD_CtlError>
        err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
      break;
 8006952:	e021      	b.n	8006998 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006976:	e00f      	b.n	8006998 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa28 	bl	8006dd0 <USBD_CtlError>
        err++;
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	3301      	adds	r3, #1
 8006984:	72fb      	strb	r3, [r7, #11]
      break;
 8006986:	e007      	b.n	8006998 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa20 	bl	8006dd0 <USBD_CtlError>
      err++;
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	3301      	adds	r3, #1
 8006994:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006996:	bf00      	nop
    }
    break;
 8006998:	e037      	b.n	8006a0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7c1b      	ldrb	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069aa:	f107 0208 	add.w	r2, r7, #8
 80069ae:	4610      	mov	r0, r2
 80069b0:	4798      	blx	r3
 80069b2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80069b4:	e029      	b.n	8006a0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa09 	bl	8006dd0 <USBD_CtlError>
      err++;
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	3301      	adds	r3, #1
 80069c2:	72fb      	strb	r3, [r7, #11]
    break;
 80069c4:	e021      	b.n	8006a0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7c1b      	ldrb	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10d      	bne.n	80069ea <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f107 0208 	add.w	r2, r7, #8
 80069da:	4610      	mov	r0, r2
 80069dc:	4798      	blx	r3
 80069de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	2207      	movs	r2, #7
 80069e6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80069e8:	e00f      	b.n	8006a0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9ef 	bl	8006dd0 <USBD_CtlError>
      err++;
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	3301      	adds	r3, #1
 80069f6:	72fb      	strb	r3, [r7, #11]
    break;
 80069f8:	e007      	b.n	8006a0a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f9e7 	bl	8006dd0 <USBD_CtlError>
    err++;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	3301      	adds	r3, #1
 8006a06:	72fb      	strb	r3, [r7, #11]
    break;
 8006a08:	bf00      	nop
  }

  if (err != 0U)
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d11e      	bne.n	8006a4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d016      	beq.n	8006a46 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	88da      	ldrh	r2, [r3, #6]
 8006a22:	893b      	ldrh	r3, [r7, #8]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bf28      	it	cs
 8006a28:	4613      	movcs	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a2e:	893b      	ldrh	r3, [r7, #8]
 8006a30:	461a      	mov	r2, r3
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa3c 	bl	8006eb2 <USBD_CtlSendData>
 8006a3a:	e009      	b.n	8006a50 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9c6 	bl	8006dd0 <USBD_CtlError>
 8006a44:	e004      	b.n	8006a50 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa8d 	bl	8006f66 <USBD_CtlSendStatus>
 8006a4c:	e000      	b.n	8006a50 <USBD_GetDescriptor+0x320>
    return;
 8006a4e:	bf00      	nop
    }
  }
}
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop

08006a58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	889b      	ldrh	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d130      	bne.n	8006acc <USBD_SetAddress+0x74>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	88db      	ldrh	r3, [r3, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12c      	bne.n	8006acc <USBD_SetAddress+0x74>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	885b      	ldrh	r3, [r3, #2]
 8006a76:	2b7f      	cmp	r3, #127	; 0x7f
 8006a78:	d828      	bhi.n	8006acc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	885b      	ldrh	r3, [r3, #2]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d104      	bne.n	8006a9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f99c 	bl	8006dd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a98:	e01c      	b.n	8006ad4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7bfa      	ldrb	r2, [r7, #15]
 8006a9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 ff8c 	bl	80079c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa5a 	bl	8006f66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac0:	e008      	b.n	8006ad4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aca:	e003      	b.n	8006ad4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f97e 	bl	8006dd0 <USBD_CtlError>
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	885b      	ldrh	r3, [r3, #2]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <USBD_SetConfig+0x144>)
 8006af2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006af4:	4b4a      	ldr	r3, [pc, #296]	; (8006c20 <USBD_SetConfig+0x144>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d905      	bls.n	8006b08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f966 	bl	8006dd0 <USBD_CtlError>
    return USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e087      	b.n	8006c18 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d002      	beq.n	8006b18 <USBD_SetConfig+0x3c>
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d025      	beq.n	8006b62 <USBD_SetConfig+0x86>
 8006b16:	e071      	b.n	8006bfc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006b18:	4b41      	ldr	r3, [pc, #260]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01c      	beq.n	8006b5a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006b20:	4b3f      	ldr	r3, [pc, #252]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b2a:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff f97b 	bl	8005e2c <USBD_SetClassConfig>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f944 	bl	8006dd0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b48:	e065      	b.n	8006c16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa0b 	bl	8006f66 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2203      	movs	r2, #3
 8006b54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006b58:	e05d      	b.n	8006c16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa03 	bl	8006f66 <USBD_CtlSendStatus>
    break;
 8006b60:	e059      	b.n	8006c16 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006b62:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d112      	bne.n	8006b90 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006b72:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b7c:	4b28      	ldr	r3, [pc, #160]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff f96e 	bl	8005e64 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f9ec 	bl	8006f66 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b8e:	e042      	b.n	8006c16 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006b90:	4b23      	ldr	r3, [pc, #140]	; (8006c20 <USBD_SetConfig+0x144>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d02a      	beq.n	8006bf4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff f95c 	bl	8005e64 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006bac:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <USBD_SetConfig+0x144>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <USBD_SetConfig+0x144>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff f935 	bl	8005e2c <USBD_SetClassConfig>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00f      	beq.n	8006bec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8fe 	bl	8006dd0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff f941 	bl	8005e64 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006bea:	e014      	b.n	8006c16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9ba 	bl	8006f66 <USBD_CtlSendStatus>
    break;
 8006bf2:	e010      	b.n	8006c16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9b6 	bl	8006f66 <USBD_CtlSendStatus>
    break;
 8006bfa:	e00c      	b.n	8006c16 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8e6 	bl	8006dd0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <USBD_SetConfig+0x144>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f92a 	bl	8005e64 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006c10:	2303      	movs	r3, #3
 8006c12:	73fb      	strb	r3, [r7, #15]
    break;
 8006c14:	bf00      	nop
  }

  return ret;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000260 	.word	0x20000260

08006c24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d004      	beq.n	8006c40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f8c9 	bl	8006dd0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006c3e:	e021      	b.n	8006c84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	db17      	blt.n	8006c7a <USBD_GetConfig+0x56>
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	dd02      	ble.n	8006c54 <USBD_GetConfig+0x30>
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d00b      	beq.n	8006c6a <USBD_GetConfig+0x46>
 8006c52:	e012      	b.n	8006c7a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f925 	bl	8006eb2 <USBD_CtlSendData>
      break;
 8006c68:	e00c      	b.n	8006c84 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f91d 	bl	8006eb2 <USBD_CtlSendData>
      break;
 8006c78:	e004      	b.n	8006c84 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f8a7 	bl	8006dd0 <USBD_CtlError>
      break;
 8006c82:	bf00      	nop
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d81e      	bhi.n	8006ce0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d004      	beq.n	8006cb4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f88f 	bl	8006dd0 <USBD_CtlError>
      break;
 8006cb2:	e01a      	b.n	8006cea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f043 0202 	orr.w	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8ea 	bl	8006eb2 <USBD_CtlSendData>
    break;
 8006cde:	e004      	b.n	8006cea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f874 	bl	8006dd0 <USBD_CtlError>
    break;
 8006ce8:	bf00      	nop
  }
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	885b      	ldrh	r3, [r3, #2]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d106      	bne.n	8006d12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f92a 	bl	8006f66 <USBD_CtlSendStatus>
  }
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d80b      	bhi.n	8006d48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	885b      	ldrh	r3, [r3, #2]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10c      	bne.n	8006d52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f910 	bl	8006f66 <USBD_CtlSendStatus>
      }
      break;
 8006d46:	e004      	b.n	8006d52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f840 	bl	8006dd0 <USBD_CtlError>
      break;
 8006d50:	e000      	b.n	8006d54 <USBD_ClrFeature+0x3a>
      break;
 8006d52:	bf00      	nop
  }
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff faa7 	bl	80062da <SWAPBYTE>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff fa9a 	bl	80062da <SWAPBYTE>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fa8d 	bl	80062da <SWAPBYTE>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	80da      	strh	r2, [r3, #6]
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fd59 	bl	8007894 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006de2:	2100      	movs	r1, #0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fd55 	bl	8007894 <USBD_LL_StallEP>
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b086      	sub	sp, #24
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d036      	beq.n	8006e76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e0c:	6938      	ldr	r0, [r7, #16]
 8006e0e:	f000 f836 	bl	8006e7e <USBD_GetLen>
 8006e12:	4603      	mov	r3, r0
 8006e14:	3301      	adds	r3, #1
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	4413      	add	r3, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	4413      	add	r3, r2
 8006e38:	2203      	movs	r2, #3
 8006e3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e42:	e013      	b.n	8006e6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	7812      	ldrb	r2, [r2, #0]
 8006e4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	3301      	adds	r3, #1
 8006e54:	613b      	str	r3, [r7, #16]
    idx++;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4413      	add	r3, r2
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e7      	bne.n	8006e44 <USBD_GetString+0x52>
 8006e74:	e000      	b.n	8006e78 <USBD_GetString+0x86>
    return;
 8006e76:	bf00      	nop
  }
}
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e8e:	e005      	b.n	8006e9c <USBD_GetLen+0x1e>
  {
    len++;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	3301      	adds	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f5      	bne.n	8006e90 <USBD_GetLen+0x12>
  }

  return len;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fda9 	bl	8007a30 <USBD_LL_Transmit>

  return USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 fd98 	bl	8007a30 <USBD_LL_Transmit>

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2203      	movs	r2, #3
 8006f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fdb3 	bl	8007aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	2100      	movs	r1, #0
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fda2 	bl	8007aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f76:	2300      	movs	r3, #0
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fd57 	bl	8007a30 <USBD_LL_Transmit>

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2205      	movs	r2, #5
 8006f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fd7c 	bl	8007aa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4912      	ldr	r1, [pc, #72]	; (8007004 <MX_USB_DEVICE_Init+0x50>)
 8006fbc:	4812      	ldr	r0, [pc, #72]	; (8007008 <MX_USB_DEVICE_Init+0x54>)
 8006fbe:	f7fe fec7 	bl	8005d50 <USBD_Init>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006fc8:	f7f9 fc20 	bl	800080c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fcc:	490f      	ldr	r1, [pc, #60]	; (800700c <MX_USB_DEVICE_Init+0x58>)
 8006fce:	480e      	ldr	r0, [pc, #56]	; (8007008 <MX_USB_DEVICE_Init+0x54>)
 8006fd0:	f7fe feee 	bl	8005db0 <USBD_RegisterClass>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006fda:	f7f9 fc17 	bl	800080c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fde:	490c      	ldr	r1, [pc, #48]	; (8007010 <MX_USB_DEVICE_Init+0x5c>)
 8006fe0:	4809      	ldr	r0, [pc, #36]	; (8007008 <MX_USB_DEVICE_Init+0x54>)
 8006fe2:	f7fe fe19 	bl	8005c18 <USBD_CDC_RegisterInterface>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006fec:	f7f9 fc0e 	bl	800080c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ff0:	4805      	ldr	r0, [pc, #20]	; (8007008 <MX_USB_DEVICE_Init+0x54>)
 8006ff2:	f7fe ff04 	bl	8005dfe <USBD_Start>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ffc:	f7f9 fc06 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007000:	bf00      	nop
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000130 	.word	0x20000130
 8007008:	20000270 	.word	0x20000270
 800700c:	20000018 	.word	0x20000018
 8007010:	2000011c 	.word	0x2000011c

08007014 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007018:	2200      	movs	r2, #0
 800701a:	4905      	ldr	r1, [pc, #20]	; (8007030 <CDC_Init_FS+0x1c>)
 800701c:	4805      	ldr	r0, [pc, #20]	; (8007034 <CDC_Init_FS+0x20>)
 800701e:	f7fe fe10 	bl	8005c42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007022:	4905      	ldr	r1, [pc, #20]	; (8007038 <CDC_Init_FS+0x24>)
 8007024:	4803      	ldr	r0, [pc, #12]	; (8007034 <CDC_Init_FS+0x20>)
 8007026:	f7fe fe25 	bl	8005c74 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800702a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000d40 	.word	0x20000d40
 8007034:	20000270 	.word	0x20000270
 8007038:	20000540 	.word	0x20000540

0800703c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007040:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007042:	4618      	mov	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
 8007058:	4613      	mov	r3, r2
 800705a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	2b23      	cmp	r3, #35	; 0x23
 8007060:	d84a      	bhi.n	80070f8 <CDC_Control_FS+0xac>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <CDC_Control_FS+0x1c>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	080070f9 	.word	0x080070f9
 800706c:	080070f9 	.word	0x080070f9
 8007070:	080070f9 	.word	0x080070f9
 8007074:	080070f9 	.word	0x080070f9
 8007078:	080070f9 	.word	0x080070f9
 800707c:	080070f9 	.word	0x080070f9
 8007080:	080070f9 	.word	0x080070f9
 8007084:	080070f9 	.word	0x080070f9
 8007088:	080070f9 	.word	0x080070f9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080070f9 	.word	0x080070f9
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080070f9 	.word	0x080070f9
 800709c:	080070f9 	.word	0x080070f9
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	080070f9 	.word	0x080070f9
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070f9 	.word	0x080070f9
 80070b4:	080070f9 	.word	0x080070f9
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	080070f9 	.word	0x080070f9
 80070cc:	080070f9 	.word	0x080070f9
 80070d0:	080070f9 	.word	0x080070f9
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	080070f9 	.word	0x080070f9
 80070dc:	080070f9 	.word	0x080070f9
 80070e0:	080070f9 	.word	0x080070f9
 80070e4:	080070f9 	.word	0x080070f9
 80070e8:	080070f9 	.word	0x080070f9
 80070ec:	080070f9 	.word	0x080070f9
 80070f0:	080070f9 	.word	0x080070f9
 80070f4:	080070f9 	.word	0x080070f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070f8:	bf00      	nop
  }

  return (USBD_OK);
 80070fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4805      	ldr	r0, [pc, #20]	; (800712c <CDC_Receive_FS+0x24>)
 8007116:	f7fe fdad 	bl	8005c74 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800711a:	4804      	ldr	r0, [pc, #16]	; (800712c <CDC_Receive_FS+0x24>)
 800711c:	f7fe fdee 	bl	8005cfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007120:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000270 	.word	0x20000270

08007130 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007140:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <CDC_Transmit_FS+0x48>)
 8007142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007146:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007152:	2301      	movs	r3, #1
 8007154:	e00b      	b.n	800716e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007156:	887b      	ldrh	r3, [r7, #2]
 8007158:	461a      	mov	r2, r3
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4806      	ldr	r0, [pc, #24]	; (8007178 <CDC_Transmit_FS+0x48>)
 800715e:	f7fe fd70 	bl	8005c42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007162:	4805      	ldr	r0, [pc, #20]	; (8007178 <CDC_Transmit_FS+0x48>)
 8007164:	f7fe fd9a 	bl	8005c9c <USBD_CDC_TransmitPacket>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000270 	.word	0x20000270

0800717c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800718e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007192:	4618      	mov	r0, r3
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2212      	movs	r2, #18
 80071b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071b2:	4b03      	ldr	r3, [pc, #12]	; (80071c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000150 	.word	0x20000150

080071c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2204      	movs	r2, #4
 80071d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071d6:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000170 	.word	0x20000170

080071e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4907      	ldr	r1, [pc, #28]	; (800721c <USBD_FS_ProductStrDescriptor+0x34>)
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <USBD_FS_ProductStrDescriptor+0x38>)
 8007200:	f7ff fdf7 	bl	8006df2 <USBD_GetString>
 8007204:	e004      	b.n	8007210 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4904      	ldr	r1, [pc, #16]	; (800721c <USBD_FS_ProductStrDescriptor+0x34>)
 800720a:	4805      	ldr	r0, [pc, #20]	; (8007220 <USBD_FS_ProductStrDescriptor+0x38>)
 800720c:	f7ff fdf1 	bl	8006df2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20001540 	.word	0x20001540
 8007220:	080084d4 	.word	0x080084d4

08007224 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	4904      	ldr	r1, [pc, #16]	; (8007244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007234:	4804      	ldr	r0, [pc, #16]	; (8007248 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007236:	f7ff fddc 	bl	8006df2 <USBD_GetString>
  return USBD_StrDesc;
 800723a:	4b02      	ldr	r3, [pc, #8]	; (8007244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20001540 	.word	0x20001540
 8007248:	080084ec 	.word	0x080084ec

0800724c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	6039      	str	r1, [r7, #0]
 8007256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	221a      	movs	r2, #26
 800725c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800725e:	f000 f855 	bl	800730c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007262:	4b02      	ldr	r3, [pc, #8]	; (800726c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000174 	.word	0x20000174

08007270 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4907      	ldr	r1, [pc, #28]	; (80072a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007286:	4808      	ldr	r0, [pc, #32]	; (80072a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007288:	f7ff fdb3 	bl	8006df2 <USBD_GetString>
 800728c:	e004      	b.n	8007298 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	4904      	ldr	r1, [pc, #16]	; (80072a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007292:	4805      	ldr	r0, [pc, #20]	; (80072a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007294:	f7ff fdad 	bl	8006df2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007298:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20001540 	.word	0x20001540
 80072a8:	08008500 	.word	0x08008500

080072ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	6039      	str	r1, [r7, #0]
 80072b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	4907      	ldr	r1, [pc, #28]	; (80072e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072c2:	4808      	ldr	r0, [pc, #32]	; (80072e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072c4:	f7ff fd95 	bl	8006df2 <USBD_GetString>
 80072c8:	e004      	b.n	80072d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	4904      	ldr	r1, [pc, #16]	; (80072e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ce:	4805      	ldr	r0, [pc, #20]	; (80072e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072d0:	f7ff fd8f 	bl	8006df2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072d4:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20001540 	.word	0x20001540
 80072e4:	0800850c 	.word	0x0800850c

080072e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	220c      	movs	r2, #12
 80072f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80072fa:	4b03      	ldr	r3, [pc, #12]	; (8007308 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	20000164 	.word	0x20000164

0800730c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007312:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <Get_SerialNum+0x44>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007318:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <Get_SerialNum+0x48>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800731e:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <Get_SerialNum+0x4c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4413      	add	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007332:	2208      	movs	r2, #8
 8007334:	4909      	ldr	r1, [pc, #36]	; (800735c <Get_SerialNum+0x50>)
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f814 	bl	8007364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800733c:	2204      	movs	r2, #4
 800733e:	4908      	ldr	r1, [pc, #32]	; (8007360 <Get_SerialNum+0x54>)
 8007340:	68b8      	ldr	r0, [r7, #8]
 8007342:	f000 f80f 	bl	8007364 <IntToUnicode>
  }
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	1fff7590 	.word	0x1fff7590
 8007354:	1fff7594 	.word	0x1fff7594
 8007358:	1fff7598 	.word	0x1fff7598
 800735c:	20000176 	.word	0x20000176
 8007360:	20000186 	.word	0x20000186

08007364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]
 800737a:	e027      	b.n	80073cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	0f1b      	lsrs	r3, r3, #28
 8007380:	2b09      	cmp	r3, #9
 8007382:	d80b      	bhi.n	800739c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	0f1b      	lsrs	r3, r3, #28
 8007388:	b2da      	uxtb	r2, r3
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4619      	mov	r1, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	440b      	add	r3, r1
 8007394:	3230      	adds	r2, #48	; 0x30
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	e00a      	b.n	80073b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	0f1b      	lsrs	r3, r3, #28
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4619      	mov	r1, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	440b      	add	r3, r1
 80073ac:	3237      	adds	r2, #55	; 0x37
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	3301      	adds	r3, #1
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4413      	add	r3, r2
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	3301      	adds	r3, #1
 80073ca:	75fb      	strb	r3, [r7, #23]
 80073cc:	7dfa      	ldrb	r2, [r7, #23]
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d3d3      	bcc.n	800737c <IntToUnicode+0x18>
  }
}
 80073d4:	bf00      	nop
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	605a      	str	r2, [r3, #4]
 80073f2:	609a      	str	r2, [r3, #8]
 80073f4:	60da      	str	r2, [r3, #12]
 80073f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007400:	d14e      	bne.n	80074a0 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007402:	4b29      	ldr	r3, [pc, #164]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	4a28      	ldr	r2, [pc, #160]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800740e:	4b26      	ldr	r3, [pc, #152]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800741a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800741e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007420:	2302      	movs	r3, #2
 8007422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007428:	2303      	movs	r3, #3
 800742a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800742c:	230a      	movs	r3, #10
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007430:	f107 0314 	add.w	r3, r7, #20
 8007434:	4619      	mov	r1, r3
 8007436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800743a:	f7f9 fe69 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007442:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 800744c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d114      	bne.n	800748c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746c:	6593      	str	r3, [r2, #88]	; 0x58
 800746e:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007476:	60bb      	str	r3, [r7, #8]
 8007478:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800747a:	f7fb f90f 	bl	800269c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <HAL_PCD_MspInit+0xc8>)
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	6593      	str	r3, [r2, #88]	; 0x58
 800748a:	e001      	b.n	8007490 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800748c:	f7fb f906 	bl	800269c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007490:	2200      	movs	r2, #0
 8007492:	2100      	movs	r1, #0
 8007494:	2043      	movs	r0, #67	; 0x43
 8007496:	f7f9 fe04 	bl	80010a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800749a:	2043      	movs	r0, #67	; 0x43
 800749c:	f7f9 fe1d 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074a0:	bf00      	nop
 80074a2:	3728      	adds	r7, #40	; 0x28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40021000 	.word	0x40021000

080074ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f7fe fce6 	bl	8005e94 <USBD_LL_SetupStage>
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7fe fd1e 	bl	8005f3a <USBD_LL_DataOutStage>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	3348      	adds	r3, #72	; 0x48
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	78fb      	ldrb	r3, [r7, #3]
 800752c:	4619      	mov	r1, r3
 800752e:	f7fe fd67 	bl	8006000 <USBD_LL_DataInStage>
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fe6b 	bl	8006224 <USBD_LL_SOF>
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800755e:	2301      	movs	r3, #1
 8007560:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d001      	beq.n	800756e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800756a:	f7f9 f94f 	bl	800080c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007574:	7bfa      	ldrb	r2, [r7, #15]
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fe18 	bl	80061ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe fdd1 	bl	800612c <USBD_LL_Reset>
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fe07 	bl	80061ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075c8:	4b04      	ldr	r3, [pc, #16]	; (80075dc <HAL_PCD_SuspendCallback+0x48>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	4a03      	ldr	r2, [pc, #12]	; (80075dc <HAL_PCD_SuspendCallback+0x48>)
 80075ce:	f043 0306 	orr.w	r3, r3, #6
 80075d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	e000ed00 	.word	0xe000ed00

080075e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007608:	4b08      	ldr	r3, [pc, #32]	; (800762c <HAL_PCD_ResumeCallback+0x4c>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	4a07      	ldr	r2, [pc, #28]	; (800762c <HAL_PCD_ResumeCallback+0x4c>)
 800760e:	f023 0306 	bic.w	r3, r3, #6
 8007612:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007614:	f000 fade 	bl	8007bd4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fdea 	bl	80061f8 <USBD_LL_Resume>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fe13 	bl	8006272 <USBD_LL_IsoOUTIncomplete>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fdf4 	bl	8006258 <USBD_LL_IsoINIncomplete>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fe00 	bl	800628c <USBD_LL_DevConnected>
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fdfd 	bl	80062a2 <USBD_LL_DevDisconnected>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d13c      	bne.n	800773a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076c0:	4a20      	ldr	r2, [pc, #128]	; (8007744 <USBD_LL_Init+0x94>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <USBD_LL_Init+0x94>)
 80076cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <USBD_LL_Init+0x94>)
 80076d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80076d8:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <USBD_LL_Init+0x94>)
 80076da:	2206      	movs	r2, #6
 80076dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076de:	4b19      	ldr	r3, [pc, #100]	; (8007744 <USBD_LL_Init+0x94>)
 80076e0:	2202      	movs	r2, #2
 80076e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <USBD_LL_Init+0x94>)
 80076e6:	2202      	movs	r2, #2
 80076e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076ea:	4b16      	ldr	r3, [pc, #88]	; (8007744 <USBD_LL_Init+0x94>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076f0:	4b14      	ldr	r3, [pc, #80]	; (8007744 <USBD_LL_Init+0x94>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <USBD_LL_Init+0x94>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <USBD_LL_Init+0x94>)
 80076fe:	2200      	movs	r2, #0
 8007700:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <USBD_LL_Init+0x94>)
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <USBD_LL_Init+0x94>)
 800770a:	2200      	movs	r2, #0
 800770c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800770e:	480d      	ldr	r0, [pc, #52]	; (8007744 <USBD_LL_Init+0x94>)
 8007710:	f7f9 fec0 	bl	8001494 <HAL_PCD_Init>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800771a:	f7f9 f877 	bl	800080c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800771e:	2180      	movs	r1, #128	; 0x80
 8007720:	4808      	ldr	r0, [pc, #32]	; (8007744 <USBD_LL_Init+0x94>)
 8007722:	f7fa ff22 	bl	800256a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	2100      	movs	r1, #0
 800772a:	4806      	ldr	r0, [pc, #24]	; (8007744 <USBD_LL_Init+0x94>)
 800772c:	f7fa fed6 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007730:	2280      	movs	r2, #128	; 0x80
 8007732:	2101      	movs	r1, #1
 8007734:	4803      	ldr	r0, [pc, #12]	; (8007744 <USBD_LL_Init+0x94>)
 8007736:	f7fa fed1 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20001740 	.word	0x20001740

08007748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775e:	4618      	mov	r0, r3
 8007760:	f7f9 ffbc 	bl	80016dc <HAL_PCD_Start>
 8007764:	4603      	mov	r3, r0
 8007766:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b03      	cmp	r3, #3
 800776c:	d816      	bhi.n	800779c <USBD_LL_Start+0x54>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <USBD_LL_Start+0x2c>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007785 	.word	0x08007785
 8007778:	0800778b 	.word	0x0800778b
 800777c:	08007791 	.word	0x08007791
 8007780:	08007797 	.word	0x08007797
    case HAL_OK :
      usb_status = USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
    break;
 8007788:	e00b      	b.n	80077a2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800778a:	2303      	movs	r3, #3
 800778c:	73fb      	strb	r3, [r7, #15]
    break;
 800778e:	e008      	b.n	80077a2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
    break;
 8007794:	e005      	b.n	80077a2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007796:	2303      	movs	r3, #3
 8007798:	73fb      	strb	r3, [r7, #15]
    break;
 800779a:	e002      	b.n	80077a2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	73fb      	strb	r3, [r7, #15]
    break;
 80077a0:	bf00      	nop
  }
  return usb_status;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	70fb      	strb	r3, [r7, #3]
 80077be:	460b      	mov	r3, r1
 80077c0:	70bb      	strb	r3, [r7, #2]
 80077c2:	4613      	mov	r3, r2
 80077c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077d4:	78bb      	ldrb	r3, [r7, #2]
 80077d6:	883a      	ldrh	r2, [r7, #0]
 80077d8:	78f9      	ldrb	r1, [r7, #3]
 80077da:	f7fa fb77 	bl	8001ecc <HAL_PCD_EP_Open>
 80077de:	4603      	mov	r3, r0
 80077e0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d817      	bhi.n	8007818 <USBD_LL_OpenEP+0x6c>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <USBD_LL_OpenEP+0x44>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007807 	.word	0x08007807
 80077f8:	0800780d 	.word	0x0800780d
 80077fc:	08007813 	.word	0x08007813
    case HAL_OK :
      usb_status = USBD_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
    break;
 8007804:	e00b      	b.n	800781e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007806:	2303      	movs	r3, #3
 8007808:	73fb      	strb	r3, [r7, #15]
    break;
 800780a:	e008      	b.n	800781e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	e005      	b.n	800781e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007812:	2303      	movs	r3, #3
 8007814:	73fb      	strb	r3, [r7, #15]
    break;
 8007816:	e002      	b.n	800781e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	73fb      	strb	r3, [r7, #15]
    break;
 800781c:	bf00      	nop
  }
  return usb_status;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fa fba8 	bl	8001f9c <HAL_PCD_EP_Close>
 800784c:	4603      	mov	r3, r0
 800784e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d816      	bhi.n	8007884 <USBD_LL_CloseEP+0x5c>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <USBD_LL_CloseEP+0x34>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	0800786d 	.word	0x0800786d
 8007860:	08007873 	.word	0x08007873
 8007864:	08007879 	.word	0x08007879
 8007868:	0800787f 	.word	0x0800787f
    case HAL_OK :
      usb_status = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
    break;
 8007870:	e00b      	b.n	800788a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	73fb      	strb	r3, [r7, #15]
    break;
 8007876:	e008      	b.n	800788a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
    break;
 800787c:	e005      	b.n	800788a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800787e:	2303      	movs	r3, #3
 8007880:	73fb      	strb	r3, [r7, #15]
    break;
 8007882:	e002      	b.n	800788a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007884:	2303      	movs	r3, #3
 8007886:	73fb      	strb	r3, [r7, #15]
    break;
 8007888:	bf00      	nop
  }
  return usb_status;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fa fc4f 	bl	8002156 <HAL_PCD_EP_SetStall>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d816      	bhi.n	80078f0 <USBD_LL_StallEP+0x5c>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBD_LL_StallEP+0x34>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078df 	.word	0x080078df
 80078d0:	080078e5 	.word	0x080078e5
 80078d4:	080078eb 	.word	0x080078eb
    case HAL_OK :
      usb_status = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
    break;
 80078dc:	e00b      	b.n	80078f6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078de:	2303      	movs	r3, #3
 80078e0:	73fb      	strb	r3, [r7, #15]
    break;
 80078e2:	e008      	b.n	80078f6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
    break;
 80078e8:	e005      	b.n	80078f6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078ea:	2303      	movs	r3, #3
 80078ec:	73fb      	strb	r3, [r7, #15]
    break;
 80078ee:	e002      	b.n	80078f6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	73fb      	strb	r3, [r7, #15]
    break;
 80078f4:	bf00      	nop
  }
  return usb_status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7fa fc7b 	bl	800221a <HAL_PCD_EP_ClrStall>
 8007924:	4603      	mov	r3, r0
 8007926:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d816      	bhi.n	800795c <USBD_LL_ClearStallEP+0x5c>
 800792e:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBD_LL_ClearStallEP+0x34>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007945 	.word	0x08007945
 8007938:	0800794b 	.word	0x0800794b
 800793c:	08007951 	.word	0x08007951
 8007940:	08007957 	.word	0x08007957
    case HAL_OK :
      usb_status = USBD_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e00b      	b.n	8007962 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e008      	b.n	8007962 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	e005      	b.n	8007962 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007956:	2303      	movs	r3, #3
 8007958:	73fb      	strb	r3, [r7, #15]
    break;
 800795a:	e002      	b.n	8007962 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	73fb      	strb	r3, [r7, #15]
    break;
 8007960:	bf00      	nop
  }
  return usb_status;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800797e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007984:	2b00      	cmp	r3, #0
 8007986:	da0b      	bge.n	80079a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	4613      	mov	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	333e      	adds	r3, #62	; 0x3e
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	e00b      	b.n	80079b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fa fa4d 	bl	8001e82 <HAL_PCD_SetAddress>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d816      	bhi.n	8007a20 <USBD_LL_SetUSBAddress+0x5c>
 80079f2:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <USBD_LL_SetUSBAddress+0x34>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a0f 	.word	0x08007a0f
 8007a00:	08007a15 	.word	0x08007a15
 8007a04:	08007a1b 	.word	0x08007a1b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0c:	e00b      	b.n	8007a26 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	73fb      	strb	r3, [r7, #15]
    break;
 8007a12:	e008      	b.n	8007a26 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
    break;
 8007a18:	e005      	b.n	8007a26 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a1e:	e002      	b.n	8007a26 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
    break;
 8007a24:	bf00      	nop
  }
  return usb_status;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	607a      	str	r2, [r7, #4]
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a4e:	7af9      	ldrb	r1, [r7, #11]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	f7fa fb42 	bl	80020dc <HAL_PCD_EP_Transmit>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d816      	bhi.n	8007a90 <USBD_LL_Transmit+0x60>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USBD_LL_Transmit+0x38>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a7f 	.word	0x08007a7f
 8007a70:	08007a85 	.word	0x08007a85
 8007a74:	08007a8b 	.word	0x08007a8b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75fb      	strb	r3, [r7, #23]
    break;
 8007a7c:	e00b      	b.n	8007a96 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	75fb      	strb	r3, [r7, #23]
    break;
 8007a82:	e008      	b.n	8007a96 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a84:	2301      	movs	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
    break;
 8007a88:	e005      	b.n	8007a96 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	75fb      	strb	r3, [r7, #23]
    break;
 8007a8e:	e002      	b.n	8007a96 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	75fb      	strb	r3, [r7, #23]
    break;
 8007a94:	bf00      	nop
  }
  return usb_status;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	460b      	mov	r3, r1
 8007aae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007abe:	7af9      	ldrb	r1, [r7, #11]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	f7fa fab4 	bl	8002030 <HAL_PCD_EP_Receive>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007acc:	7dbb      	ldrb	r3, [r7, #22]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d816      	bhi.n	8007b00 <USBD_LL_PrepareReceive+0x60>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <USBD_LL_PrepareReceive+0x38>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007aef 	.word	0x08007aef
 8007ae0:	08007af5 	.word	0x08007af5
 8007ae4:	08007afb 	.word	0x08007afb
    case HAL_OK :
      usb_status = USBD_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	75fb      	strb	r3, [r7, #23]
    break;
 8007aec:	e00b      	b.n	8007b06 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aee:	2303      	movs	r3, #3
 8007af0:	75fb      	strb	r3, [r7, #23]
    break;
 8007af2:	e008      	b.n	8007b06 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
    break;
 8007af8:	e005      	b.n	8007b06 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007afa:	2303      	movs	r3, #3
 8007afc:	75fb      	strb	r3, [r7, #23]
    break;
 8007afe:	e002      	b.n	8007b06 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	75fb      	strb	r3, [r7, #23]
    break;
 8007b04:	bf00      	nop
  }
  return usb_status;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fa fac0 	bl	80020ac <HAL_PCD_EP_GetRxCount>
 8007b2c:	4603      	mov	r3, r0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_PCDEx_LPM_Callback+0x18>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d01f      	beq.n	8007b8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007b4e:	e03b      	b.n	8007bc8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007b58:	f000 f83c 	bl	8007bd4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	4a1b      	ldr	r2, [pc, #108]	; (8007bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b62:	f023 0306 	bic.w	r3, r3, #6
 8007b66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fb36 	bl	80061f8 <USBD_LL_Resume>
    break;
 8007b8c:	e01c      	b.n	8007bc8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe fb0e 	bl	80061ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bc0:	f043 0306 	orr.w	r3, r3, #6
 8007bc4:	6113      	str	r3, [r2, #16]
    break;
 8007bc6:	bf00      	nop
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	e000ed00 	.word	0xe000ed00

08007bd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007bd8:	f7f8 fc5c 	bl	8000494 <SystemClock_Config>
}
 8007bdc:	bf00      	nop
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <__errno>:
 8007be0:	4b01      	ldr	r3, [pc, #4]	; (8007be8 <__errno+0x8>)
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000190 	.word	0x20000190

08007bec <__libc_init_array>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	4e0d      	ldr	r6, [pc, #52]	; (8007c24 <__libc_init_array+0x38>)
 8007bf0:	4c0d      	ldr	r4, [pc, #52]	; (8007c28 <__libc_init_array+0x3c>)
 8007bf2:	1ba4      	subs	r4, r4, r6
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	42a5      	cmp	r5, r4
 8007bfa:	d109      	bne.n	8007c10 <__libc_init_array+0x24>
 8007bfc:	4e0b      	ldr	r6, [pc, #44]	; (8007c2c <__libc_init_array+0x40>)
 8007bfe:	4c0c      	ldr	r4, [pc, #48]	; (8007c30 <__libc_init_array+0x44>)
 8007c00:	f000 fc36 	bl	8008470 <_init>
 8007c04:	1ba4      	subs	r4, r4, r6
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	2500      	movs	r5, #0
 8007c0a:	42a5      	cmp	r5, r4
 8007c0c:	d105      	bne.n	8007c1a <__libc_init_array+0x2e>
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c14:	4798      	blx	r3
 8007c16:	3501      	adds	r5, #1
 8007c18:	e7ee      	b.n	8007bf8 <__libc_init_array+0xc>
 8007c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c1e:	4798      	blx	r3
 8007c20:	3501      	adds	r5, #1
 8007c22:	e7f2      	b.n	8007c0a <__libc_init_array+0x1e>
 8007c24:	08008590 	.word	0x08008590
 8007c28:	08008590 	.word	0x08008590
 8007c2c:	08008590 	.word	0x08008590
 8007c30:	08008594 	.word	0x08008594

08007c34 <malloc>:
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <malloc+0xc>)
 8007c36:	4601      	mov	r1, r0
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	f000 b861 	b.w	8007d00 <_malloc_r>
 8007c3e:	bf00      	nop
 8007c40:	20000190 	.word	0x20000190

08007c44 <free>:
 8007c44:	4b02      	ldr	r3, [pc, #8]	; (8007c50 <free+0xc>)
 8007c46:	4601      	mov	r1, r0
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f000 b80b 	b.w	8007c64 <_free_r>
 8007c4e:	bf00      	nop
 8007c50:	20000190 	.word	0x20000190

08007c54 <memset>:
 8007c54:	4402      	add	r2, r0
 8007c56:	4603      	mov	r3, r0
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d100      	bne.n	8007c5e <memset+0xa>
 8007c5c:	4770      	bx	lr
 8007c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c62:	e7f9      	b.n	8007c58 <memset+0x4>

08007c64 <_free_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4605      	mov	r5, r0
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d045      	beq.n	8007cf8 <_free_r+0x94>
 8007c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c70:	1f0c      	subs	r4, r1, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	18e4      	addlt	r4, r4, r3
 8007c78:	f000 f8cc 	bl	8007e14 <__malloc_lock>
 8007c7c:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <_free_r+0x98>)
 8007c7e:	6813      	ldr	r3, [r2, #0]
 8007c80:	4610      	mov	r0, r2
 8007c82:	b933      	cbnz	r3, 8007c92 <_free_r+0x2e>
 8007c84:	6063      	str	r3, [r4, #4]
 8007c86:	6014      	str	r4, [r2, #0]
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c8e:	f000 b8c2 	b.w	8007e16 <__malloc_unlock>
 8007c92:	42a3      	cmp	r3, r4
 8007c94:	d90c      	bls.n	8007cb0 <_free_r+0x4c>
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	1862      	adds	r2, r4, r1
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	bf04      	itt	eq
 8007c9e:	681a      	ldreq	r2, [r3, #0]
 8007ca0:	685b      	ldreq	r3, [r3, #4]
 8007ca2:	6063      	str	r3, [r4, #4]
 8007ca4:	bf04      	itt	eq
 8007ca6:	1852      	addeq	r2, r2, r1
 8007ca8:	6022      	streq	r2, [r4, #0]
 8007caa:	6004      	str	r4, [r0, #0]
 8007cac:	e7ec      	b.n	8007c88 <_free_r+0x24>
 8007cae:	4613      	mov	r3, r2
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	b10a      	cbz	r2, 8007cb8 <_free_r+0x54>
 8007cb4:	42a2      	cmp	r2, r4
 8007cb6:	d9fa      	bls.n	8007cae <_free_r+0x4a>
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	1858      	adds	r0, r3, r1
 8007cbc:	42a0      	cmp	r0, r4
 8007cbe:	d10b      	bne.n	8007cd8 <_free_r+0x74>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	4401      	add	r1, r0
 8007cc4:	1858      	adds	r0, r3, r1
 8007cc6:	4282      	cmp	r2, r0
 8007cc8:	6019      	str	r1, [r3, #0]
 8007cca:	d1dd      	bne.n	8007c88 <_free_r+0x24>
 8007ccc:	6810      	ldr	r0, [r2, #0]
 8007cce:	6852      	ldr	r2, [r2, #4]
 8007cd0:	605a      	str	r2, [r3, #4]
 8007cd2:	4401      	add	r1, r0
 8007cd4:	6019      	str	r1, [r3, #0]
 8007cd6:	e7d7      	b.n	8007c88 <_free_r+0x24>
 8007cd8:	d902      	bls.n	8007ce0 <_free_r+0x7c>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	e7d3      	b.n	8007c88 <_free_r+0x24>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	1821      	adds	r1, r4, r0
 8007ce4:	428a      	cmp	r2, r1
 8007ce6:	bf04      	itt	eq
 8007ce8:	6811      	ldreq	r1, [r2, #0]
 8007cea:	6852      	ldreq	r2, [r2, #4]
 8007cec:	6062      	str	r2, [r4, #4]
 8007cee:	bf04      	itt	eq
 8007cf0:	1809      	addeq	r1, r1, r0
 8007cf2:	6021      	streq	r1, [r4, #0]
 8007cf4:	605c      	str	r4, [r3, #4]
 8007cf6:	e7c7      	b.n	8007c88 <_free_r+0x24>
 8007cf8:	bd38      	pop	{r3, r4, r5, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000264 	.word	0x20000264

08007d00 <_malloc_r>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	1ccd      	adds	r5, r1, #3
 8007d04:	f025 0503 	bic.w	r5, r5, #3
 8007d08:	3508      	adds	r5, #8
 8007d0a:	2d0c      	cmp	r5, #12
 8007d0c:	bf38      	it	cc
 8007d0e:	250c      	movcc	r5, #12
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	4606      	mov	r6, r0
 8007d14:	db01      	blt.n	8007d1a <_malloc_r+0x1a>
 8007d16:	42a9      	cmp	r1, r5
 8007d18:	d903      	bls.n	8007d22 <_malloc_r+0x22>
 8007d1a:	230c      	movs	r3, #12
 8007d1c:	6033      	str	r3, [r6, #0]
 8007d1e:	2000      	movs	r0, #0
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	f000 f877 	bl	8007e14 <__malloc_lock>
 8007d26:	4a21      	ldr	r2, [pc, #132]	; (8007dac <_malloc_r+0xac>)
 8007d28:	6814      	ldr	r4, [r2, #0]
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	b991      	cbnz	r1, 8007d54 <_malloc_r+0x54>
 8007d2e:	4c20      	ldr	r4, [pc, #128]	; (8007db0 <_malloc_r+0xb0>)
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	b91b      	cbnz	r3, 8007d3c <_malloc_r+0x3c>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f000 f83d 	bl	8007db4 <_sbrk_r>
 8007d3a:	6020      	str	r0, [r4, #0]
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 f838 	bl	8007db4 <_sbrk_r>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d124      	bne.n	8007d92 <_malloc_r+0x92>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	6033      	str	r3, [r6, #0]
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f000 f862 	bl	8007e16 <__malloc_unlock>
 8007d52:	e7e4      	b.n	8007d1e <_malloc_r+0x1e>
 8007d54:	680b      	ldr	r3, [r1, #0]
 8007d56:	1b5b      	subs	r3, r3, r5
 8007d58:	d418      	bmi.n	8007d8c <_malloc_r+0x8c>
 8007d5a:	2b0b      	cmp	r3, #11
 8007d5c:	d90f      	bls.n	8007d7e <_malloc_r+0x7e>
 8007d5e:	600b      	str	r3, [r1, #0]
 8007d60:	50cd      	str	r5, [r1, r3]
 8007d62:	18cc      	adds	r4, r1, r3
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 f856 	bl	8007e16 <__malloc_unlock>
 8007d6a:	f104 000b 	add.w	r0, r4, #11
 8007d6e:	1d23      	adds	r3, r4, #4
 8007d70:	f020 0007 	bic.w	r0, r0, #7
 8007d74:	1ac3      	subs	r3, r0, r3
 8007d76:	d0d3      	beq.n	8007d20 <_malloc_r+0x20>
 8007d78:	425a      	negs	r2, r3
 8007d7a:	50e2      	str	r2, [r4, r3]
 8007d7c:	e7d0      	b.n	8007d20 <_malloc_r+0x20>
 8007d7e:	428c      	cmp	r4, r1
 8007d80:	684b      	ldr	r3, [r1, #4]
 8007d82:	bf16      	itet	ne
 8007d84:	6063      	strne	r3, [r4, #4]
 8007d86:	6013      	streq	r3, [r2, #0]
 8007d88:	460c      	movne	r4, r1
 8007d8a:	e7eb      	b.n	8007d64 <_malloc_r+0x64>
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	6849      	ldr	r1, [r1, #4]
 8007d90:	e7cc      	b.n	8007d2c <_malloc_r+0x2c>
 8007d92:	1cc4      	adds	r4, r0, #3
 8007d94:	f024 0403 	bic.w	r4, r4, #3
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d005      	beq.n	8007da8 <_malloc_r+0xa8>
 8007d9c:	1a21      	subs	r1, r4, r0
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f000 f808 	bl	8007db4 <_sbrk_r>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d0cf      	beq.n	8007d48 <_malloc_r+0x48>
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	e7db      	b.n	8007d64 <_malloc_r+0x64>
 8007dac:	20000264 	.word	0x20000264
 8007db0:	20000268 	.word	0x20000268

08007db4 <_sbrk_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4c06      	ldr	r4, [pc, #24]	; (8007dd0 <_sbrk_r+0x1c>)
 8007db8:	2300      	movs	r3, #0
 8007dba:	4605      	mov	r5, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	f7f8 ff68 	bl	8000c94 <_sbrk>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_sbrk_r+0x1a>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_sbrk_r+0x1a>
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20001b48 	.word	0x20001b48

08007dd4 <siprintf>:
 8007dd4:	b40e      	push	{r1, r2, r3}
 8007dd6:	b500      	push	{lr}
 8007dd8:	b09c      	sub	sp, #112	; 0x70
 8007dda:	ab1d      	add	r3, sp, #116	; 0x74
 8007ddc:	9002      	str	r0, [sp, #8]
 8007dde:	9006      	str	r0, [sp, #24]
 8007de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <siprintf+0x38>)
 8007de6:	9107      	str	r1, [sp, #28]
 8007de8:	9104      	str	r1, [sp, #16]
 8007dea:	4909      	ldr	r1, [pc, #36]	; (8007e10 <siprintf+0x3c>)
 8007dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df0:	9105      	str	r1, [sp, #20]
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	a902      	add	r1, sp, #8
 8007df8:	f000 f868 	bl	8007ecc <_svfiprintf_r>
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	b01c      	add	sp, #112	; 0x70
 8007e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e08:	b003      	add	sp, #12
 8007e0a:	4770      	bx	lr
 8007e0c:	20000190 	.word	0x20000190
 8007e10:	ffff0208 	.word	0xffff0208

08007e14 <__malloc_lock>:
 8007e14:	4770      	bx	lr

08007e16 <__malloc_unlock>:
 8007e16:	4770      	bx	lr

08007e18 <__ssputs_r>:
 8007e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	688e      	ldr	r6, [r1, #8]
 8007e1e:	429e      	cmp	r6, r3
 8007e20:	4682      	mov	sl, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	4690      	mov	r8, r2
 8007e26:	4699      	mov	r9, r3
 8007e28:	d837      	bhi.n	8007e9a <__ssputs_r+0x82>
 8007e2a:	898a      	ldrh	r2, [r1, #12]
 8007e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e30:	d031      	beq.n	8007e96 <__ssputs_r+0x7e>
 8007e32:	6825      	ldr	r5, [r4, #0]
 8007e34:	6909      	ldr	r1, [r1, #16]
 8007e36:	1a6f      	subs	r7, r5, r1
 8007e38:	6965      	ldr	r5, [r4, #20]
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e40:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e44:	f109 0301 	add.w	r3, r9, #1
 8007e48:	443b      	add	r3, r7
 8007e4a:	429d      	cmp	r5, r3
 8007e4c:	bf38      	it	cc
 8007e4e:	461d      	movcc	r5, r3
 8007e50:	0553      	lsls	r3, r2, #21
 8007e52:	d530      	bpl.n	8007eb6 <__ssputs_r+0x9e>
 8007e54:	4629      	mov	r1, r5
 8007e56:	f7ff ff53 	bl	8007d00 <_malloc_r>
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	b950      	cbnz	r0, 8007e74 <__ssputs_r+0x5c>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	f8ca 3000 	str.w	r3, [sl]
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6a:	81a3      	strh	r3, [r4, #12]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	463a      	mov	r2, r7
 8007e76:	6921      	ldr	r1, [r4, #16]
 8007e78:	f000 faa8 	bl	80083cc <memcpy>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	6126      	str	r6, [r4, #16]
 8007e8a:	6165      	str	r5, [r4, #20]
 8007e8c:	443e      	add	r6, r7
 8007e8e:	1bed      	subs	r5, r5, r7
 8007e90:	6026      	str	r6, [r4, #0]
 8007e92:	60a5      	str	r5, [r4, #8]
 8007e94:	464e      	mov	r6, r9
 8007e96:	454e      	cmp	r6, r9
 8007e98:	d900      	bls.n	8007e9c <__ssputs_r+0x84>
 8007e9a:	464e      	mov	r6, r9
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	f000 fa9e 	bl	80083e2 <memmove>
 8007ea6:	68a3      	ldr	r3, [r4, #8]
 8007ea8:	1b9b      	subs	r3, r3, r6
 8007eaa:	60a3      	str	r3, [r4, #8]
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	441e      	add	r6, r3
 8007eb0:	6026      	str	r6, [r4, #0]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e7dc      	b.n	8007e70 <__ssputs_r+0x58>
 8007eb6:	462a      	mov	r2, r5
 8007eb8:	f000 faac 	bl	8008414 <_realloc_r>
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1e2      	bne.n	8007e88 <__ssputs_r+0x70>
 8007ec2:	6921      	ldr	r1, [r4, #16]
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	f7ff fecd 	bl	8007c64 <_free_r>
 8007eca:	e7c8      	b.n	8007e5e <__ssputs_r+0x46>

08007ecc <_svfiprintf_r>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	898b      	ldrh	r3, [r1, #12]
 8007ed4:	061f      	lsls	r7, r3, #24
 8007ed6:	b09d      	sub	sp, #116	; 0x74
 8007ed8:	4680      	mov	r8, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	4616      	mov	r6, r2
 8007ede:	d50f      	bpl.n	8007f00 <_svfiprintf_r+0x34>
 8007ee0:	690b      	ldr	r3, [r1, #16]
 8007ee2:	b96b      	cbnz	r3, 8007f00 <_svfiprintf_r+0x34>
 8007ee4:	2140      	movs	r1, #64	; 0x40
 8007ee6:	f7ff ff0b 	bl	8007d00 <_malloc_r>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	6120      	str	r0, [r4, #16]
 8007eee:	b928      	cbnz	r0, 8007efc <_svfiprintf_r+0x30>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	f8c8 3000 	str.w	r3, [r8]
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8007efa:	e0c8      	b.n	800808e <_svfiprintf_r+0x1c2>
 8007efc:	2340      	movs	r3, #64	; 0x40
 8007efe:	6163      	str	r3, [r4, #20]
 8007f00:	2300      	movs	r3, #0
 8007f02:	9309      	str	r3, [sp, #36]	; 0x24
 8007f04:	2320      	movs	r3, #32
 8007f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f0a:	2330      	movs	r3, #48	; 0x30
 8007f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f10:	9503      	str	r5, [sp, #12]
 8007f12:	f04f 0b01 	mov.w	fp, #1
 8007f16:	4637      	mov	r7, r6
 8007f18:	463d      	mov	r5, r7
 8007f1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f1e:	b10b      	cbz	r3, 8007f24 <_svfiprintf_r+0x58>
 8007f20:	2b25      	cmp	r3, #37	; 0x25
 8007f22:	d13e      	bne.n	8007fa2 <_svfiprintf_r+0xd6>
 8007f24:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f28:	d00b      	beq.n	8007f42 <_svfiprintf_r+0x76>
 8007f2a:	4653      	mov	r3, sl
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4640      	mov	r0, r8
 8007f32:	f7ff ff71 	bl	8007e18 <__ssputs_r>
 8007f36:	3001      	adds	r0, #1
 8007f38:	f000 80a4 	beq.w	8008084 <_svfiprintf_r+0x1b8>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3e:	4453      	add	r3, sl
 8007f40:	9309      	str	r3, [sp, #36]	; 0x24
 8007f42:	783b      	ldrb	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 809d 	beq.w	8008084 <_svfiprintf_r+0x1b8>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f5e:	462f      	mov	r7, r5
 8007f60:	2205      	movs	r2, #5
 8007f62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f66:	4850      	ldr	r0, [pc, #320]	; (80080a8 <_svfiprintf_r+0x1dc>)
 8007f68:	f7f8 f94a 	bl	8000200 <memchr>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	b9d0      	cbnz	r0, 8007fa6 <_svfiprintf_r+0xda>
 8007f70:	06d9      	lsls	r1, r3, #27
 8007f72:	bf44      	itt	mi
 8007f74:	2220      	movmi	r2, #32
 8007f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f7a:	071a      	lsls	r2, r3, #28
 8007f7c:	bf44      	itt	mi
 8007f7e:	222b      	movmi	r2, #43	; 0x2b
 8007f80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f84:	782a      	ldrb	r2, [r5, #0]
 8007f86:	2a2a      	cmp	r2, #42	; 0x2a
 8007f88:	d015      	beq.n	8007fb6 <_svfiprintf_r+0xea>
 8007f8a:	9a07      	ldr	r2, [sp, #28]
 8007f8c:	462f      	mov	r7, r5
 8007f8e:	2000      	movs	r0, #0
 8007f90:	250a      	movs	r5, #10
 8007f92:	4639      	mov	r1, r7
 8007f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f98:	3b30      	subs	r3, #48	; 0x30
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	d94d      	bls.n	800803a <_svfiprintf_r+0x16e>
 8007f9e:	b1b8      	cbz	r0, 8007fd0 <_svfiprintf_r+0x104>
 8007fa0:	e00f      	b.n	8007fc2 <_svfiprintf_r+0xf6>
 8007fa2:	462f      	mov	r7, r5
 8007fa4:	e7b8      	b.n	8007f18 <_svfiprintf_r+0x4c>
 8007fa6:	4a40      	ldr	r2, [pc, #256]	; (80080a8 <_svfiprintf_r+0x1dc>)
 8007fa8:	1a80      	subs	r0, r0, r2
 8007faa:	fa0b f000 	lsl.w	r0, fp, r0
 8007fae:	4318      	orrs	r0, r3
 8007fb0:	9004      	str	r0, [sp, #16]
 8007fb2:	463d      	mov	r5, r7
 8007fb4:	e7d3      	b.n	8007f5e <_svfiprintf_r+0x92>
 8007fb6:	9a03      	ldr	r2, [sp, #12]
 8007fb8:	1d11      	adds	r1, r2, #4
 8007fba:	6812      	ldr	r2, [r2, #0]
 8007fbc:	9103      	str	r1, [sp, #12]
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	db01      	blt.n	8007fc6 <_svfiprintf_r+0xfa>
 8007fc2:	9207      	str	r2, [sp, #28]
 8007fc4:	e004      	b.n	8007fd0 <_svfiprintf_r+0x104>
 8007fc6:	4252      	negs	r2, r2
 8007fc8:	f043 0302 	orr.w	r3, r3, #2
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	9304      	str	r3, [sp, #16]
 8007fd0:	783b      	ldrb	r3, [r7, #0]
 8007fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd4:	d10c      	bne.n	8007ff0 <_svfiprintf_r+0x124>
 8007fd6:	787b      	ldrb	r3, [r7, #1]
 8007fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fda:	d133      	bne.n	8008044 <_svfiprintf_r+0x178>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	9203      	str	r2, [sp, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfb8      	it	lt
 8007fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fec:	3702      	adds	r7, #2
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	4d2e      	ldr	r5, [pc, #184]	; (80080ac <_svfiprintf_r+0x1e0>)
 8007ff2:	7839      	ldrb	r1, [r7, #0]
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7f8 f902 	bl	8000200 <memchr>
 8007ffc:	b138      	cbz	r0, 800800e <_svfiprintf_r+0x142>
 8007ffe:	2340      	movs	r3, #64	; 0x40
 8008000:	1b40      	subs	r0, r0, r5
 8008002:	fa03 f000 	lsl.w	r0, r3, r0
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	4303      	orrs	r3, r0
 800800a:	3701      	adds	r7, #1
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	7839      	ldrb	r1, [r7, #0]
 8008010:	4827      	ldr	r0, [pc, #156]	; (80080b0 <_svfiprintf_r+0x1e4>)
 8008012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008016:	2206      	movs	r2, #6
 8008018:	1c7e      	adds	r6, r7, #1
 800801a:	f7f8 f8f1 	bl	8000200 <memchr>
 800801e:	2800      	cmp	r0, #0
 8008020:	d038      	beq.n	8008094 <_svfiprintf_r+0x1c8>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <_svfiprintf_r+0x1e8>)
 8008024:	bb13      	cbnz	r3, 800806c <_svfiprintf_r+0x1a0>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	3307      	adds	r3, #7
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	3308      	adds	r3, #8
 8008030:	9303      	str	r3, [sp, #12]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	444b      	add	r3, r9
 8008036:	9309      	str	r3, [sp, #36]	; 0x24
 8008038:	e76d      	b.n	8007f16 <_svfiprintf_r+0x4a>
 800803a:	fb05 3202 	mla	r2, r5, r2, r3
 800803e:	2001      	movs	r0, #1
 8008040:	460f      	mov	r7, r1
 8008042:	e7a6      	b.n	8007f92 <_svfiprintf_r+0xc6>
 8008044:	2300      	movs	r3, #0
 8008046:	3701      	adds	r7, #1
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4619      	mov	r1, r3
 800804c:	250a      	movs	r5, #10
 800804e:	4638      	mov	r0, r7
 8008050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008054:	3a30      	subs	r2, #48	; 0x30
 8008056:	2a09      	cmp	r2, #9
 8008058:	d903      	bls.n	8008062 <_svfiprintf_r+0x196>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0c8      	beq.n	8007ff0 <_svfiprintf_r+0x124>
 800805e:	9105      	str	r1, [sp, #20]
 8008060:	e7c6      	b.n	8007ff0 <_svfiprintf_r+0x124>
 8008062:	fb05 2101 	mla	r1, r5, r1, r2
 8008066:	2301      	movs	r3, #1
 8008068:	4607      	mov	r7, r0
 800806a:	e7f0      	b.n	800804e <_svfiprintf_r+0x182>
 800806c:	ab03      	add	r3, sp, #12
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4622      	mov	r2, r4
 8008072:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <_svfiprintf_r+0x1ec>)
 8008074:	a904      	add	r1, sp, #16
 8008076:	4640      	mov	r0, r8
 8008078:	f3af 8000 	nop.w
 800807c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008080:	4681      	mov	r9, r0
 8008082:	d1d6      	bne.n	8008032 <_svfiprintf_r+0x166>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	065b      	lsls	r3, r3, #25
 8008088:	f53f af35 	bmi.w	8007ef6 <_svfiprintf_r+0x2a>
 800808c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808e:	b01d      	add	sp, #116	; 0x74
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	ab03      	add	r3, sp, #12
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4622      	mov	r2, r4
 800809a:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <_svfiprintf_r+0x1ec>)
 800809c:	a904      	add	r1, sp, #16
 800809e:	4640      	mov	r0, r8
 80080a0:	f000 f882 	bl	80081a8 <_printf_i>
 80080a4:	e7ea      	b.n	800807c <_svfiprintf_r+0x1b0>
 80080a6:	bf00      	nop
 80080a8:	0800855c 	.word	0x0800855c
 80080ac:	08008562 	.word	0x08008562
 80080b0:	08008566 	.word	0x08008566
 80080b4:	00000000 	.word	0x00000000
 80080b8:	08007e19 	.word	0x08007e19

080080bc <_printf_common>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4691      	mov	r9, r2
 80080c2:	461f      	mov	r7, r3
 80080c4:	688a      	ldr	r2, [r1, #8]
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	bfb8      	it	lt
 80080d0:	4613      	movlt	r3, r2
 80080d2:	f8c9 3000 	str.w	r3, [r9]
 80080d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080da:	4606      	mov	r6, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	b112      	cbz	r2, 80080e6 <_printf_common+0x2a>
 80080e0:	3301      	adds	r3, #1
 80080e2:	f8c9 3000 	str.w	r3, [r9]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	0699      	lsls	r1, r3, #26
 80080ea:	bf42      	ittt	mi
 80080ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080f0:	3302      	addmi	r3, #2
 80080f2:	f8c9 3000 	strmi.w	r3, [r9]
 80080f6:	6825      	ldr	r5, [r4, #0]
 80080f8:	f015 0506 	ands.w	r5, r5, #6
 80080fc:	d107      	bne.n	800810e <_printf_common+0x52>
 80080fe:	f104 0a19 	add.w	sl, r4, #25
 8008102:	68e3      	ldr	r3, [r4, #12]
 8008104:	f8d9 2000 	ldr.w	r2, [r9]
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	42ab      	cmp	r3, r5
 800810c:	dc28      	bgt.n	8008160 <_printf_common+0xa4>
 800810e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008112:	6822      	ldr	r2, [r4, #0]
 8008114:	3300      	adds	r3, #0
 8008116:	bf18      	it	ne
 8008118:	2301      	movne	r3, #1
 800811a:	0692      	lsls	r2, r2, #26
 800811c:	d42d      	bmi.n	800817a <_printf_common+0xbe>
 800811e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008122:	4639      	mov	r1, r7
 8008124:	4630      	mov	r0, r6
 8008126:	47c0      	blx	r8
 8008128:	3001      	adds	r0, #1
 800812a:	d020      	beq.n	800816e <_printf_common+0xb2>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	68e5      	ldr	r5, [r4, #12]
 8008130:	f8d9 2000 	ldr.w	r2, [r9]
 8008134:	f003 0306 	and.w	r3, r3, #6
 8008138:	2b04      	cmp	r3, #4
 800813a:	bf08      	it	eq
 800813c:	1aad      	subeq	r5, r5, r2
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	6922      	ldr	r2, [r4, #16]
 8008142:	bf0c      	ite	eq
 8008144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008148:	2500      	movne	r5, #0
 800814a:	4293      	cmp	r3, r2
 800814c:	bfc4      	itt	gt
 800814e:	1a9b      	subgt	r3, r3, r2
 8008150:	18ed      	addgt	r5, r5, r3
 8008152:	f04f 0900 	mov.w	r9, #0
 8008156:	341a      	adds	r4, #26
 8008158:	454d      	cmp	r5, r9
 800815a:	d11a      	bne.n	8008192 <_printf_common+0xd6>
 800815c:	2000      	movs	r0, #0
 800815e:	e008      	b.n	8008172 <_printf_common+0xb6>
 8008160:	2301      	movs	r3, #1
 8008162:	4652      	mov	r2, sl
 8008164:	4639      	mov	r1, r7
 8008166:	4630      	mov	r0, r6
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d103      	bne.n	8008176 <_printf_common+0xba>
 800816e:	f04f 30ff 	mov.w	r0, #4294967295
 8008172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008176:	3501      	adds	r5, #1
 8008178:	e7c3      	b.n	8008102 <_printf_common+0x46>
 800817a:	18e1      	adds	r1, r4, r3
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	2030      	movs	r0, #48	; 0x30
 8008180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008184:	4422      	add	r2, r4
 8008186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800818a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800818e:	3302      	adds	r3, #2
 8008190:	e7c5      	b.n	800811e <_printf_common+0x62>
 8008192:	2301      	movs	r3, #1
 8008194:	4622      	mov	r2, r4
 8008196:	4639      	mov	r1, r7
 8008198:	4630      	mov	r0, r6
 800819a:	47c0      	blx	r8
 800819c:	3001      	adds	r0, #1
 800819e:	d0e6      	beq.n	800816e <_printf_common+0xb2>
 80081a0:	f109 0901 	add.w	r9, r9, #1
 80081a4:	e7d8      	b.n	8008158 <_printf_common+0x9c>
	...

080081a8 <_printf_i>:
 80081a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081b0:	460c      	mov	r4, r1
 80081b2:	7e09      	ldrb	r1, [r1, #24]
 80081b4:	b085      	sub	sp, #20
 80081b6:	296e      	cmp	r1, #110	; 0x6e
 80081b8:	4617      	mov	r7, r2
 80081ba:	4606      	mov	r6, r0
 80081bc:	4698      	mov	r8, r3
 80081be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c0:	f000 80b3 	beq.w	800832a <_printf_i+0x182>
 80081c4:	d822      	bhi.n	800820c <_printf_i+0x64>
 80081c6:	2963      	cmp	r1, #99	; 0x63
 80081c8:	d036      	beq.n	8008238 <_printf_i+0x90>
 80081ca:	d80a      	bhi.n	80081e2 <_printf_i+0x3a>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	f000 80b9 	beq.w	8008344 <_printf_i+0x19c>
 80081d2:	2958      	cmp	r1, #88	; 0x58
 80081d4:	f000 8083 	beq.w	80082de <_printf_i+0x136>
 80081d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081e0:	e032      	b.n	8008248 <_printf_i+0xa0>
 80081e2:	2964      	cmp	r1, #100	; 0x64
 80081e4:	d001      	beq.n	80081ea <_printf_i+0x42>
 80081e6:	2969      	cmp	r1, #105	; 0x69
 80081e8:	d1f6      	bne.n	80081d8 <_printf_i+0x30>
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	0605      	lsls	r5, r0, #24
 80081f0:	f103 0104 	add.w	r1, r3, #4
 80081f4:	d52a      	bpl.n	800824c <_printf_i+0xa4>
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da03      	bge.n	8008206 <_printf_i+0x5e>
 80081fe:	222d      	movs	r2, #45	; 0x2d
 8008200:	425b      	negs	r3, r3
 8008202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008206:	486f      	ldr	r0, [pc, #444]	; (80083c4 <_printf_i+0x21c>)
 8008208:	220a      	movs	r2, #10
 800820a:	e039      	b.n	8008280 <_printf_i+0xd8>
 800820c:	2973      	cmp	r1, #115	; 0x73
 800820e:	f000 809d 	beq.w	800834c <_printf_i+0x1a4>
 8008212:	d808      	bhi.n	8008226 <_printf_i+0x7e>
 8008214:	296f      	cmp	r1, #111	; 0x6f
 8008216:	d020      	beq.n	800825a <_printf_i+0xb2>
 8008218:	2970      	cmp	r1, #112	; 0x70
 800821a:	d1dd      	bne.n	80081d8 <_printf_i+0x30>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	f043 0320 	orr.w	r3, r3, #32
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	e003      	b.n	800822e <_printf_i+0x86>
 8008226:	2975      	cmp	r1, #117	; 0x75
 8008228:	d017      	beq.n	800825a <_printf_i+0xb2>
 800822a:	2978      	cmp	r1, #120	; 0x78
 800822c:	d1d4      	bne.n	80081d8 <_printf_i+0x30>
 800822e:	2378      	movs	r3, #120	; 0x78
 8008230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008234:	4864      	ldr	r0, [pc, #400]	; (80083c8 <_printf_i+0x220>)
 8008236:	e055      	b.n	80082e4 <_printf_i+0x13c>
 8008238:	6813      	ldr	r3, [r2, #0]
 800823a:	1d19      	adds	r1, r3, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6011      	str	r1, [r2, #0]
 8008240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008248:	2301      	movs	r3, #1
 800824a:	e08c      	b.n	8008366 <_printf_i+0x1be>
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6011      	str	r1, [r2, #0]
 8008250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008254:	bf18      	it	ne
 8008256:	b21b      	sxthne	r3, r3
 8008258:	e7cf      	b.n	80081fa <_printf_i+0x52>
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1d18      	adds	r0, r3, #4
 8008260:	6010      	str	r0, [r2, #0]
 8008262:	0628      	lsls	r0, r5, #24
 8008264:	d501      	bpl.n	800826a <_printf_i+0xc2>
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	e002      	b.n	8008270 <_printf_i+0xc8>
 800826a:	0668      	lsls	r0, r5, #25
 800826c:	d5fb      	bpl.n	8008266 <_printf_i+0xbe>
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	4854      	ldr	r0, [pc, #336]	; (80083c4 <_printf_i+0x21c>)
 8008272:	296f      	cmp	r1, #111	; 0x6f
 8008274:	bf14      	ite	ne
 8008276:	220a      	movne	r2, #10
 8008278:	2208      	moveq	r2, #8
 800827a:	2100      	movs	r1, #0
 800827c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008280:	6865      	ldr	r5, [r4, #4]
 8008282:	60a5      	str	r5, [r4, #8]
 8008284:	2d00      	cmp	r5, #0
 8008286:	f2c0 8095 	blt.w	80083b4 <_printf_i+0x20c>
 800828a:	6821      	ldr	r1, [r4, #0]
 800828c:	f021 0104 	bic.w	r1, r1, #4
 8008290:	6021      	str	r1, [r4, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d13d      	bne.n	8008312 <_printf_i+0x16a>
 8008296:	2d00      	cmp	r5, #0
 8008298:	f040 808e 	bne.w	80083b8 <_printf_i+0x210>
 800829c:	4665      	mov	r5, ip
 800829e:	2a08      	cmp	r2, #8
 80082a0:	d10b      	bne.n	80082ba <_printf_i+0x112>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	07db      	lsls	r3, r3, #31
 80082a6:	d508      	bpl.n	80082ba <_printf_i+0x112>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6862      	ldr	r2, [r4, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	bfde      	ittt	le
 80082b0:	2330      	movle	r3, #48	; 0x30
 80082b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082ba:	ebac 0305 	sub.w	r3, ip, r5
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	f8cd 8000 	str.w	r8, [sp]
 80082c4:	463b      	mov	r3, r7
 80082c6:	aa03      	add	r2, sp, #12
 80082c8:	4621      	mov	r1, r4
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff fef6 	bl	80080bc <_printf_common>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d14d      	bne.n	8008370 <_printf_i+0x1c8>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b005      	add	sp, #20
 80082da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082de:	4839      	ldr	r0, [pc, #228]	; (80083c4 <_printf_i+0x21c>)
 80082e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082e4:	6813      	ldr	r3, [r2, #0]
 80082e6:	6821      	ldr	r1, [r4, #0]
 80082e8:	1d1d      	adds	r5, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6015      	str	r5, [r2, #0]
 80082ee:	060a      	lsls	r2, r1, #24
 80082f0:	d50b      	bpl.n	800830a <_printf_i+0x162>
 80082f2:	07ca      	lsls	r2, r1, #31
 80082f4:	bf44      	itt	mi
 80082f6:	f041 0120 	orrmi.w	r1, r1, #32
 80082fa:	6021      	strmi	r1, [r4, #0]
 80082fc:	b91b      	cbnz	r3, 8008306 <_printf_i+0x15e>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	f022 0220 	bic.w	r2, r2, #32
 8008304:	6022      	str	r2, [r4, #0]
 8008306:	2210      	movs	r2, #16
 8008308:	e7b7      	b.n	800827a <_printf_i+0xd2>
 800830a:	064d      	lsls	r5, r1, #25
 800830c:	bf48      	it	mi
 800830e:	b29b      	uxthmi	r3, r3
 8008310:	e7ef      	b.n	80082f2 <_printf_i+0x14a>
 8008312:	4665      	mov	r5, ip
 8008314:	fbb3 f1f2 	udiv	r1, r3, r2
 8008318:	fb02 3311 	mls	r3, r2, r1, r3
 800831c:	5cc3      	ldrb	r3, [r0, r3]
 800831e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008322:	460b      	mov	r3, r1
 8008324:	2900      	cmp	r1, #0
 8008326:	d1f5      	bne.n	8008314 <_printf_i+0x16c>
 8008328:	e7b9      	b.n	800829e <_printf_i+0xf6>
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	6825      	ldr	r5, [r4, #0]
 800832e:	6961      	ldr	r1, [r4, #20]
 8008330:	1d18      	adds	r0, r3, #4
 8008332:	6010      	str	r0, [r2, #0]
 8008334:	0628      	lsls	r0, r5, #24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	d501      	bpl.n	800833e <_printf_i+0x196>
 800833a:	6019      	str	r1, [r3, #0]
 800833c:	e002      	b.n	8008344 <_printf_i+0x19c>
 800833e:	066a      	lsls	r2, r5, #25
 8008340:	d5fb      	bpl.n	800833a <_printf_i+0x192>
 8008342:	8019      	strh	r1, [r3, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	4665      	mov	r5, ip
 800834a:	e7b9      	b.n	80082c0 <_printf_i+0x118>
 800834c:	6813      	ldr	r3, [r2, #0]
 800834e:	1d19      	adds	r1, r3, #4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	681d      	ldr	r5, [r3, #0]
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	2100      	movs	r1, #0
 8008358:	4628      	mov	r0, r5
 800835a:	f7f7 ff51 	bl	8000200 <memchr>
 800835e:	b108      	cbz	r0, 8008364 <_printf_i+0x1bc>
 8008360:	1b40      	subs	r0, r0, r5
 8008362:	6060      	str	r0, [r4, #4]
 8008364:	6863      	ldr	r3, [r4, #4]
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	2300      	movs	r3, #0
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e7a7      	b.n	80082c0 <_printf_i+0x118>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	462a      	mov	r2, r5
 8008374:	4639      	mov	r1, r7
 8008376:	4630      	mov	r0, r6
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0aa      	beq.n	80082d4 <_printf_i+0x12c>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	079b      	lsls	r3, r3, #30
 8008382:	d413      	bmi.n	80083ac <_printf_i+0x204>
 8008384:	68e0      	ldr	r0, [r4, #12]
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	4298      	cmp	r0, r3
 800838a:	bfb8      	it	lt
 800838c:	4618      	movlt	r0, r3
 800838e:	e7a3      	b.n	80082d8 <_printf_i+0x130>
 8008390:	2301      	movs	r3, #1
 8008392:	464a      	mov	r2, r9
 8008394:	4639      	mov	r1, r7
 8008396:	4630      	mov	r0, r6
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d09a      	beq.n	80082d4 <_printf_i+0x12c>
 800839e:	3501      	adds	r5, #1
 80083a0:	68e3      	ldr	r3, [r4, #12]
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	42ab      	cmp	r3, r5
 80083a8:	dcf2      	bgt.n	8008390 <_printf_i+0x1e8>
 80083aa:	e7eb      	b.n	8008384 <_printf_i+0x1dc>
 80083ac:	2500      	movs	r5, #0
 80083ae:	f104 0919 	add.w	r9, r4, #25
 80083b2:	e7f5      	b.n	80083a0 <_printf_i+0x1f8>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ac      	bne.n	8008312 <_printf_i+0x16a>
 80083b8:	7803      	ldrb	r3, [r0, #0]
 80083ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c2:	e76c      	b.n	800829e <_printf_i+0xf6>
 80083c4:	0800856d 	.word	0x0800856d
 80083c8:	0800857e 	.word	0x0800857e

080083cc <memcpy>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	1e43      	subs	r3, r0, #1
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	d100      	bne.n	80083d8 <memcpy+0xc>
 80083d6:	bd10      	pop	{r4, pc}
 80083d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e0:	e7f7      	b.n	80083d2 <memcpy+0x6>

080083e2 <memmove>:
 80083e2:	4288      	cmp	r0, r1
 80083e4:	b510      	push	{r4, lr}
 80083e6:	eb01 0302 	add.w	r3, r1, r2
 80083ea:	d807      	bhi.n	80083fc <memmove+0x1a>
 80083ec:	1e42      	subs	r2, r0, #1
 80083ee:	4299      	cmp	r1, r3
 80083f0:	d00a      	beq.n	8008408 <memmove+0x26>
 80083f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083fa:	e7f8      	b.n	80083ee <memmove+0xc>
 80083fc:	4283      	cmp	r3, r0
 80083fe:	d9f5      	bls.n	80083ec <memmove+0xa>
 8008400:	1881      	adds	r1, r0, r2
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	42d3      	cmn	r3, r2
 8008406:	d100      	bne.n	800840a <memmove+0x28>
 8008408:	bd10      	pop	{r4, pc}
 800840a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800840e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008412:	e7f7      	b.n	8008404 <memmove+0x22>

08008414 <_realloc_r>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	4607      	mov	r7, r0
 8008418:	4614      	mov	r4, r2
 800841a:	460e      	mov	r6, r1
 800841c:	b921      	cbnz	r1, 8008428 <_realloc_r+0x14>
 800841e:	4611      	mov	r1, r2
 8008420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008424:	f7ff bc6c 	b.w	8007d00 <_malloc_r>
 8008428:	b922      	cbnz	r2, 8008434 <_realloc_r+0x20>
 800842a:	f7ff fc1b 	bl	8007c64 <_free_r>
 800842e:	4625      	mov	r5, r4
 8008430:	4628      	mov	r0, r5
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008434:	f000 f814 	bl	8008460 <_malloc_usable_size_r>
 8008438:	42a0      	cmp	r0, r4
 800843a:	d20f      	bcs.n	800845c <_realloc_r+0x48>
 800843c:	4621      	mov	r1, r4
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff fc5e 	bl	8007d00 <_malloc_r>
 8008444:	4605      	mov	r5, r0
 8008446:	2800      	cmp	r0, #0
 8008448:	d0f2      	beq.n	8008430 <_realloc_r+0x1c>
 800844a:	4631      	mov	r1, r6
 800844c:	4622      	mov	r2, r4
 800844e:	f7ff ffbd 	bl	80083cc <memcpy>
 8008452:	4631      	mov	r1, r6
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff fc05 	bl	8007c64 <_free_r>
 800845a:	e7e9      	b.n	8008430 <_realloc_r+0x1c>
 800845c:	4635      	mov	r5, r6
 800845e:	e7e7      	b.n	8008430 <_realloc_r+0x1c>

08008460 <_malloc_usable_size_r>:
 8008460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008464:	1f18      	subs	r0, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	bfbc      	itt	lt
 800846a:	580b      	ldrlt	r3, [r1, r0]
 800846c:	18c0      	addlt	r0, r0, r3
 800846e:	4770      	bx	lr

08008470 <_init>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr

0800847c <_fini>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	bf00      	nop
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr

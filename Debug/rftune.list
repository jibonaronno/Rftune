
rftune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007598  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e8  080077e8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080077e8  080077e8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077e8  080077e8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  200001f4  080079e4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  080079e4  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b754  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003575  00000000  00000000  0003b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003eef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  00040250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007c81  00000000  00000000  00041428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012387  00000000  00000000  000490a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103105  00000000  00000000  0005b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005168  00000000  00000000  0015e5b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001f4 	.word	0x200001f4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800772c 	.word	0x0800772c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001f8 	.word	0x200001f8
 80001e8:	0800772c 	.word	0x0800772c

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t cdc_buf[] = "Sample Text From CDC Buffer";
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <main+0x50>)
 80001f4:	1d3c      	adds	r4, r7, #4
 80001f6:	461d      	mov	r5, r3
 80001f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000200:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fa9d 	bl	8000742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f81e 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f91a 	bl	8000444 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000210:	f000 f8bc 	bl	800038c <_ZL12MX_TIM2_Initv>
  MX_USB_DEVICE_Init();
 8000214:	f006 fb78 	bl	8006908 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <main+0x54>)
 800021a:	f003 fa21 	bl	8003660 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	2180      	movs	r1, #128	; 0x80
 8000222:	4808      	ldr	r0, [pc, #32]	; (8000244 <main+0x58>)
 8000224:	f000 fdc8 	bl	8000db8 <HAL_GPIO_WritePin>
	  delay_us(10000, &htim2);
	  */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(3000);
 8000228:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800022c:	f000 fafe 	bl	800082c <HAL_Delay>
	  CDC_Transmit_FS(cdc_buf, sizeof(cdc_buf));
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	211c      	movs	r1, #28
 8000234:	4618      	mov	r0, r3
 8000236:	f006 fc25 	bl	8006a84 <CDC_Transmit_FS>
	  HAL_Delay(3000);
 800023a:	e7f5      	b.n	8000228 <main+0x3c>
 800023c:	08007744 	.word	0x08007744
 8000240:	20000210 	.word	0x20000210
 8000244:	48000400 	.word	0x48000400

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b0ba      	sub	sp, #232	; 0xe8
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000252:	2244      	movs	r2, #68	; 0x44
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f007 f9a6 	bl	80075a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	228c      	movs	r2, #140	; 0x8c
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f007 f998 	bl	80075a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000278:	2314      	movs	r3, #20
 800027a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800027e:	2300      	movs	r3, #0
 8000280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800029c:	2301      	movs	r3, #1
 800029e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a8:	2328      	movs	r3, #40	; 0x28
 80002aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b4:	2302      	movs	r3, #2
 80002b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fea3 	bl	8002010 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	bf14      	ite	ne
 80002d0:	2301      	movne	r3, #1
 80002d2:	2300      	moveq	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002da:	f000 f923 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2303      	movs	r3, #3
 80002e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000300:	2104      	movs	r1, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f002 faaa 	bl	800285c <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	bf14      	ite	ne
 800030e:	2301      	movne	r3, #1
 8000310:	2300      	moveq	r3, #0
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000318:	f000 f904 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800031c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000320:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000322:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000326:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800032c:	2301      	movs	r3, #1
 800032e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000330:	2318      	movs	r3, #24
 8000332:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000334:	2302      	movs	r3, #2
 8000336:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000338:	2302      	movs	r3, #2
 800033a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000340:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000344:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f002 fc5f 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	bf14      	ite	ne
 8000354:	2301      	movne	r3, #1
 8000356:	2300      	moveq	r3, #0
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800035e:	f000 f8e1 	bl	8000524 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000362:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000366:	f001 fded 	bl	8001f44 <HAL_PWREx_ControlVoltageScaling>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf14      	ite	ne
 8000370:	2301      	movne	r3, #1
 8000372:	2300      	moveq	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x136>
  {
    Error_Handler();
 800037a:	f000 f8d3 	bl	8000524 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800037e:	f002 ff3d 	bl	80031fc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000382:	bf00      	nop
 8000384:	37e8      	adds	r7, #232	; 0xe8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80003b2:	4b23      	ldr	r3, [pc, #140]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003b4:	2250      	movs	r2, #80	; 0x50
 80003b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003c0:	f04f 32ff 	mov.w	r2, #4294967295
 80003c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003ce:	2280      	movs	r2, #128	; 0x80
 80003d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d2:	481b      	ldr	r0, [pc, #108]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003d4:	f003 f8ec 	bl	80035b0 <HAL_TIM_Base_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80003e8:	f000 f89c 	bl	8000524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	4811      	ldr	r0, [pc, #68]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 80003fa:	f003 f999 	bl	8003730 <HAL_TIM_ConfigClockSource>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	bf14      	ite	ne
 8000404:	2301      	movne	r3, #1
 8000406:	2300      	moveq	r3, #0
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800040e:	f000 f889 	bl	8000524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4619      	mov	r1, r3
 800041e:	4808      	ldr	r0, [pc, #32]	; (8000440 <_ZL12MX_TIM2_Initv+0xb4>)
 8000420:	f003 fb74 	bl	8003b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf14      	ite	ne
 800042a:	2301      	movne	r3, #1
 800042c:	2300      	moveq	r3, #0
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8000434:	f000 f876 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000210 	.word	0x20000210

08000444 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800045a:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	4a2e      	ldr	r2, [pc, #184]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000466:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046e:	613b      	str	r3, [r7, #16]
 8000470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b29      	ldr	r3, [pc, #164]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	4a28      	ldr	r2, [pc, #160]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000478:	f043 0302 	orr.w	r3, r3, #2
 800047c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047e:	4b26      	ldr	r3, [pc, #152]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048a:	4b23      	ldr	r3, [pc, #140]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	4a22      	ldr	r2, [pc, #136]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	f003 0308 	and.w	r3, r3, #8
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <_ZL12MX_GPIO_Initv+0xd4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c0:	4816      	ldr	r0, [pc, #88]	; (800051c <_ZL12MX_GPIO_Initv+0xd8>)
 80004c2:	f000 fc79 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_ON_GPIO_Port, LDO_ON_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004cc:	4814      	ldr	r0, [pc, #80]	; (8000520 <_ZL12MX_GPIO_Initv+0xdc>)
 80004ce:	f000 fc73 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80004d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2300      	movs	r3, #0
 80004e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4619      	mov	r1, r3
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <_ZL12MX_GPIO_Initv+0xd8>)
 80004ec:	f000 fad2 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_ON_Pin */
  GPIO_InitStruct.Pin = LDO_ON_Pin;
 80004f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDO_ON_GPIO_Port, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <_ZL12MX_GPIO_Initv+0xdc>)
 800050a:	f000 fac3 	bl	8000a94 <HAL_GPIO_Init>

}
 800050e:	bf00      	nop
 8000510:	3728      	adds	r7, #40	; 0x28
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	48000400 	.word	0x48000400
 8000520:	48000c00 	.word	0x48000c00

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052a:	e7fe      	b.n	800052a <Error_Handler+0x6>

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_MspInit+0x44>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6613      	str	r3, [r2, #96]	; 0x60
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x44>)
 8000540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <HAL_MspInit+0x44>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	6593      	str	r3, [r2, #88]	; 0x58
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_MspInit+0x44>)
 8000558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000584:	d10b      	bne.n	800059e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_TIM_Base_MspInit+0x38>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_TIM_Base_MspInit+0x38>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6593      	str	r3, [r2, #88]	; 0x58
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_TIM_Base_MspInit+0x38>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f8f6 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <OTG_FS_IRQHandler+0x10>)
 800060a:	f000 fd40 	bl	800108e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20001740 	.word	0x20001740

08000618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <_sbrk+0x5c>)
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_sbrk+0x60>)
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <_sbrk+0x64>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <_sbrk+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	d207      	bcs.n	8000658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000648:	f006 ff74 	bl	8007534 <__errno>
 800064c:	4602      	mov	r2, r0
 800064e:	230c      	movs	r3, #12
 8000650:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e009      	b.n	800066c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <_sbrk+0x64>)
 8000668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20050000 	.word	0x20050000
 8000678:	00000400 	.word	0x00000400
 800067c:	2000025c 	.word	0x2000025c
 8000680:	20001b50 	.word	0x20001b50

08000684 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x64>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <SystemInit+0x64>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <SystemInit+0x68>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <SystemInit+0x68>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <SystemInit+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <SystemInit+0x68>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <SystemInit+0x68>)
 80006b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <SystemInit+0x68>)
 80006bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <SystemInit+0x68>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <SystemInit+0x68>)
 80006c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <SystemInit+0x68>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SystemInit+0x64>)
 80006d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006da:	609a      	str	r2, [r3, #8]
#endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	40021000 	.word	0x40021000

080006f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f4:	f7ff ffc6 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006fa:	e003      	b.n	8000704 <LoopCopyDataInit>

080006fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000700:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000702:	3104      	adds	r1, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000708:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800070a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800070c:	d3f6      	bcc.n	80006fc <CopyDataInit>
	ldr	r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000710:	e002      	b.n	8000718 <LoopFillZerobss>

08000712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000712:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000714:	f842 3b04 	str.w	r3, [r2], #4

08000718 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <LoopForever+0x16>)
	cmp	r2, r3
 800071a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800071c:	d3f9      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f006 ff0f 	bl	8007540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000722:	f7ff fd63 	bl	80001ec <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000728:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 800072c:	080077f0 	.word	0x080077f0
	ldr	r0, =_sdata
 8000730:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000734:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000738:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 800073c:	20001b4c 	.word	0x20001b4c

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>

08000742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f95f 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000752:	2000      	movs	r0, #0
 8000754:	f000 f80e 	bl	8000774 <HAL_InitTick>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	e001      	b.n	8000768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000764:	f7ff fee2 	bl	800052c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000768:	79fb      	ldrb	r3, [r7, #7]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_InitTick+0x6c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d023      	beq.n	80007d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <HAL_InitTick+0x70>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_InitTick+0x6c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f96b 	bl	8000a7a <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10f      	bne.n	80007ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d809      	bhi.n	80007c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f935 	bl	8000a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007bc:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <HAL_InitTick+0x74>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e007      	b.n	80007d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e004      	b.n	80007d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e001      	b.n	80007d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000004 	.word	0x20000004

080007ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x20>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_IncTick+0x24>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000008 	.word	0x20000008
 8000810:	2000026c 	.word	0x2000026c

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_GetTick+0x14>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000026c 	.word	0x2000026c

0800082c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff ffee 	bl	8000814 <HAL_GetTick>
 8000838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000844:	d005      	beq.n	8000852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_Delay+0x40>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000852:	bf00      	nop
 8000854:	f7ff ffde 	bl	8000814 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f7      	bhi.n	8000854 <HAL_Delay+0x28>
  {
  }
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000008 	.word	0x20000008

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <__NVIC_EnableIRQ+0x38>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff8e 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff29 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff3e 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff8e 	bl	8000964 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5d 	bl	8000910 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff31 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e166      	b.n	8000d72 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8158 	beq.w	8000d6c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d00b      	beq.n	8000adc <HAL_GPIO_Init+0x48>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	2b11      	cmp	r3, #17
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b12      	cmp	r3, #18
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 0201 	and.w	r2, r3, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0xea>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d123      	bne.n	8000bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	08da      	lsrs	r2, r3, #3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3208      	adds	r2, #8
 8000b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	220f      	movs	r2, #15
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0203 	and.w	r2, r3, #3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b2 	beq.w	8000d6c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c08:	4b61      	ldr	r3, [pc, #388]	; (8000d90 <HAL_GPIO_Init+0x2fc>)
 8000c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0c:	4a60      	ldr	r2, [pc, #384]	; (8000d90 <HAL_GPIO_Init+0x2fc>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6613      	str	r3, [r2, #96]	; 0x60
 8000c14:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <HAL_GPIO_Init+0x2fc>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c20:	4a5c      	ldr	r2, [pc, #368]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c4a:	d02b      	beq.n	8000ca4 <HAL_GPIO_Init+0x210>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a52      	ldr	r2, [pc, #328]	; (8000d98 <HAL_GPIO_Init+0x304>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d025      	beq.n	8000ca0 <HAL_GPIO_Init+0x20c>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a51      	ldr	r2, [pc, #324]	; (8000d9c <HAL_GPIO_Init+0x308>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d01f      	beq.n	8000c9c <HAL_GPIO_Init+0x208>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a50      	ldr	r2, [pc, #320]	; (8000da0 <HAL_GPIO_Init+0x30c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d019      	beq.n	8000c98 <HAL_GPIO_Init+0x204>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a4f      	ldr	r2, [pc, #316]	; (8000da4 <HAL_GPIO_Init+0x310>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d013      	beq.n	8000c94 <HAL_GPIO_Init+0x200>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a4e      	ldr	r2, [pc, #312]	; (8000da8 <HAL_GPIO_Init+0x314>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d00d      	beq.n	8000c90 <HAL_GPIO_Init+0x1fc>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <HAL_GPIO_Init+0x318>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d007      	beq.n	8000c8c <HAL_GPIO_Init+0x1f8>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a4c      	ldr	r2, [pc, #304]	; (8000db0 <HAL_GPIO_Init+0x31c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <HAL_GPIO_Init+0x1f4>
 8000c84:	2307      	movs	r3, #7
 8000c86:	e00e      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c88:	2308      	movs	r3, #8
 8000c8a:	e00c      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	e00a      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c90:	2305      	movs	r3, #5
 8000c92:	e008      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c94:	2304      	movs	r3, #4
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x212>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb6:	4937      	ldr	r1, [pc, #220]	; (8000d94 <HAL_GPIO_Init+0x300>)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ce8:	4a32      	ldr	r2, [pc, #200]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d12:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_GPIO_Init+0x320>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f47f ae91 	bne.w	8000aa4 <HAL_GPIO_Init+0x10>
  }
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00
 8000da4:	48001000 	.word	0x48001000
 8000da8:	48001400 	.word	0x48001400
 8000dac:	48001800 	.word	0x48001800
 8000db0:	48001c00 	.word	0x48001c00
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b08f      	sub	sp, #60	; 0x3c
 8000dec:	af0a      	add	r7, sp, #40	; 0x28
 8000dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e116      	b.n	8001028 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d106      	bne.n	8000e1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f005 ff8d 	bl	8006d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 ffee 	bl	8003e1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	687e      	ldr	r6, [r7, #4]
 8000e46:	466d      	mov	r5, sp
 8000e48:	f106 0410 	add.w	r4, r6, #16
 8000e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e5c:	1d33      	adds	r3, r6, #4
 8000e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f002 fedb 	bl	8003c1c <USB_CoreInit>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e0d7      	b.n	8001028 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 ffdc 	bl	8003e3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e04a      	b.n	8000f20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	333d      	adds	r3, #61	; 0x3d
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	333c      	adds	r3, #60	; 0x3c
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	b298      	uxth	r0, r3
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3342      	adds	r3, #66	; 0x42
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	333f      	adds	r3, #63	; 0x3f
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3344      	adds	r3, #68	; 0x44
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	3348      	adds	r3, #72	; 0x48
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3350      	adds	r3, #80	; 0x50
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3af      	bcc.n	8000e8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e044      	b.n	8000fba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	1a9b      	subs	r3, r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3b5      	bcc.n	8000f30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	687e      	ldr	r6, [r7, #4]
 8000fcc:	466d      	mov	r5, sp
 8000fce:	f106 0410 	add.w	r4, r6, #16
 8000fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fe2:	1d33      	adds	r3, r6, #4
 8000fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f002 ff52 	bl	8003e90 <USB_DevInit>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e014      	b.n	8001028 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 ff62 	bl	8001ee0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fed4 	bl	8004dce <USB_DevDisconnect>

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001030 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_PCD_Start+0x1c>
 8001048:	2302      	movs	r3, #2
 800104a:	e01c      	b.n	8001086 <HAL_PCD_Start+0x56>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001060:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fec3 	bl	8003df8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fe88 	bl	8004d8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b08d      	sub	sp, #52	; 0x34
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 ff46 	bl	8004f36 <USB_GetMode>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f040 838f 	bne.w	80017d0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 feaa 	bl	8004e10 <USB_ReadInterrupts>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8385 	beq.w	80017ce <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fea1 	bl	8004e10 <USB_ReadInterrupts>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d107      	bne.n	80010e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f002 0202 	and.w	r2, r2, #2
 80010e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fe8f 	bl	8004e10 <USB_ReadInterrupts>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d161      	bne.n	80011c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	699a      	ldr	r2, [r3, #24]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0210 	bic.w	r2, r2, #16
 800110a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	f003 020f 	and.w	r2, r3, #15
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	3304      	adds	r3, #4
 800112a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	0c5b      	lsrs	r3, r3, #17
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	2b02      	cmp	r3, #2
 8001136:	d124      	bne.n	8001182 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d035      	beq.n	80011b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800114e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	6a38      	ldr	r0, [r7, #32]
 8001158:	f003 fcf5 	bl	8004b46 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001168:	441a      	add	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800117a:	441a      	add	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	e016      	b.n	80011b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	0c5b      	lsrs	r3, r3, #17
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	2b06      	cmp	r3, #6
 800118c:	d110      	bne.n	80011b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001194:	2208      	movs	r2, #8
 8001196:	4619      	mov	r1, r3
 8001198:	6a38      	ldr	r0, [r7, #32]
 800119a:	f003 fcd4 	bl	8004b46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011aa:	441a      	add	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fe23 	bl	8004e10 <USB_ReadInterrupts>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011d4:	d16e      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fe29 	bl	8004e36 <USB_ReadDevAllOutEpInterrupt>
 80011e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011e6:	e062      	b.n	80012ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d057      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fe4e 	bl	8004e9e <USB_ReadDevOutEPInterrupt>
 8001202:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00c      	beq.n	8001228 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800121a:	461a      	mov	r2, r3
 800121c:	2301      	movs	r3, #1
 800121e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fd82 	bl	8001d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00c      	beq.n	800124c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	015a      	lsls	r2, r3, #5
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	4413      	add	r3, r2
 800123a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800123e:	461a      	mov	r2, r3
 8001240:	2308      	movs	r3, #8
 8001242:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fdbe 	bl	8001dc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d008      	beq.n	8001268 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	015a      	lsls	r2, r3, #5
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	4413      	add	r3, r2
 800125e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001262:	461a      	mov	r2, r3
 8001264:	2310      	movs	r3, #16
 8001266:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	2b00      	cmp	r3, #0
 8001270:	d008      	beq.n	8001284 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	015a      	lsls	r2, r3, #5
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4413      	add	r3, r2
 800127a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800127e:	461a      	mov	r2, r3
 8001280:	2320      	movs	r3, #32
 8001282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	015a      	lsls	r2, r3, #5
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800129a:	461a      	mov	r2, r3
 800129c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d199      	bne.n	80011e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fda9 	bl	8004e10 <USB_ReadInterrupts>
 80012be:	4603      	mov	r3, r0
 80012c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012c8:	f040 8087 	bne.w	80013da <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fdca 	bl	8004e6a <USB_ReadDevAllInEpInterrupt>
 80012d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012dc:	e07a      	b.n	80013d4 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d06f      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fdf1 	bl	8004eda <USB_ReadDevInEPInterrupt>
 80012f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	2201      	movs	r2, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	69f9      	ldr	r1, [r7, #28]
 8001320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001324:	4013      	ands	r3, r2
 8001326:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	015a      	lsls	r2, r3, #5
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001334:	461a      	mov	r2, r3
 8001336:	2301      	movs	r3, #1
 8001338:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f005 fd8a 	bl	8006e5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	015a      	lsls	r2, r3, #5
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4413      	add	r3, r2
 8001358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800135c:	461a      	mov	r2, r3
 800135e:	2308      	movs	r3, #8
 8001360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	015a      	lsls	r2, r3, #5
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001378:	461a      	mov	r2, r3
 800137a:	2310      	movs	r3, #16
 800137c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	015a      	lsls	r2, r3, #5
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001394:	461a      	mov	r2, r3
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b0:	461a      	mov	r2, r3
 80013b2:	2302      	movs	r3, #2
 80013b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fc29 	bl	8001c1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	3301      	adds	r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d181      	bne.n	80012de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fd16 	bl	8004e10 <USB_ReadInterrupts>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013ee:	d122      	bne.n	8001436 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f006 f837 	bl	800748c <HAL_PCDEx_LPM_Callback>
 800141e:	e002      	b.n	8001426 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f005 fd87 	bl	8006f34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fce8 	bl	8004e10 <USB_ReadInterrupts>
 8001440:	4603      	mov	r3, r0
 8001442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800144a:	d112      	bne.n	8001472 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f005 fd43 	bl	8006ee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001470:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fcca 	bl	8004e10 <USB_ReadInterrupts>
 800147c:	4603      	mov	r3, r0
 800147e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001486:	d121      	bne.n	80014cc <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001496:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d111      	bne.n	80014c6 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	f003 020f 	and.w	r2, r3, #15
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80014bc:	2101      	movs	r1, #1
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f005 ffe4 	bl	800748c <HAL_PCDEx_LPM_Callback>
 80014c4:	e002      	b.n	80014cc <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 fd0e 	bl	8006ee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fc9d 	bl	8004e10 <USB_ReadInterrupts>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e0:	f040 80c5 	bne.w	800166e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2110      	movs	r1, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fe12 	bl	8004128 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001508:	e056      	b.n	80015b8 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001516:	461a      	mov	r2, r3
 8001518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800151c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800152e:	0151      	lsls	r1, r2, #5
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	440a      	add	r2, r1
 8001534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800153c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	015a      	lsls	r2, r3, #5
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800154e:	0151      	lsls	r1, r2, #5
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	440a      	add	r2, r1
 8001554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001558:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800155c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4413      	add	r3, r2
 8001566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156a:	461a      	mov	r2, r3
 800156c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001570:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001582:	0151      	lsls	r1, r2, #5
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	440a      	add	r2, r1
 8001588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800158c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001590:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	0151      	lsls	r1, r2, #5
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	440a      	add	r2, r1
 80015a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b4:	3301      	adds	r3, #1
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3a3      	bcc.n	800150a <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d016      	beq.n	800160c <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ee:	f043 030b 	orr.w	r3, r3, #11
 80015f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001604:	f043 030b 	orr.w	r3, r3, #11
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	e015      	b.n	8001638 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800161a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001622:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001632:	f043 030b 	orr.w	r3, r3, #11
 8001636:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001646:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800164a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f003 fc9d 	bl	8004f98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800166c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fbcc 	bl	8004e10 <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001682:	d124      	bne.n	80016ce <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 fc62 	bl	8004f52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fda9 	bl	80041ea <USB_GetDevSpeed>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681c      	ldr	r4, [r3, #0]
 80016a4:	f001 fa46 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 80016a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	f002 fb04 	bl	8003cc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f005 fbf6 	bl	8006eaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fb9c 	bl	8004e10 <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d10a      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 fbd3 	bl	8006e8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f002 0208 	and.w	r2, r2, #8
 80016f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fb87 	bl	8004e10 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800170c:	d10f      	bne.n	800172e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f005 fc45 	bl	8006fa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800172c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fb6c 	bl	8004e10 <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001742:	d10f      	bne.n	8001764 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f005 fc18 	bl	8006f84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fb51 	bl	8004e10 <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d10a      	bne.n	8001790 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f005 fc26 	bl	8006fcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800178e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fb3b 	bl	8004e10 <USB_ReadInterrupts>
 800179a:	4603      	mov	r3, r0
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d115      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f005 fc16 	bl	8006fe8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e000      	b.n	80017d0 <HAL_PCD_IRQHandler+0x742>
      return;
 80017ce:	bf00      	nop
    }
  }
}
 80017d0:	3734      	adds	r7, #52	; 0x34
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}

080017d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_PCD_SetAddress+0x1a>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e013      	b.n	8001818 <HAL_PCD_SetAddress+0x42>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fa99 	bl	8004d40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	460b      	mov	r3, r1
 8001834:	803b      	strh	r3, [r7, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800183e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0f      	bge.n	8001866 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	f003 020f 	and.w	r2, r3, #15
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	3338      	adds	r3, #56	; 0x38
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	3304      	adds	r3, #4
 800185c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	705a      	strb	r2, [r3, #1]
 8001864:	e00f      	b.n	8001886 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	3304      	adds	r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001892:	883a      	ldrh	r2, [r7, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	78ba      	ldrb	r2, [r7, #2]
 800189c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d102      	bne.n	80018bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PCD_EP_Open+0xaa>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e00e      	b.n	80018e8 <HAL_PCD_EP_Open+0xc8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fca5 	bl	8004228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018e6:	7afb      	ldrb	r3, [r7, #11]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001900:	2b00      	cmp	r3, #0
 8001902:	da0f      	bge.n	8001924 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	f003 020f 	and.w	r2, r3, #15
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	3338      	adds	r3, #56	; 0x38
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	3304      	adds	r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	705a      	strb	r2, [r3, #1]
 8001922:	e00f      	b.n	8001944 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	f003 020f 	and.w	r2, r3, #15
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	3304      	adds	r3, #4
 800193c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_EP_Close+0x6e>
 800195a:	2302      	movs	r3, #2
 800195c:	e00e      	b.n	800197c <HAL_PCD_EP_Close+0x8c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fce3 	bl	8004338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	460b      	mov	r3, r1
 8001992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	f003 020f 	and.w	r2, r3, #15
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2200      	movs	r2, #0
 80019c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d106      	bne.n	80019ea <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 ff60 	bl	80048a8 <USB_EP0StartXfer>
 80019e8:	e005      	b.n	80019f6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6979      	ldr	r1, [r7, #20]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fd7d 	bl	80044f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 020f 	and.w	r2, r3, #15
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	7afb      	ldrb	r3, [r7, #11]
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	3338      	adds	r3, #56	; 0x38
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 ff0b 	bl	80048a8 <USB_EP0StartXfer>
 8001a92:	e005      	b.n	8001aa0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fd28 	bl	80044f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d901      	bls.n	8001ac8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e04e      	b.n	8001b66 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da0f      	bge.n	8001af0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	705a      	strb	r2, [r3, #1]
 8001aee:	e00d      	b.n	8001b0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	3304      	adds	r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_PCD_EP_SetStall+0x82>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e01c      	b.n	8001b66 <HAL_PCD_EP_SetStall+0xbc>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 f82c 	bl	8004b98 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d108      	bne.n	8001b5c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f003 fa1e 	bl	8004f98 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d901      	bls.n	8001b8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e042      	b.n	8001c12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da0f      	bge.n	8001bb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3338      	adds	r3, #56	; 0x38
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	705a      	strb	r2, [r3, #1]
 8001bb2:	e00f      	b.n	8001bd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	f003 020f 	and.w	r2, r3, #15
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_PCD_EP_ClrStall+0x86>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e00e      	b.n	8001c12 <HAL_PCD_EP_ClrStall+0xa4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 f836 	bl	8004c74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	3338      	adds	r3, #56	; 0x38
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d901      	bls.n	8001c52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e067      	b.n	8001d22 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d902      	bls.n	8001c6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3303      	adds	r3, #3
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c76:	e026      	b.n	8001cc6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d902      	bls.n	8001c94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	68d9      	ldr	r1, [r3, #12]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f002 ff1b 	bl	8004ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d809      	bhi.n	8001cf0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d203      	bcs.n	8001cf0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1c3      	bne.n	8001c78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d811      	bhi.n	8001d20 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	2201      	movs	r2, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	6939      	ldr	r1, [r7, #16]
 8001d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	333c      	adds	r3, #60	; 0x3c
 8001d44:	3304      	adds	r3, #4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <PCD_EP_OutXfrComplete_int+0x98>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d124      	bne.n	8001dac <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7e:	6093      	str	r3, [r2, #8]
 8001d80:	e01a      	b.n	8001db8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f005 f83d 	bl	8006e24 <HAL_PCD_DataOutStageCallback>
 8001daa:	e005      	b.n	8001db8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4619      	mov	r1, r3
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f005 f836 	bl	8006e24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	4f54310a 	.word	0x4f54310a

08001dc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	333c      	adds	r3, #60	; 0x3c
 8001de0:	3304      	adds	r3, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <PCD_EP_OutSetupPacket_int+0x64>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d90e      	bls.n	8001e1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f004 ffef 	bl	8006e00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	4f54300a 	.word	0x4f54300a

08001e30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e4e:	883b      	ldrh	r3, [r7, #0]
 8001e50:	0419      	lsls	r1, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e5c:	e028      	b.n	8001eb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e00d      	b.n	8001e8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	3340      	adds	r3, #64	; 0x40
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	4413      	add	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3ec      	bcc.n	8001e72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e98:	883b      	ldrh	r3, [r7, #0]
 8001e9a:	0418      	lsls	r0, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4302      	orrs	r2, r0
 8001ea8:	3340      	adds	r3, #64	; 0x40
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	f043 0303 	orr.w	r3, r3, #3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40007000 	.word	0x40007000

08001f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f52:	d130      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f60:	d038      	beq.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2232      	movs	r2, #50	; 0x32
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3301      	adds	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f88:	e002      	b.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f2      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb0:	d110      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e00f      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d007      	beq.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fcc:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6053      	str	r3, [r2, #4]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40007000 	.word	0x40007000

08002010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	f000 bc16 	b.w	8002850 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002024:	4ba0      	ldr	r3, [pc, #640]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202e:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80e4 	beq.w	800220e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_RCC_OscConfig+0x4c>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	f040 808b 	bne.w	800216a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 8087 	bne.w	800216a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800205c:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x64>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e3ed      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	4b8b      	ldr	r3, [pc, #556]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_RCC_OscConfig+0x7e>
 8002084:	4b88      	ldr	r3, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	e005      	b.n	800209a <HAL_RCC_OscConfig+0x8a>
 800208e:	4b86      	ldr	r3, [pc, #536]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800209a:	4293      	cmp	r3, r2
 800209c:	d223      	bcs.n	80020e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fd52 	bl	8002b4c <RCC_SetFlashLatencyFromMSIRange>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e3ce      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b2:	4b7d      	ldr	r3, [pc, #500]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7c      	ldr	r2, [pc, #496]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b7a      	ldr	r3, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4977      	ldr	r1, [pc, #476]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d0:	4b75      	ldr	r3, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	4972      	ldr	r1, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e025      	b.n	8002132 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	496a      	ldr	r1, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	4965      	ldr	r1, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fd12 	bl	8002b4c <RCC_SetFlashLatencyFromMSIRange>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e38e      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002132:	f000 fc75 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8002136:	4601      	mov	r1, r0
 8002138:	4b5b      	ldr	r3, [pc, #364]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_RCC_OscConfig+0x29c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	fa21 f303 	lsr.w	r3, r1, r3
 800214e:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_OscConfig+0x2a0>)
 8002150:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002152:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <HAL_RCC_OscConfig+0x2a4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fb0c 	bl	8000774 <HAL_InitTick>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d052      	beq.n	800220c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	e372      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d032      	beq.n	80021d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002172:	4b4d      	ldr	r3, [pc, #308]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4c      	ldr	r2, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800217e:	f7fe fb49 	bl	8000814 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002186:	f7fe fb45 	bl	8000814 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e35b      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a4:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021aa:	f043 0308 	orr.w	r3, r3, #8
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	493a      	ldr	r1, [pc, #232]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	4935      	ldr	r1, [pc, #212]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
 80021d6:	e01a      	b.n	800220e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a32      	ldr	r2, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fb16 	bl	8000814 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ec:	f7fe fb12 	bl	8000814 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e328      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1dc>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d073      	beq.n	8002302 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d005      	beq.n	800222c <HAL_RCC_OscConfig+0x21c>
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d10e      	bne.n	8002244 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d063      	beq.n	8002300 <HAL_RCC_OscConfig+0x2f0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d15f      	bne.n	8002300 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e305      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x24c>
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0x288>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x270>
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x288>
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <HAL_RCC_OscConfig+0x298>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fab8 	bl	8000814 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	e010      	b.n	80022ca <HAL_RCC_OscConfig+0x2ba>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080077a8 	.word	0x080077a8
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7fe faac 	bl	8000814 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e2c2      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ca:	4baf      	ldr	r3, [pc, #700]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2a8>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fa9c 	bl	8000814 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe fa98 	bl	8000814 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e2ae      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f2:	4ba5      	ldr	r3, [pc, #660]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2d0>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d060      	beq.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d005      	beq.n	8002320 <HAL_RCC_OscConfig+0x310>
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d119      	bne.n	800234e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d116      	bne.n	800234e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002320:	4b99      	ldr	r3, [pc, #612]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x328>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e28b      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b93      	ldr	r3, [pc, #588]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	4990      	ldr	r1, [pc, #576]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234c:	e040      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d023      	beq.n	800239e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002356:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a8b      	ldr	r2, [pc, #556]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fa57 	bl	8000814 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7fe fa53 	bl	8000814 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e269      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800237c:	4b82      	ldr	r3, [pc, #520]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	497c      	ldr	r1, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
 800239c:	e018      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b7a      	ldr	r3, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a79      	ldr	r2, [pc, #484]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fa33 	bl	8000814 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fa2f 	bl	8000814 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e245      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c4:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d03c      	beq.n	8002456 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01c      	beq.n	800241e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ea:	4a67      	ldr	r2, [pc, #412]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fa0e 	bl	8000814 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fa0a 	bl	8000814 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e220      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240e:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x3ec>
 800241c:	e01b      	b.n	8002456 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe f9f1 	bl	8000814 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe f9ed 	bl	8000814 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e203      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002448:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80a6 	beq.w	80025b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002468:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a43      	ldr	r2, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002490:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d118      	bne.n	80024ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249c:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a8:	f7fe f9b4 	bl	8000814 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b0:	f7fe f9b0 	bl	8000814 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1c6      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c2:	4b32      	ldr	r3, [pc, #200]	; (800258c <HAL_RCC_OscConfig+0x57c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4d8>
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	4a2a      	ldr	r2, [pc, #168]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e6:	e024      	b.n	8002532 <HAL_RCC_OscConfig+0x522>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d110      	bne.n	8002512 <HAL_RCC_OscConfig+0x502>
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	4a24      	ldr	r2, [pc, #144]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	4a20      	ldr	r2, [pc, #128]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002510:	e00f      	b.n	8002532 <HAL_RCC_OscConfig+0x522>
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800252a:	f023 0304 	bic.w	r3, r3, #4
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe f96b 	bl	8000814 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe f967 	bl	8000814 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e17b      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x578>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0ed      	beq.n	8002542 <HAL_RCC_OscConfig+0x532>
 8002566:	e01a      	b.n	800259e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe f954 	bl	8000814 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800256e:	e00f      	b.n	8002590 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe f950 	bl	8000814 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d906      	bls.n	8002590 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e164      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002590:	4ba8      	ldr	r3, [pc, #672]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e8      	bne.n	8002570 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259e:	7ffb      	ldrb	r3, [r7, #31]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4ba3      	ldr	r3, [pc, #652]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	4aa2      	ldr	r2, [pc, #648]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d03c      	beq.n	8002636 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01c      	beq.n	80025fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025c4:	4b9b      	ldr	r3, [pc, #620]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80025c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ca:	4a9a      	ldr	r2, [pc, #616]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe f91e 	bl	8000814 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025dc:	f7fe f91a 	bl	8000814 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e130      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ee:	4b91      	ldr	r3, [pc, #580]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80025f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ef      	beq.n	80025dc <HAL_RCC_OscConfig+0x5cc>
 80025fc:	e01b      	b.n	8002636 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025fe:	4b8d      	ldr	r3, [pc, #564]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002604:	4a8b      	ldr	r2, [pc, #556]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260e:	f7fe f901 	bl	8000814 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002616:	f7fe f8fd 	bl	8000814 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e113      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002628:	4b82      	ldr	r3, [pc, #520]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 800262a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ef      	bne.n	8002616 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8107 	beq.w	800284e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	2b02      	cmp	r3, #2
 8002646:	f040 80cb 	bne.w	80027e0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0203 	and.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	429a      	cmp	r2, r3
 800265c:	d12c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	3b01      	subs	r3, #1
 800266a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d123      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d11b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d113      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d109      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	3b01      	subs	r3, #1
 80026b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d06d      	beq.n	8002794 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d068      	beq.n	8002790 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026be:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026ca:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0ba      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026da:	4b56      	ldr	r3, [pc, #344]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a55      	ldr	r2, [pc, #340]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80026e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e6:	f7fe f895 	bl	8000814 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe f891 	bl	8000814 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0a7      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_RCC_OscConfig+0x828>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800271c:	3a01      	subs	r2, #1
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002726:	0212      	lsls	r2, r2, #8
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0552      	lsls	r2, r2, #21
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0652      	lsls	r2, r2, #25
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002746:	06d2      	lsls	r2, r2, #27
 8002748:	430a      	orrs	r2, r1
 800274a:	493a      	ldr	r1, [pc, #232]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 800274c:	4313      	orrs	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002750:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a37      	ldr	r2, [pc, #220]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a34      	ldr	r2, [pc, #208]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002768:	f7fe f854 	bl	8000814 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe f850 	bl	8000814 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e066      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800278e:	e05e      	b.n	800284e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e05d      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d156      	bne.n	800284e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027b8:	f7fe f82c 	bl	8000814 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe f828 	bl	8000814 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e03e      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x7b0>
 80027de:	e036      	b.n	800284e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d031      	beq.n	800284a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002804:	f023 0303 	bic.w	r3, r3, #3
 8002808:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_RCC_OscConfig+0x824>)
 8002810:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fd fffb 	bl	8000814 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	e00c      	b.n	800283c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fd fff7 	bl	8000814 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d905      	bls.n	800283c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e00d      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
 8002834:	40021000 	.word	0x40021000
 8002838:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x848>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ec      	bne.n	8002822 <HAL_RCC_OscConfig+0x812>
 8002848:	e001      	b.n	800284e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0c8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4961      	ldr	r1, [pc, #388]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b0      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d04c      	beq.n	8002946 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b4:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d121      	bne.n	8002904 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e09e      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d115      	bne.n	8002904 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e092      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028e4:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e086      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f4:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e07e      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002904:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 0203 	bic.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	493f      	ldr	r1, [pc, #252]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002916:	f7fd ff7d 	bl	8000814 <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	e00a      	b.n	8002934 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7fd ff79 	bl	8000814 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e066      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 020c 	and.w	r2, r3, #12
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	429a      	cmp	r2, r3
 8002944:	d1eb      	bne.n	800291e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	492c      	ldr	r1, [pc, #176]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d210      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4924      	ldr	r1, [pc, #144]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1b0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e036      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4918      	ldr	r1, [pc, #96]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4910      	ldr	r1, [pc, #64]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d2:	f000 f825 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029d6:	4601      	mov	r1, r0
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	fa21 f303 	lsr.w	r3, r1, r3
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd febc 	bl	8000774 <HAL_InitTick>
 80029fc:	4603      	mov	r3, r0
 80029fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a00:	7afb      	ldrb	r3, [r7, #11]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40021000 	.word	0x40021000
 8002a14:	080077a8 	.word	0x080077a8
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d121      	bne.n	8002a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d11e      	bne.n	8002a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e005      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a98:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	e004      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d133      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0xaa>
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ac6:	617b      	str	r3, [r7, #20]
      break;
 8002ac8:	e005      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002acc:	617b      	str	r3, [r7, #20]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	617b      	str	r3, [r7, #20]
      break;
 8002ad4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	fb02 f203 	mul.w	r2, r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0e5b      	lsrs	r3, r3, #25
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b16:	69bb      	ldr	r3, [r7, #24]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3724      	adds	r7, #36	; 0x24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000
 8002b28:	080077b8 	.word	0x080077b8
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200

08002b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000000 	.word	0x20000000

08002b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b64:	f7ff f9e0 	bl	8001f28 <HAL_PWREx_GetVoltageRange>
 8002b68:	6178      	str	r0, [r7, #20]
 8002b6a:	e014      	b.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6593      	str	r3, [r2, #88]	; 0x58
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b84:	f7ff f9d0 	bl	8001f28 <HAL_PWREx_GetVoltageRange>
 8002b88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9c:	d10b      	bne.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d919      	bls.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ba8:	d902      	bls.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002baa:	2302      	movs	r3, #2
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e013      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	e010      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b80      	cmp	r3, #128	; 0x80
 8002bba:	d902      	bls.n	8002bc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	e00a      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d102      	bne.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc8:	2302      	movs	r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e004      	b.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d101      	bne.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0207 	bic.w	r2, r3, #7
 8002be0:	4909      	ldr	r1, [pc, #36]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c14:	2300      	movs	r3, #0
 8002c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d03f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c30:	d01c      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c36:	d802      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c3c:	e01f      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c42:	d003      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c48:	d01c      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002c4a:	e018      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c4c:	4b85      	ldr	r3, [pc, #532]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a84      	ldr	r2, [pc, #528]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c58:	e015      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fadb 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c6a:	e00c      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3320      	adds	r3, #32
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fbc2 	bl	80033fc <RCCEx_PLLSAI2_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7c:	e003      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	74fb      	strb	r3, [r7, #19]
      break;
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c8c:	4b75      	ldr	r3, [pc, #468]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c9a:	4972      	ldr	r1, [pc, #456]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ca2:	e001      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d03f      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d01c      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc2:	d802      	bhi.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002cc8:	e01f      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cce:	d003      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002cd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cd4:	d01c      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002cd6:	e018      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cd8:	4b62      	ldr	r3, [pc, #392]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a61      	ldr	r2, [pc, #388]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ce4:	e015      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fa95 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cf6:	e00c      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3320      	adds	r3, #32
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fb7c 	bl	80033fc <RCCEx_PLLSAI2_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d08:	e003      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d0e:	e000      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d18:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d26:	494f      	ldr	r1, [pc, #316]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d2e:	e001      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a0 	beq.w	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a40      	ldr	r2, [pc, #256]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
 8002d68:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d84:	f7fd fd46 	bl	8000814 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d8a:	e009      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8c:	f7fd fd42 	bl	8000814 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d9e:	e005      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d15c      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01f      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d019      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fd fd01 	bl	8000814 <HAL_GetTick>
 8002e12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e14:	e00b      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fd fcfd 	bl	8000814 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d902      	bls.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e2c:	e006      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ec      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	4904      	ldr	r1, [pc, #16]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e5a:	e009      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	74bb      	strb	r3, [r7, #18]
 8002e60:	e006      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e70:	7c7b      	ldrb	r3, [r7, #17]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e76:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	4aa5      	ldr	r2, [pc, #660]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e8e:	4ba0      	ldr	r3, [pc, #640]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f023 0203 	bic.w	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	499c      	ldr	r1, [pc, #624]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb0:	4b97      	ldr	r3, [pc, #604]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 020c 	bic.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	4994      	ldr	r1, [pc, #592]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ed2:	4b8f      	ldr	r3, [pc, #572]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	498b      	ldr	r1, [pc, #556]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ef4:	4b86      	ldr	r3, [pc, #536]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4983      	ldr	r1, [pc, #524]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f16:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	497a      	ldr	r1, [pc, #488]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f38:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	4972      	ldr	r1, [pc, #456]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	4969      	ldr	r1, [pc, #420]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8a:	4961      	ldr	r1, [pc, #388]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	4958      	ldr	r1, [pc, #352]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	4950      	ldr	r1, [pc, #320]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fe2:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4947      	ldr	r1, [pc, #284]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003004:	4b42      	ldr	r3, [pc, #264]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	493f      	ldr	r1, [pc, #252]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d028      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003026:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4936      	ldr	r1, [pc, #216]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003044:	d106      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003046:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800304c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003050:	60d3      	str	r3, [r2, #12]
 8003052:	e011      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305c:	d10c      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f000 f8d9 	bl	800321c <RCCEx_PLLSAI1_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d028      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003084:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	491f      	ldr	r1, [pc, #124]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a2:	d106      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ae:	60d3      	str	r3, [r2, #12]
 80030b0:	e011      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ba:	d10c      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f8aa 	bl	800321c <RCCEx_PLLSAI1_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003100:	d108      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003102:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4a02      	ldr	r2, [pc, #8]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800310c:	60d3      	str	r3, [r2, #12]
 800310e:	e013      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003110:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800311c:	d10c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f879 	bl	800321c <RCCEx_PLLSAI1_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003152:	4929      	ldr	r1, [pc, #164]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800315e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003162:	d10d      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f856 	bl	800321c <RCCEx_PLLSAI1_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d014      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	74bb      	strb	r3, [r7, #18]
 800317e:	e011      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3320      	adds	r3, #32
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f933 	bl	80033fc <RCCEx_PLLSAI2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c0:	490d      	ldr	r1, [pc, #52]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e4:	4904      	ldr	r1, [pc, #16]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000

0800321c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322a:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003236:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
       ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
       ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d044      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	e041      	b.n	80032ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d00c      	beq.n	800328a <RCCEx_PLLSAI1_Config+0x6e>
 8003270:	2b03      	cmp	r3, #3
 8003272:	d013      	beq.n	800329c <RCCEx_PLLSAI1_Config+0x80>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d120      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003278:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11d      	bne.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003288:	e01a      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800328a:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329a:	e013      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800329c:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10f      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032b8:	e006      	b.n	80032c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
      break;
 80032be:	e004      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80032c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	430b      	orrs	r3, r1
 80032e6:	4944      	ldr	r1, [pc, #272]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d17c      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032f2:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a40      	ldr	r2, [pc, #256]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fe:	f7fd fa89 	bl	8000814 <HAL_GetTick>
 8003302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003304:	e009      	b.n	800331a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003306:	f7fd fa85 	bl	8000814 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	73fb      	strb	r3, [r7, #15]
        break;
 8003318:	e005      	b.n	8003326 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ef      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d15f      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d110      	bne.n	8003354 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800333a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	0211      	lsls	r1, r2, #8
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68d2      	ldr	r2, [r2, #12]
 8003348:	06d2      	lsls	r2, r2, #27
 800334a:	430a      	orrs	r2, r1
 800334c:	492a      	ldr	r1, [pc, #168]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	610b      	str	r3, [r1, #16]
 8003352:	e027      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d112      	bne.n	8003380 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335a:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003362:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	0211      	lsls	r1, r2, #8
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6912      	ldr	r2, [r2, #16]
 8003370:	0852      	lsrs	r2, r2, #1
 8003372:	3a01      	subs	r2, #1
 8003374:	0552      	lsls	r2, r2, #21
 8003376:	430a      	orrs	r2, r1
 8003378:	491f      	ldr	r1, [pc, #124]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	610b      	str	r3, [r1, #16]
 800337e:	e011      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003388:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	0211      	lsls	r1, r2, #8
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6952      	ldr	r2, [r2, #20]
 8003396:	0852      	lsrs	r2, r2, #1
 8003398:	3a01      	subs	r2, #1
 800339a:	0652      	lsls	r2, r2, #25
 800339c:	430a      	orrs	r2, r1
 800339e:	4916      	ldr	r1, [pc, #88]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fd fa30 	bl	8000814 <HAL_GetTick>
 80033b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033b6:	e009      	b.n	80033cc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033b8:	f7fd fa2c 	bl	8000814 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d902      	bls.n	80033cc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	73fb      	strb	r3, [r7, #15]
          break;
 80033ca:	e005      	b.n	80033d8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ef      	beq.n	80033b8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	4904      	ldr	r1, [pc, #16]	; (80033f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000

080033fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800340a:	4b68      	ldr	r3, [pc, #416]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0203 	and.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d10d      	bne.n	8003442 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
       ||
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
       ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d044      	beq.n	80034cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e041      	b.n	80034cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d00c      	beq.n	800346a <RCCEx_PLLSAI2_Config+0x6e>
 8003450:	2b03      	cmp	r3, #3
 8003452:	d013      	beq.n	800347c <RCCEx_PLLSAI2_Config+0x80>
 8003454:	2b01      	cmp	r3, #1
 8003456:	d120      	bne.n	800349a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003458:	4b54      	ldr	r3, [pc, #336]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003468:	e01a      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800346a:	4b50      	ldr	r3, [pc, #320]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347a:	e013      	b.n	80034a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003498:	e006      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
      break;
 800349e:	e004      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80034a0:	bf00      	nop
 80034a2:	e002      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80034a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034b0:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	430b      	orrs	r3, r1
 80034c6:	4939      	ldr	r1, [pc, #228]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d166      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034de:	f7fd f999 	bl	8000814 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e4:	e009      	b.n	80034fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e6:	f7fd f995 	bl	8000814 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d902      	bls.n	80034fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	73fb      	strb	r3, [r7, #15]
        break;
 80034f8:	e005      	b.n	8003506 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ef      	bne.n	80034e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d149      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d110      	bne.n	8003534 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800351a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68d2      	ldr	r2, [r2, #12]
 8003528:	06d2      	lsls	r2, r2, #27
 800352a:	430a      	orrs	r2, r1
 800352c:	491f      	ldr	r1, [pc, #124]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	614b      	str	r3, [r1, #20]
 8003532:	e011      	b.n	8003558 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800353c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	0211      	lsls	r1, r2, #8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6912      	ldr	r2, [r2, #16]
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	3a01      	subs	r2, #1
 800354e:	0652      	lsls	r2, r2, #25
 8003550:	430a      	orrs	r2, r1
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003554:	4313      	orrs	r3, r2
 8003556:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fd f956 	bl	8000814 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800356c:	f7fd f952 	bl	8000814 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
          break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ef      	beq.n	800356c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4904      	ldr	r1, [pc, #16]	; (80035ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e049      	b.n	8003656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fc ffcc 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 f958 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d001      	beq.n	8003678 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e047      	b.n	8003708 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a23      	ldr	r2, [pc, #140]	; (8003714 <HAL_TIM_Base_Start+0xb4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01d      	beq.n	80036c6 <HAL_TIM_Base_Start+0x66>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d018      	beq.n	80036c6 <HAL_TIM_Base_Start+0x66>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_Base_Start+0xb8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_TIM_Base_Start+0x66>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_TIM_Base_Start+0xbc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIM_Base_Start+0x66>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_TIM_Base_Start+0xc0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_Base_Start+0x66>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_TIM_Base_Start+0xc4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_Base_Start+0x66>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_TIM_Base_Start+0xc8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d115      	bne.n	80036f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_TIM_Base_Start+0xcc>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d015      	beq.n	8003704 <HAL_TIM_Base_Start+0xa4>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d011      	beq.n	8003704 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	e008      	b.n	8003704 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e000      	b.n	8003706 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40013400 	.word	0x40013400
 8003728:	40014000 	.word	0x40014000
 800372c:	00010007 	.word	0x00010007

08003730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x18>
 8003744:	2302      	movs	r3, #2
 8003746:	e0a8      	b.n	800389a <HAL_TIM_ConfigClockSource+0x16a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d067      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x124>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d80b      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x70>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d073      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x144>
 800378c:	2b10      	cmp	r3, #16
 800378e:	d802      	bhi.n	8003796 <HAL_TIM_ConfigClockSource+0x66>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d06f      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003794:	e078      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003796:	2b20      	cmp	r3, #32
 8003798:	d06c      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x144>
 800379a:	2b30      	cmp	r3, #48	; 0x30
 800379c:	d06a      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800379e:	e073      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d00d      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0x90>
 80037a4:	2b70      	cmp	r3, #112	; 0x70
 80037a6:	d804      	bhi.n	80037b2 <HAL_TIM_ConfigClockSource+0x82>
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d033      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0xe4>
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d041      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80037b0:	e06a      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d066      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x156>
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d017      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80037be:	e063      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f000 f97c 	bl	8003acc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
      break;
 80037ec:	e04c      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f000 f965 	bl	8003acc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003810:	609a      	str	r2, [r3, #8]
      break;
 8003812:	e039      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	461a      	mov	r2, r3
 8003822:	f000 f8d9 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2150      	movs	r1, #80	; 0x50
 800382c:	4618      	mov	r0, r3
 800382e:	f000 f932 	bl	8003a96 <TIM_ITRx_SetConfig>
      break;
 8003832:	e029      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	461a      	mov	r2, r3
 8003842:	f000 f8f8 	bl	8003a36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2160      	movs	r1, #96	; 0x60
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f922 	bl	8003a96 <TIM_ITRx_SetConfig>
      break;
 8003852:	e019      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	461a      	mov	r2, r3
 8003862:	f000 f8b9 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2140      	movs	r1, #64	; 0x40
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f912 	bl	8003a96 <TIM_ITRx_SetConfig>
      break;
 8003872:	e009      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 f909 	bl	8003a96 <TIM_ITRx_SetConfig>
        break;
 8003884:	e000      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <TIM_Base_SetConfig+0x118>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01f      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d01b      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <TIM_Base_SetConfig+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d017      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00f      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00b      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <TIM_Base_SetConfig+0x128>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <TIM_Base_SetConfig+0x12c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0x9a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d108      	bne.n	8003950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a10      	ldr	r2, [pc, #64]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00f      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00b      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <TIM_Base_SetConfig+0x128>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d007      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <TIM_Base_SetConfig+0x12c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <TIM_Base_SetConfig+0x130>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40013400 	.word	0x40013400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800

080039d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 030a 	bic.w	r3, r3, #10
 8003a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	621a      	str	r2, [r3, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b087      	sub	sp, #28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0210 	bic.w	r2, r3, #16
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	031b      	lsls	r3, r3, #12
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f043 0307 	orr.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	021a      	lsls	r2, r3, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	609a      	str	r2, [r3, #8]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e068      	b.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2e      	ldr	r2, [pc, #184]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b96:	d018      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40013400 	.word	0x40013400
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40014000 	.word	0x40014000

08003c1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	f107 001c 	add.w	r0, r7, #28
 8003c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d122      	bne.n	8003c7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f001 f9da 	bl	8005028 <USB_CoreReset>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e01a      	b.n	8003cb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 f9ce 	bl	8005028 <USB_CoreReset>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca2:	e005      	b.n	8003cb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cbc:	b004      	add	sp, #16
 8003cbe:	4770      	bx	lr

08003cc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d165      	bne.n	8003da0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4a3e      	ldr	r2, [pc, #248]	; (8003dd0 <USB_SetTurnaroundTime+0x110>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d906      	bls.n	8003cea <USB_SetTurnaroundTime+0x2a>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a3d      	ldr	r2, [pc, #244]	; (8003dd4 <USB_SetTurnaroundTime+0x114>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d802      	bhi.n	8003cea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e05c      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4a39      	ldr	r2, [pc, #228]	; (8003dd4 <USB_SetTurnaroundTime+0x114>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d906      	bls.n	8003d00 <USB_SetTurnaroundTime+0x40>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a38      	ldr	r2, [pc, #224]	; (8003dd8 <USB_SetTurnaroundTime+0x118>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d802      	bhi.n	8003d00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003cfa:	230e      	movs	r3, #14
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e051      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <USB_SetTurnaroundTime+0x118>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d906      	bls.n	8003d16 <USB_SetTurnaroundTime+0x56>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <USB_SetTurnaroundTime+0x11c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d802      	bhi.n	8003d16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d10:	230d      	movs	r3, #13
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e046      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <USB_SetTurnaroundTime+0x11c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d906      	bls.n	8003d2c <USB_SetTurnaroundTime+0x6c>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <USB_SetTurnaroundTime+0x120>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d802      	bhi.n	8003d2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d26:	230c      	movs	r3, #12
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e03b      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a2c      	ldr	r2, [pc, #176]	; (8003de0 <USB_SetTurnaroundTime+0x120>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d906      	bls.n	8003d42 <USB_SetTurnaroundTime+0x82>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <USB_SetTurnaroundTime+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d802      	bhi.n	8003d42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d3c:	230b      	movs	r3, #11
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e030      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a27      	ldr	r2, [pc, #156]	; (8003de4 <USB_SetTurnaroundTime+0x124>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d906      	bls.n	8003d58 <USB_SetTurnaroundTime+0x98>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <USB_SetTurnaroundTime+0x128>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d802      	bhi.n	8003d58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d52:	230a      	movs	r3, #10
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e025      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <USB_SetTurnaroundTime+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d906      	bls.n	8003d6e <USB_SetTurnaroundTime+0xae>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4a22      	ldr	r2, [pc, #136]	; (8003dec <USB_SetTurnaroundTime+0x12c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d802      	bhi.n	8003d6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d68:	2309      	movs	r3, #9
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e01a      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <USB_SetTurnaroundTime+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d906      	bls.n	8003d84 <USB_SetTurnaroundTime+0xc4>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <USB_SetTurnaroundTime+0x130>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d802      	bhi.n	8003d84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d7e:	2308      	movs	r3, #8
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e00f      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <USB_SetTurnaroundTime+0x130>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d906      	bls.n	8003d9a <USB_SetTurnaroundTime+0xda>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <USB_SetTurnaroundTime+0x134>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d802      	bhi.n	8003d9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d94:	2307      	movs	r3, #7
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e004      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d9a:	2306      	movs	r3, #6
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e001      	b.n	8003da4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003da0:	2309      	movs	r3, #9
 8003da2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	029b      	lsls	r3, r3, #10
 8003db8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	00d8acbf 	.word	0x00d8acbf
 8003dd4:	00e4e1bf 	.word	0x00e4e1bf
 8003dd8:	00f423ff 	.word	0x00f423ff
 8003ddc:	0106737f 	.word	0x0106737f
 8003de0:	011a499f 	.word	0x011a499f
 8003de4:	01312cff 	.word	0x01312cff
 8003de8:	014ca43f 	.word	0x014ca43f
 8003dec:	016e35ff 	.word	0x016e35ff
 8003df0:	01a6ab1f 	.word	0x01a6ab1f
 8003df4:	01e847ff 	.word	0x01e847ff

08003df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d106      	bne.n	8003e68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	e00b      	b.n	8003e80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	e001      	b.n	8003e80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e003      	b.n	8003e88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e80:	2032      	movs	r0, #50	; 0x32
 8003e82:	f7fc fcd3 	bl	800082c <HAL_Delay>

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e90:	b084      	sub	sp, #16
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e009      	b.n	8003ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3340      	adds	r3, #64	; 0x40
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b0e      	cmp	r3, #14
 8003ec8:	d9f2      	bls.n	8003eb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11c      	bne.n	8003f0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e005      	b.n	8003f16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f30:	461a      	mov	r2, r3
 8003f32:	680b      	ldr	r3, [r1, #0]
 8003f34:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f36:	2103      	movs	r1, #3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f93d 	bl	80041b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f3e:	2110      	movs	r1, #16
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8f1 	bl	8004128 <USB_FlushTxFifo>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f90f 	bl	8004174 <USB_FlushRxFifo>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2300      	movs	r3, #0
 8003f82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e043      	b.n	8004012 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa0:	d118      	bne.n	8003fd4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e013      	b.n	8003fe6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e008      	b.n	8003fe6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004004:	461a      	mov	r2, r3
 8004006:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800400a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	3301      	adds	r3, #1
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	429a      	cmp	r2, r3
 8004018:	d3b7      	bcc.n	8003f8a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e043      	b.n	80040a8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004036:	d118      	bne.n	800406a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e013      	b.n	800407c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e008      	b.n	800407c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	461a      	mov	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3301      	adds	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3b7      	bcc.n	8004020 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	4b10      	ldr	r3, [pc, #64]	; (8004124 <USB_DevInit+0x294>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f043 0208 	orr.w	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410a:	f043 0304 	orr.w	r3, r3, #4
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800411e:	b004      	add	sp, #16
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	803c3800 	.word	0x803c3800

08004128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	019b      	lsls	r3, r3, #6
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <USB_FlushTxFifo+0x48>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e006      	b.n	8004162 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b20      	cmp	r3, #32
 800415e:	d0f0      	beq.n	8004142 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	00030d40 	.word	0x00030d40

08004174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2210      	movs	r2, #16
 8004184:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <USB_FlushRxFifo+0x40>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d0f0      	beq.n	8004186 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	00030d40 	.word	0x00030d40

080041b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d002      	beq.n	8004210 <USB_GetDevSpeed+0x26>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b06      	cmp	r3, #6
 800420e:	d102      	bne.n	8004216 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004210:	2302      	movs	r3, #2
 8004212:	75fb      	strb	r3, [r7, #23]
 8004214:	e001      	b.n	800421a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004216:	230f      	movs	r3, #15
 8004218:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d13a      	bne.n	80042ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	b29b      	uxth	r3, r3
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004262:	4313      	orrs	r3, r2
 8004264:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d155      	bne.n	8004328 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	78db      	ldrb	r3, [r3, #3]
 8004296:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004298:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042a0:	4313      	orrs	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e036      	b.n	8004328 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d8:	4313      	orrs	r3, r2
 80042da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11a      	bne.n	8004328 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	78db      	ldrb	r3, [r3, #3]
 800430c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800430e:	430b      	orrs	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004326:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	785b      	ldrb	r3, [r3, #1]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d161      	bne.n	8004418 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436a:	d11f      	bne.n	80043ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800438a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043cc:	4013      	ands	r3, r2
 80043ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f0:	4013      	ands	r3, r2
 80043f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	0159      	lsls	r1, r3, #5
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	440b      	add	r3, r1
 800440a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440e:	4619      	mov	r1, r3
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <USB_DeactivateEndpoint+0x1b0>)
 8004412:	4013      	ands	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
 8004416:	e060      	b.n	80044da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800442a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800442e:	d11f      	bne.n	8004470 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800444e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800446e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f303 	lsl.w	r3, r1, r3
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	43db      	mvns	r3, r3
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004490:	4013      	ands	r3, r2
 8004492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	43db      	mvns	r3, r3
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b4:	4013      	ands	r3, r2
 80044b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	0159      	lsls	r1, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	4619      	mov	r1, r3
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <USB_DeactivateEndpoint+0x1b4>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	ec337800 	.word	0xec337800
 80044ec:	eff37800 	.word	0xeff37800

080044f0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 810a 	bne.w	8004722 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d132      	bne.n	800457c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	0cdb      	lsrs	r3, r3, #19
 8004576:	04db      	lsls	r3, r3, #19
 8004578:	6113      	str	r3, [r2, #16]
 800457a:	e074      	b.n	8004666 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	0151      	lsls	r1, r2, #5
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	440a      	add	r2, r1
 8004592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004596:	0cdb      	lsrs	r3, r3, #19
 8004598:	04db      	lsls	r3, r3, #19
 800459a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6959      	ldr	r1, [r3, #20]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	440b      	add	r3, r1
 80045d8:	1e59      	subs	r1, r3, #1
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e2:	04d9      	lsls	r1, r3, #19
 80045e4:	4baf      	ldr	r3, [pc, #700]	; (80048a4 <USB_EPStartXfer+0x3b4>)
 80045e6:	400b      	ands	r3, r1
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	0148      	lsls	r0, r1, #5
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	4401      	add	r1, r0
 80045f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045f4:	4313      	orrs	r3, r2
 80045f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	0148      	lsls	r0, r1, #5
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	4401      	add	r1, r0
 8004616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800461a:	4313      	orrs	r3, r2
 800461c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	78db      	ldrb	r3, [r3, #3]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d11f      	bne.n	8004666 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004644:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004664:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	440a      	add	r2, r1
 800467c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004684:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	78db      	ldrb	r3, [r3, #3]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d015      	beq.n	80046ba <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8100 	beq.w	8004898 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	6979      	ldr	r1, [r7, #20]
 80046b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b4:	4313      	orrs	r3, r2
 80046b6:	634b      	str	r3, [r1, #52]	; 0x34
 80046b8:	e0ee      	b.n	8004898 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d110      	bne.n	80046ec <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e00f      	b.n	800470c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68d9      	ldr	r1, [r3, #12]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	b29b      	uxth	r3, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9e2 	bl	8004ae4 <USB_WritePacket>
 8004720:	e0ba      	b.n	8004898 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473c:	0cdb      	lsrs	r3, r3, #19
 800473e:	04db      	lsls	r3, r3, #19
 8004740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004760:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004764:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d123      	bne.n	80047b6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004784:	6939      	ldr	r1, [r7, #16]
 8004786:	0148      	lsls	r0, r1, #5
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	4401      	add	r1, r0
 800478c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004790:	4313      	orrs	r3, r2
 8004792:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047b2:	6113      	str	r3, [r2, #16]
 80047b4:	e033      	b.n	800481e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	4413      	add	r3, r2
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	89fb      	ldrh	r3, [r7, #14]
 80047dc:	04d9      	lsls	r1, r3, #19
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <USB_EPStartXfer+0x3b4>)
 80047e0:	400b      	ands	r3, r1
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	0148      	lsls	r0, r1, #5
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	4401      	add	r1, r0
 80047ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047ee:	4313      	orrs	r3, r2
 80047f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	89f9      	ldrh	r1, [r7, #14]
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480e:	6939      	ldr	r1, [r7, #16]
 8004810:	0148      	lsls	r0, r1, #5
 8004812:	6979      	ldr	r1, [r7, #20]
 8004814:	4401      	add	r1, r0
 8004816:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800481a:	4313      	orrs	r3, r2
 800481c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d128      	bne.n	8004878 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d110      	bne.n	8004858 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00f      	b.n	8004878 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	0151      	lsls	r1, r2, #5
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	440a      	add	r2, r1
 800486e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004876:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	1ff80000 	.word	0x1ff80000

080048a8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 80ab 	bne.w	8004a1c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d132      	bne.n	8004934 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	0cdb      	lsrs	r3, r3, #19
 800492e:	04db      	lsls	r3, r3, #19
 8004930:	6113      	str	r3, [r2, #16]
 8004932:	e04e      	b.n	80049d2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494e:	0cdb      	lsrs	r3, r3, #19
 8004950:	04db      	lsls	r3, r3, #19
 8004952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004972:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004976:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	d903      	bls.n	800498c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	0148      	lsls	r0, r1, #5
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	4401      	add	r1, r0
 80049ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049ce:	4313      	orrs	r3, r2
 80049d0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d06d      	beq.n	8004ad6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	68f9      	ldr	r1, [r7, #12]
 8004a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a16:	4313      	orrs	r3, r2
 8004a18:	634b      	str	r3, [r1, #52]	; 0x34
 8004a1a:	e05c      	b.n	8004ad6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	0cdb      	lsrs	r3, r3, #19
 8004a38:	04db      	lsls	r3, r3, #19
 8004a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	0148      	lsls	r0, r1, #5
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	4401      	add	r1, r0
 8004aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ad4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	460b      	mov	r3, r1
 8004af4:	71fb      	strb	r3, [r7, #7]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004b02:	88bb      	ldrh	r3, [r7, #4]
 8004b04:	3303      	adds	r3, #3
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e00f      	b.n	8004b30 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	031a      	lsls	r2, r3, #12
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	3304      	adds	r3, #4
 8004b28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3eb      	bcc.n	8004b10 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b089      	sub	sp, #36	; 0x24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	3303      	adds	r3, #3
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e00b      	b.n	8004b82 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3ef      	bcc.n	8004b6a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3724      	adds	r7, #36	; 0x24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d12c      	bne.n	8004c0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db12      	blt.n	8004bec <USB_EPSetStall+0x54>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00f      	beq.n	8004bec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e02b      	b.n	8004c66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db12      	blt.n	8004c46 <USB_EPSetStall+0xae>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00f      	beq.n	8004c46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d128      	bne.n	8004ce2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	0151      	lsls	r1, r2, #5
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	78db      	ldrb	r3, [r3, #3]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d003      	beq.n	8004cc0 <USB_EPClearStall+0x4c>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	78db      	ldrb	r3, [r3, #3]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d138      	bne.n	8004d32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e027      	b.n	8004d32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	78db      	ldrb	r3, [r3, #3]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d003      	beq.n	8004d12 <USB_EPClearStall+0x9e>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	78db      	ldrb	r3, [r3, #3]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d10f      	bne.n	8004d32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dba:	f023 0302 	bic.w	r3, r3, #2
 8004dbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfc:	f043 0302 	orr.w	r3, r3, #2
 8004e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e28:	68fb      	ldr	r3, [r7, #12]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	b29b      	uxth	r3, r3
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	01db      	lsls	r3, r3, #7
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4013      	ands	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f28:	68bb      	ldr	r3, [r7, #8]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0301 	and.w	r3, r3, #1
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f70:	f023 0307 	bic.w	r3, r3, #7
 8004f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	333c      	adds	r3, #60	; 0x3c
 8004faa:	3304      	adds	r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <USB_EP0_OutStart+0x8c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d90a      	bls.n	8004fce <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc8:	d101      	bne.n	8004fce <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e024      	b.n	8005018 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffc:	f043 0318 	orr.w	r3, r3, #24
 8005000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005014:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	4f54300a 	.word	0x4f54300a

08005028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <USB_CoreReset+0x64>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e01b      	b.n	800507e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	daf2      	bge.n	8005034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3301      	adds	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a09      	ldr	r2, [pc, #36]	; (800508c <USB_CoreReset+0x64>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	d0f0      	beq.n	800505e <USB_CoreReset+0x36>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	00030d40 	.word	0x00030d40

08005090 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800509c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80050a0:	f002 fa72 	bl	8007588 <malloc>
 80050a4:	4603      	mov	r3, r0
 80050a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d105      	bne.n	80050ba <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80050b6:	2302      	movs	r3, #2
 80050b8:	e066      	b.n	8005188 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7c1b      	ldrb	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d119      	bne.n	80050fe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ce:	2202      	movs	r2, #2
 80050d0:	2181      	movs	r1, #129	; 0x81
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f002 f814 	bl	8007100 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80050de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e2:	2202      	movs	r2, #2
 80050e4:	2101      	movs	r1, #1
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 f80a 	bl	8007100 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2210      	movs	r2, #16
 80050f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80050fc:	e016      	b.n	800512c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80050fe:	2340      	movs	r3, #64	; 0x40
 8005100:	2202      	movs	r2, #2
 8005102:	2181      	movs	r1, #129	; 0x81
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 fffb 	bl	8007100 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	2202      	movs	r2, #2
 8005114:	2101      	movs	r1, #1
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fff2 	bl	8007100 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2210      	movs	r2, #16
 8005128:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800512c:	2308      	movs	r3, #8
 800512e:	2203      	movs	r2, #3
 8005130:	2182      	movs	r1, #130	; 0x82
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 ffe4 	bl	8007100 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7c1b      	ldrb	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800516c:	2101      	movs	r1, #1
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f002 f940 	bl	80073f4 <USBD_LL_PrepareReceive>
 8005174:	e007      	b.n	8005186 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f002 f937 	bl	80073f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800519c:	2181      	movs	r1, #129	; 0x81
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 ffec 	bl	800717c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80051aa:	2101      	movs	r1, #1
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 ffe5 	bl	800717c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80051ba:	2182      	movs	r1, #130	; 0x82
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 ffdd 	bl	800717c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ec:	4618      	mov	r0, r3
 80051ee:	f002 f9d3 	bl	8007598 <free>
    pdev->pClassData = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005214:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800522a:	2b00      	cmp	r3, #0
 800522c:	d03a      	beq.n	80052a4 <USBD_CDC_Setup+0xa0>
 800522e:	2b20      	cmp	r3, #32
 8005230:	f040 8097 	bne.w	8005362 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	88db      	ldrh	r3, [r3, #6]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d029      	beq.n	8005290 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	b25b      	sxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	da11      	bge.n	800526a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005252:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	88d2      	ldrh	r2, [r2, #6]
 8005258:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800525a:	6939      	ldr	r1, [r7, #16]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	88db      	ldrh	r3, [r3, #6]
 8005260:	461a      	mov	r2, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 facf 	bl	8006806 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005268:	e082      	b.n	8005370 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	785a      	ldrb	r2, [r3, #1]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	88db      	ldrh	r3, [r3, #6]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005280:	6939      	ldr	r1, [r7, #16]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	88db      	ldrh	r3, [r3, #6]
 8005286:	461a      	mov	r2, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fae8 	bl	800685e <USBD_CtlPrepareRx>
      break;
 800528e:	e06f      	b.n	8005370 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	7850      	ldrb	r0, [r2, #1]
 800529c:	2200      	movs	r2, #0
 800529e:	6839      	ldr	r1, [r7, #0]
 80052a0:	4798      	blx	r3
      break;
 80052a2:	e065      	b.n	8005370 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b0b      	cmp	r3, #11
 80052aa:	d84f      	bhi.n	800534c <USBD_CDC_Setup+0x148>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <USBD_CDC_Setup+0xb0>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052e5 	.word	0x080052e5
 80052b8:	0800535b 	.word	0x0800535b
 80052bc:	0800534d 	.word	0x0800534d
 80052c0:	0800534d 	.word	0x0800534d
 80052c4:	0800534d 	.word	0x0800534d
 80052c8:	0800534d 	.word	0x0800534d
 80052cc:	0800534d 	.word	0x0800534d
 80052d0:	0800534d 	.word	0x0800534d
 80052d4:	0800534d 	.word	0x0800534d
 80052d8:	0800534d 	.word	0x0800534d
 80052dc:	0800530d 	.word	0x0800530d
 80052e0:	08005335 	.word	0x08005335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80052ee:	f107 030c 	add.w	r3, r7, #12
 80052f2:	2202      	movs	r2, #2
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fa85 	bl	8006806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052fc:	e030      	b.n	8005360 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 fa0f 	bl	8006724 <USBD_CtlError>
            ret = USBD_FAIL;
 8005306:	2303      	movs	r3, #3
 8005308:	75fb      	strb	r3, [r7, #23]
          break;
 800530a:	e029      	b.n	8005360 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005316:	f107 030f 	add.w	r3, r7, #15
 800531a:	2201      	movs	r2, #1
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fa71 	bl	8006806 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005324:	e01c      	b.n	8005360 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 f9fb 	bl	8006724 <USBD_CtlError>
            ret = USBD_FAIL;
 800532e:	2303      	movs	r3, #3
 8005330:	75fb      	strb	r3, [r7, #23]
          break;
 8005332:	e015      	b.n	8005360 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533a:	2b03      	cmp	r3, #3
 800533c:	d00f      	beq.n	800535e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 f9ef 	bl	8006724 <USBD_CtlError>
            ret = USBD_FAIL;
 8005346:	2303      	movs	r3, #3
 8005348:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800534a:	e008      	b.n	800535e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 f9e8 	bl	8006724 <USBD_CtlError>
          ret = USBD_FAIL;
 8005354:	2303      	movs	r3, #3
 8005356:	75fb      	strb	r3, [r7, #23]
          break;
 8005358:	e002      	b.n	8005360 <USBD_CDC_Setup+0x15c>
          break;
 800535a:	bf00      	nop
 800535c:	e008      	b.n	8005370 <USBD_CDC_Setup+0x16c>
          break;
 800535e:	bf00      	nop
      }
      break;
 8005360:	e006      	b.n	8005370 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f9dd 	bl	8006724 <USBD_CtlError>
      ret = USBD_FAIL;
 800536a:	2303      	movs	r3, #3
 800536c:	75fb      	strb	r3, [r7, #23]
      break;
 800536e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop

0800537c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800538e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800539a:	2303      	movs	r3, #3
 800539c:	e04f      	b.n	800543e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3318      	adds	r3, #24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d029      	beq.n	8005410 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3318      	adds	r3, #24
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	78f9      	ldrb	r1, [r7, #3]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	460b      	mov	r3, r1
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	1a5b      	subs	r3, r3, r1
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4403      	add	r3, r0
 80053dc:	3344      	adds	r3, #68	; 0x44
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80053e4:	fb03 f301 	mul.w	r3, r3, r1
 80053e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d110      	bne.n	8005410 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3318      	adds	r3, #24
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005402:	78f9      	ldrb	r1, [r7, #3]
 8005404:	2300      	movs	r3, #0
 8005406:	2200      	movs	r2, #0
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 ffbb 	bl	8007384 <USBD_LL_Transmit>
 800540e:	e015      	b.n	800543c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005458:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005464:	2303      	movs	r3, #3
 8005466:	e015      	b.n	8005494 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fff9 	bl	8007464 <USBD_LL_GetRxDataSize>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800548e:	4611      	mov	r1, r2
 8005490:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054aa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d015      	beq.n	80054e2 <USBD_CDC_EP0_RxReady+0x46>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054bc:	2bff      	cmp	r3, #255	; 0xff
 80054be:	d010      	beq.n	80054e2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80054ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80054d6:	b292      	uxth	r2, r2
 80054d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	22ff      	movs	r2, #255	; 0xff
 80054de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2243      	movs	r2, #67	; 0x43
 80054f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80054fa:	4b03      	ldr	r3, [pc, #12]	; (8005508 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20000094 	.word	0x20000094

0800550c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2243      	movs	r2, #67	; 0x43
 8005518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800551a:	4b03      	ldr	r3, [pc, #12]	; (8005528 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000050 	.word	0x20000050

0800552c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2243      	movs	r2, #67	; 0x43
 8005538:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800553a:	4b03      	ldr	r3, [pc, #12]	; (8005548 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	200000d8 	.word	0x200000d8

0800554c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	220a      	movs	r2, #10
 8005558:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800555a:	4b03      	ldr	r3, [pc, #12]	; (8005568 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	2000000c 	.word	0x2000000c

0800556c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800557c:	2303      	movs	r3, #3
 800557e:	e004      	b.n	800558a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800560e:	2303      	movs	r3, #3
 8005610:	e01a      	b.n	8005648 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005618:	2b00      	cmp	r3, #0
 800561a:	d114      	bne.n	8005646 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2201      	movs	r2, #1
 8005620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800563a:	2181      	movs	r1, #129	; 0x81
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f001 fea1 	bl	8007384 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800565e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	e016      	b.n	800569c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7c1b      	ldrb	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800567c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005680:	2101      	movs	r1, #1
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 feb6 	bl	80073f4 <USBD_LL_PrepareReceive>
 8005688:	e007      	b.n	800569a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	2101      	movs	r1, #1
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fead 	bl	80073f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e01f      	b.n	80056fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	79fa      	ldrb	r2, [r7, #7]
 80056ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f001 fc87 	bl	8007004 <USBD_LL_Init>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005718:	2303      	movs	r3, #3
 800571a:	e016      	b.n	800574a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f107 020e 	add.w	r2, r7, #14
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	4602      	mov	r2, r0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 fc9e 	bl	800709c <USBD_LL_Start>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800578c:	2303      	movs	r3, #3
 800578e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4611      	mov	r1, r2
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	4611      	mov	r1, r2
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
  }

  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 ff58 	bl	80066b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	2b01      	cmp	r3, #1
 8005822:	d00e      	beq.n	8005842 <USBD_LL_SetupStage+0x5a>
 8005824:	2b01      	cmp	r3, #1
 8005826:	d302      	bcc.n	800582e <USBD_LL_SetupStage+0x46>
 8005828:	2b02      	cmp	r3, #2
 800582a:	d014      	beq.n	8005856 <USBD_LL_SetupStage+0x6e>
 800582c:	e01d      	b.n	800586a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa18 	bl	8005c6c <USBD_StdDevReq>
 800583c:	4603      	mov	r3, r0
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e020      	b.n	8005884 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa7c 	bl	8005d48 <USBD_StdItfReq>
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]
      break;
 8005854:	e016      	b.n	8005884 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fab8 	bl	8005dd4 <USBD_StdEPReq>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
      break;
 8005868:	e00c      	b.n	8005884 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005870:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005874:	b2db      	uxtb	r3, r3
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fcb5 	bl	80071e8 <USBD_LL_StallEP>
 800587e:	4603      	mov	r3, r0
 8005880:	73fb      	strb	r3, [r7, #15]
      break;
 8005882:	bf00      	nop
  }

  return ret;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	460b      	mov	r3, r1
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800589c:	7afb      	ldrb	r3, [r7, #11]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d137      	bne.n	8005912 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d14a      	bne.n	800594a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d913      	bls.n	80058e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4293      	cmp	r3, r2
 80058d8:	bf28      	it	cs
 80058da:	4613      	movcs	r3, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 ffd9 	bl	8006898 <USBD_CtlContinueRx>
 80058e6:	e030      	b.n	800594a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d105      	bne.n	800590a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 ffd5 	bl	80068ba <USBD_CtlSendStatus>
 8005910:	e01b      	b.n	800594a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d013      	beq.n	8005946 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005924:	2b03      	cmp	r3, #3
 8005926:	d10e      	bne.n	8005946 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	7afa      	ldrb	r2, [r7, #11]
 8005932:	4611      	mov	r1, r2
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	e002      	b.n	800594c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	e000      	b.n	800594c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	460b      	mov	r3, r1
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d16a      	bne.n	8005a3e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3314      	adds	r3, #20
 800596c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005974:	2b02      	cmp	r3, #2
 8005976:	d155      	bne.n	8005a24 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	429a      	cmp	r2, r3
 8005982:	d914      	bls.n	80059ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	461a      	mov	r2, r3
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 ff4e 	bl	800683c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059a0:	2300      	movs	r3, #0
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f001 fd24 	bl	80073f4 <USBD_LL_PrepareReceive>
 80059ac:	e03a      	b.n	8005a24 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d11c      	bne.n	80059f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d316      	bcc.n	80059f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d20f      	bcs.n	80059f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059d4:	2200      	movs	r2, #0
 80059d6:	2100      	movs	r1, #0
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 ff2f 	bl	800683c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059e6:	2300      	movs	r3, #0
 80059e8:	2200      	movs	r2, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f001 fd01 	bl	80073f4 <USBD_LL_PrepareReceive>
 80059f2:	e017      	b.n	8005a24 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d105      	bne.n	8005a16 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f001 fbe5 	bl	80071e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 ff5e 	bl	80068e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d123      	bne.n	8005a76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fe9b 	bl	800576a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a3c:	e01b      	b.n	8005a76 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d013      	beq.n	8005a72 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d10e      	bne.n	8005a72 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	7afa      	ldrb	r2, [r7, #11]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	4798      	blx	r3
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	e002      	b.n	8005a78 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e000      	b.n	8005a78 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d009      	beq.n	8005ac4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6852      	ldr	r2, [r2, #4]
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	4611      	mov	r1, r2
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2100      	movs	r1, #0
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 fb18 	bl	8007100 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fb0a 	bl	8007100 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2240      	movs	r2, #64	; 0x40
 8005af6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d105      	bne.n	8005b6a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d10b      	bne.n	8005ba2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6852      	ldr	r2, [r2, #4]
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	4611      	mov	r1, r2
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
  }

  return USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3301      	adds	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c4c:	8a3b      	ldrh	r3, [r7, #16]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	b21a      	sxth	r2, r3
 8005c52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	b21b      	sxth	r3, r3
 8005c5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c5c:	89fb      	ldrh	r3, [r7, #14]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d004      	beq.n	8005c90 <USBD_StdDevReq+0x24>
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d002      	beq.n	8005c90 <USBD_StdDevReq+0x24>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <USBD_StdDevReq+0x38>
 8005c8e:	e050      	b.n	8005d32 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8005ca2:	e04b      	b.n	8005d3c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	d83c      	bhi.n	8005d26 <USBD_StdDevReq+0xba>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_StdDevReq+0x48>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005d27 	.word	0x08005d27
 8005cc0:	08005d13 	.word	0x08005d13
 8005cc4:	08005d27 	.word	0x08005d27
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005d27 	.word	0x08005d27
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005cf1 	.word	0x08005cf1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9d0 	bl	8006084 <USBD_GetDescriptor>
      break;
 8005ce4:	e024      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb5f 	bl	80063ac <USBD_SetAddress>
      break;
 8005cee:	e01f      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb9c 	bl	8006430 <USBD_SetConfig>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e018      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fc39 	bl	8006578 <USBD_GetConfig>
      break;
 8005d06:	e013      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fc68 	bl	80065e0 <USBD_GetStatus>
      break;
 8005d10:	e00e      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fc96 	bl	8006646 <USBD_SetFeature>
      break;
 8005d1a:	e009      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fca5 	bl	800666e <USBD_ClrFeature>
      break;
 8005d24:	e004      	b.n	8005d30 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fcfb 	bl	8006724 <USBD_CtlError>
      break;
 8005d2e:	bf00      	nop
    }
    break;
 8005d30:	e004      	b.n	8005d3c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fcf5 	bl	8006724 <USBD_CtlError>
    break;
 8005d3a:	bf00      	nop
  }

  return ret;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop

08005d48 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d003      	beq.n	8005d6a <USBD_StdItfReq+0x22>
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	d001      	beq.n	8005d6a <USBD_StdItfReq+0x22>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d12a      	bne.n	8005dc0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	3b01      	subs	r3, #1
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d81d      	bhi.n	8005db2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	889b      	ldrh	r3, [r3, #4]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d813      	bhi.n	8005da8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	88db      	ldrh	r3, [r3, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d110      	bne.n	8005dbc <USBD_StdItfReq+0x74>
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10d      	bne.n	8005dbc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fd8a 	bl	80068ba <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005da6:	e009      	b.n	8005dbc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fcba 	bl	8006724 <USBD_CtlError>
      break;
 8005db0:	e004      	b.n	8005dbc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fcb5 	bl	8006724 <USBD_CtlError>
      break;
 8005dba:	e000      	b.n	8005dbe <USBD_StdItfReq+0x76>
      break;
 8005dbc:	bf00      	nop
    }
    break;
 8005dbe:	e004      	b.n	8005dca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fcae 	bl	8006724 <USBD_CtlError>
    break;
 8005dc8:	bf00      	nop
  }

  return ret;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	889b      	ldrh	r3, [r3, #4]
 8005de6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d004      	beq.n	8005dfe <USBD_StdEPReq+0x2a>
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d002      	beq.n	8005dfe <USBD_StdEPReq+0x2a>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <USBD_StdEPReq+0x3e>
 8005dfc:	e137      	b.n	800606e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e10:	e132      	b.n	8006078 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d03e      	beq.n	8005e98 <USBD_StdEPReq+0xc4>
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d002      	beq.n	8005e24 <USBD_StdEPReq+0x50>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d079      	beq.n	8005f16 <USBD_StdEPReq+0x142>
 8005e22:	e11e      	b.n	8006062 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d002      	beq.n	8005e34 <USBD_StdEPReq+0x60>
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d015      	beq.n	8005e5e <USBD_StdEPReq+0x8a>
 8005e32:	e02b      	b.n	8005e8c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <USBD_StdEPReq+0x80>
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d009      	beq.n	8005e54 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f001 f9cf 	bl	80071e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 f9cb 	bl	80071e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005e52:	e020      	b.n	8005e96 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fc64 	bl	8006724 <USBD_CtlError>
        break;
 8005e5c:	e01b      	b.n	8005e96 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	885b      	ldrh	r3, [r3, #2]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_StdEPReq+0xb0>
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d008      	beq.n	8005e84 <USBD_StdEPReq+0xb0>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	88db      	ldrh	r3, [r3, #6]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 f9b2 	bl	80071e8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fd18 	bl	80068ba <USBD_CtlSendStatus>

        break;
 8005e8a:	e004      	b.n	8005e96 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fc48 	bl	8006724 <USBD_CtlError>
        break;
 8005e94:	bf00      	nop
      }
      break;
 8005e96:	e0e9      	b.n	800606c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d002      	beq.n	8005ea8 <USBD_StdEPReq+0xd4>
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d015      	beq.n	8005ed2 <USBD_StdEPReq+0xfe>
 8005ea6:	e02f      	b.n	8005f08 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <USBD_StdEPReq+0xf4>
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b80      	cmp	r3, #128	; 0x80
 8005eb2:	d009      	beq.n	8005ec8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 f995 	bl	80071e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 f991 	bl	80071e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005ec6:	e025      	b.n	8005f14 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fc2a 	bl	8006724 <USBD_CtlError>
        break;
 8005ed0:	e020      	b.n	8005f14 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d11b      	bne.n	8005f12 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 f9b3 	bl	8007254 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fce3 	bl	80068ba <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f06:	e004      	b.n	8005f12 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fc0a 	bl	8006724 <USBD_CtlError>
        break;
 8005f10:	e000      	b.n	8005f14 <USBD_StdEPReq+0x140>
        break;
 8005f12:	bf00      	nop
      }
      break;
 8005f14:	e0aa      	b.n	800606c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d002      	beq.n	8005f26 <USBD_StdEPReq+0x152>
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d032      	beq.n	8005f8a <USBD_StdEPReq+0x1b6>
 8005f24:	e097      	b.n	8006056 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <USBD_StdEPReq+0x168>
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d004      	beq.n	8005f3c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fbf5 	bl	8006724 <USBD_CtlError>
          break;
 8005f3a:	e091      	b.n	8006060 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	da0b      	bge.n	8005f5c <USBD_StdEPReq+0x188>
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	3310      	adds	r3, #16
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	3304      	adds	r3, #4
 8005f5a:	e00b      	b.n	8005f74 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	3304      	adds	r3, #4
 8005f74:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fc3f 	bl	8006806 <USBD_CtlSendData>
        break;
 8005f88:	e06a      	b.n	8006060 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005f8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da11      	bge.n	8005fb6 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d117      	bne.n	8005fdc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fbb8 	bl	8006724 <USBD_CtlError>
            break;
 8005fb4:	e054      	b.n	8006060 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	f003 020f 	and.w	r2, r3, #15
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fba5 	bl	8006724 <USBD_CtlError>
            break;
 8005fda:	e041      	b.n	8006060 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da0b      	bge.n	8005ffc <USBD_StdEPReq+0x228>
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	3310      	adds	r3, #16
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	e00b      	b.n	8006014 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	3304      	adds	r3, #4
 8006014:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <USBD_StdEPReq+0x24e>
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	d103      	bne.n	800602a <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e00e      	b.n	8006048 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f946 	bl	80072c0 <USBD_LL_IsStallEP>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e002      	b.n	8006048 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2202      	movs	r2, #2
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fbd9 	bl	8006806 <USBD_CtlSendData>
          break;
 8006054:	e004      	b.n	8006060 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb63 	bl	8006724 <USBD_CtlError>
        break;
 800605e:	bf00      	nop
      }
      break;
 8006060:	e004      	b.n	800606c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fb5d 	bl	8006724 <USBD_CtlError>
      break;
 800606a:	bf00      	nop
    }
    break;
 800606c:	e004      	b.n	8006078 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fb57 	bl	8006724 <USBD_CtlError>
    break;
 8006076:	bf00      	nop
  }

  return ret;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2b0e      	cmp	r3, #14
 80060a6:	f200 8152 	bhi.w	800634e <USBD_GetDescriptor+0x2ca>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <USBD_GetDescriptor+0x2c>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	08006121 	.word	0x08006121
 80060b4:	08006139 	.word	0x08006139
 80060b8:	08006179 	.word	0x08006179
 80060bc:	0800634f 	.word	0x0800634f
 80060c0:	0800634f 	.word	0x0800634f
 80060c4:	080062ef 	.word	0x080062ef
 80060c8:	0800631b 	.word	0x0800631b
 80060cc:	0800634f 	.word	0x0800634f
 80060d0:	0800634f 	.word	0x0800634f
 80060d4:	0800634f 	.word	0x0800634f
 80060d8:	0800634f 	.word	0x0800634f
 80060dc:	0800634f 	.word	0x0800634f
 80060e0:	0800634f 	.word	0x0800634f
 80060e4:	0800634f 	.word	0x0800634f
 80060e8:	080060ed 	.word	0x080060ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	7c12      	ldrb	r2, [r2, #16]
 8006104:	f107 0108 	add.w	r1, r7, #8
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
 800610c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800610e:	e126      	b.n	800635e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fb06 	bl	8006724 <USBD_CtlError>
      err++;
 8006118:	7afb      	ldrb	r3, [r7, #11]
 800611a:	3301      	adds	r3, #1
 800611c:	72fb      	strb	r3, [r7, #11]
    break;
 800611e:	e11e      	b.n	800635e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	7c12      	ldrb	r2, [r2, #16]
 800612c:	f107 0108 	add.w	r1, r7, #8
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
 8006134:	60f8      	str	r0, [r7, #12]
    break;
 8006136:	e112      	b.n	800635e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	7c1b      	ldrb	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10d      	bne.n	800615c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	f107 0208 	add.w	r2, r7, #8
 800614c:	4610      	mov	r0, r2
 800614e:	4798      	blx	r3
 8006150:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	2202      	movs	r2, #2
 8006158:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800615a:	e100      	b.n	800635e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	f107 0208 	add.w	r2, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	2202      	movs	r2, #2
 8006174:	701a      	strb	r2, [r3, #0]
    break;
 8006176:	e0f2      	b.n	800635e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	885b      	ldrh	r3, [r3, #2]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b05      	cmp	r3, #5
 8006180:	f200 80ac 	bhi.w	80062dc <USBD_GetDescriptor+0x258>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <USBD_GetDescriptor+0x108>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	080061a5 	.word	0x080061a5
 8006190:	080061d9 	.word	0x080061d9
 8006194:	0800620d 	.word	0x0800620d
 8006198:	08006241 	.word	0x08006241
 800619c:	08006275 	.word	0x08006275
 80061a0:	080062a9 	.word	0x080062a9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	7c12      	ldrb	r2, [r2, #16]
 80061bc:	f107 0108 	add.w	r1, r7, #8
 80061c0:	4610      	mov	r0, r2
 80061c2:	4798      	blx	r3
 80061c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061c6:	e091      	b.n	80062ec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 faaa 	bl	8006724 <USBD_CtlError>
        err++;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	3301      	adds	r3, #1
 80061d4:	72fb      	strb	r3, [r7, #11]
      break;
 80061d6:	e089      	b.n	80062ec <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	7c12      	ldrb	r2, [r2, #16]
 80061f0:	f107 0108 	add.w	r1, r7, #8
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
 80061f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061fa:	e077      	b.n	80062ec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa90 	bl	8006724 <USBD_CtlError>
        err++;
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	3301      	adds	r3, #1
 8006208:	72fb      	strb	r3, [r7, #11]
      break;
 800620a:	e06f      	b.n	80062ec <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	7c12      	ldrb	r2, [r2, #16]
 8006224:	f107 0108 	add.w	r1, r7, #8
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800622e:	e05d      	b.n	80062ec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa76 	bl	8006724 <USBD_CtlError>
        err++;
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	3301      	adds	r3, #1
 800623c:	72fb      	strb	r3, [r7, #11]
      break;
 800623e:	e055      	b.n	80062ec <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	7c12      	ldrb	r2, [r2, #16]
 8006258:	f107 0108 	add.w	r1, r7, #8
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006262:	e043      	b.n	80062ec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa5c 	bl	8006724 <USBD_CtlError>
        err++;
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	3301      	adds	r3, #1
 8006270:	72fb      	strb	r3, [r7, #11]
      break;
 8006272:	e03b      	b.n	80062ec <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	7c12      	ldrb	r2, [r2, #16]
 800628c:	f107 0108 	add.w	r1, r7, #8
 8006290:	4610      	mov	r0, r2
 8006292:	4798      	blx	r3
 8006294:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006296:	e029      	b.n	80062ec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa42 	bl	8006724 <USBD_CtlError>
        err++;
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	3301      	adds	r3, #1
 80062a4:	72fb      	strb	r3, [r7, #11]
      break;
 80062a6:	e021      	b.n	80062ec <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	7c12      	ldrb	r2, [r2, #16]
 80062c0:	f107 0108 	add.w	r1, r7, #8
 80062c4:	4610      	mov	r0, r2
 80062c6:	4798      	blx	r3
 80062c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062ca:	e00f      	b.n	80062ec <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa28 	bl	8006724 <USBD_CtlError>
        err++;
 80062d4:	7afb      	ldrb	r3, [r7, #11]
 80062d6:	3301      	adds	r3, #1
 80062d8:	72fb      	strb	r3, [r7, #11]
      break;
 80062da:	e007      	b.n	80062ec <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa20 	bl	8006724 <USBD_CtlError>
      err++;
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	3301      	adds	r3, #1
 80062e8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80062ea:	bf00      	nop
    }
    break;
 80062ec:	e037      	b.n	800635e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	7c1b      	ldrb	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	f107 0208 	add.w	r2, r7, #8
 8006302:	4610      	mov	r0, r2
 8006304:	4798      	blx	r3
 8006306:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006308:	e029      	b.n	800635e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fa09 	bl	8006724 <USBD_CtlError>
      err++;
 8006312:	7afb      	ldrb	r3, [r7, #11]
 8006314:	3301      	adds	r3, #1
 8006316:	72fb      	strb	r3, [r7, #11]
    break;
 8006318:	e021      	b.n	800635e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7c1b      	ldrb	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10d      	bne.n	800633e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	f107 0208 	add.w	r2, r7, #8
 800632e:	4610      	mov	r0, r2
 8006330:	4798      	blx	r3
 8006332:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	2207      	movs	r2, #7
 800633a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800633c:	e00f      	b.n	800635e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f9ef 	bl	8006724 <USBD_CtlError>
      err++;
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	3301      	adds	r3, #1
 800634a:	72fb      	strb	r3, [r7, #11]
    break;
 800634c:	e007      	b.n	800635e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9e7 	bl	8006724 <USBD_CtlError>
    err++;
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	3301      	adds	r3, #1
 800635a:	72fb      	strb	r3, [r7, #11]
    break;
 800635c:	bf00      	nop
  }

  if (err != 0U)
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11e      	bne.n	80063a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	88db      	ldrh	r3, [r3, #6]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d016      	beq.n	800639a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800636c:	893b      	ldrh	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00e      	beq.n	8006390 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88da      	ldrh	r2, [r3, #6]
 8006376:	893b      	ldrh	r3, [r7, #8]
 8006378:	4293      	cmp	r3, r2
 800637a:	bf28      	it	cs
 800637c:	4613      	movcs	r3, r2
 800637e:	b29b      	uxth	r3, r3
 8006380:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	461a      	mov	r2, r3
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fa3c 	bl	8006806 <USBD_CtlSendData>
 800638e:	e009      	b.n	80063a4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9c6 	bl	8006724 <USBD_CtlError>
 8006398:	e004      	b.n	80063a4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa8d 	bl	80068ba <USBD_CtlSendStatus>
 80063a0:	e000      	b.n	80063a4 <USBD_GetDescriptor+0x320>
    return;
 80063a2:	bf00      	nop
    }
  }
}
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop

080063ac <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	889b      	ldrh	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d130      	bne.n	8006420 <USBD_SetAddress+0x74>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	88db      	ldrh	r3, [r3, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d12c      	bne.n	8006420 <USBD_SetAddress+0x74>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	885b      	ldrh	r3, [r3, #2]
 80063ca:	2b7f      	cmp	r3, #127	; 0x7f
 80063cc:	d828      	bhi.n	8006420 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d104      	bne.n	80063ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f99c 	bl	8006724 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ec:	e01c      	b.n	8006428 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 ff8c 	bl	8007318 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fa5a 	bl	80068ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006414:	e008      	b.n	8006428 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641e:	e003      	b.n	8006428 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f97e 	bl	8006724 <USBD_CtlError>
  }
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	885b      	ldrh	r3, [r3, #2]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	4b4b      	ldr	r3, [pc, #300]	; (8006574 <USBD_SetConfig+0x144>)
 8006446:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006448:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <USBD_SetConfig+0x144>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d905      	bls.n	800645c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f966 	bl	8006724 <USBD_CtlError>
    return USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	e087      	b.n	800656c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006462:	2b02      	cmp	r3, #2
 8006464:	d002      	beq.n	800646c <USBD_SetConfig+0x3c>
 8006466:	2b03      	cmp	r3, #3
 8006468:	d025      	beq.n	80064b6 <USBD_SetConfig+0x86>
 800646a:	e071      	b.n	8006550 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800646c:	4b41      	ldr	r3, [pc, #260]	; (8006574 <USBD_SetConfig+0x144>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01c      	beq.n	80064ae <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006474:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <USBD_SetConfig+0x144>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800647e:	4b3d      	ldr	r3, [pc, #244]	; (8006574 <USBD_SetConfig+0x144>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff f97b 	bl	8005780 <USBD_SetClassConfig>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f944 	bl	8006724 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800649c:	e065      	b.n	800656a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa0b 	bl	80068ba <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2203      	movs	r2, #3
 80064a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80064ac:	e05d      	b.n	800656a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa03 	bl	80068ba <USBD_CtlSendStatus>
    break;
 80064b4:	e059      	b.n	800656a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <USBD_SetConfig+0x144>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d112      	bne.n	80064e4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2202      	movs	r2, #2
 80064c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80064c6:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <USBD_SetConfig+0x144>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <USBD_SetConfig+0x144>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff f96e 	bl	80057b8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9ec 	bl	80068ba <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80064e2:	e042      	b.n	800656a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <USBD_SetConfig+0x144>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d02a      	beq.n	8006548 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff f95c 	bl	80057b8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006500:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <USBD_SetConfig+0x144>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800650a:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <USBD_SetConfig+0x144>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff f935 	bl	8005780 <USBD_SetClassConfig>
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00f      	beq.n	8006540 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8fe 	bl	8006724 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff f941 	bl	80057b8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800653e:	e014      	b.n	800656a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9ba 	bl	80068ba <USBD_CtlSendStatus>
    break;
 8006546:	e010      	b.n	800656a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9b6 	bl	80068ba <USBD_CtlSendStatus>
    break;
 800654e:	e00c      	b.n	800656a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8e6 	bl	8006724 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <USBD_SetConfig+0x144>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff f92a 	bl	80057b8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006564:	2303      	movs	r3, #3
 8006566:	73fb      	strb	r3, [r7, #15]
    break;
 8006568:	bf00      	nop
  }

  return ret;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20000260 	.word	0x20000260

08006578 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d004      	beq.n	8006594 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8c9 	bl	8006724 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006592:	e021      	b.n	80065d8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659a:	2b01      	cmp	r3, #1
 800659c:	db17      	blt.n	80065ce <USBD_GetConfig+0x56>
 800659e:	2b02      	cmp	r3, #2
 80065a0:	dd02      	ble.n	80065a8 <USBD_GetConfig+0x30>
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d00b      	beq.n	80065be <USBD_GetConfig+0x46>
 80065a6:	e012      	b.n	80065ce <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3308      	adds	r3, #8
 80065b2:	2201      	movs	r2, #1
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f925 	bl	8006806 <USBD_CtlSendData>
      break;
 80065bc:	e00c      	b.n	80065d8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3304      	adds	r3, #4
 80065c2:	2201      	movs	r2, #1
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f91d 	bl	8006806 <USBD_CtlSendData>
      break;
 80065cc:	e004      	b.n	80065d8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8a7 	bl	8006724 <USBD_CtlError>
      break;
 80065d6:	bf00      	nop
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	3b01      	subs	r3, #1
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d81e      	bhi.n	8006634 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	88db      	ldrh	r3, [r3, #6]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d004      	beq.n	8006608 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f88f 	bl	8006724 <USBD_CtlError>
      break;
 8006606:	e01a      	b.n	800663e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f043 0202 	orr.w	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	330c      	adds	r3, #12
 8006628:	2202      	movs	r2, #2
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8ea 	bl	8006806 <USBD_CtlSendData>
    break;
 8006632:	e004      	b.n	800663e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f874 	bl	8006724 <USBD_CtlError>
    break;
 800663c:	bf00      	nop
  }
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	885b      	ldrh	r3, [r3, #2]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d106      	bne.n	8006666 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f92a 	bl	80068ba <USBD_CtlSendStatus>
  }
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	3b01      	subs	r3, #1
 8006680:	2b02      	cmp	r3, #2
 8006682:	d80b      	bhi.n	800669c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	885b      	ldrh	r3, [r3, #2]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10c      	bne.n	80066a6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f910 	bl	80068ba <USBD_CtlSendStatus>
      }
      break;
 800669a:	e004      	b.n	80066a6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f840 	bl	8006724 <USBD_CtlError>
      break;
 80066a4:	e000      	b.n	80066a8 <USBD_ClrFeature+0x3a>
      break;
 80066a6:	bf00      	nop
  }
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3301      	adds	r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff faa7 	bl	8005c2e <SWAPBYTE>
 80066e0:	4603      	mov	r3, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3301      	adds	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff fa9a 	bl	8005c2e <SWAPBYTE>
 80066fa:	4603      	mov	r3, r0
 80066fc:	461a      	mov	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff fa8d 	bl	8005c2e <SWAPBYTE>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	80da      	strh	r2, [r3, #6]
}
 800671c:	bf00      	nop
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fd59 	bl	80071e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006736:	2100      	movs	r1, #0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fd55 	bl	80071e8 <USBD_LL_StallEP>
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d036      	beq.n	80067ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f000 f836 	bl	80067d2 <USBD_GetLen>
 8006766:	4603      	mov	r3, r0
 8006768:	3301      	adds	r3, #1
 800676a:	b29b      	uxth	r3, r3
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	3301      	adds	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	4413      	add	r3, r2
 800678c:	2203      	movs	r2, #3
 800678e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	3301      	adds	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006796:	e013      	b.n	80067c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	3301      	adds	r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
    idx++;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	3301      	adds	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4413      	add	r3, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	3301      	adds	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e7      	bne.n	8006798 <USBD_GetString+0x52>
 80067c8:	e000      	b.n	80067cc <USBD_GetString+0x86>
    return;
 80067ca:	bf00      	nop
  }
}
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067e2:	e005      	b.n	80067f0 <USBD_GetLen+0x1e>
  {
    len++;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	3301      	adds	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f5      	bne.n	80067e4 <USBD_GetLen+0x12>
  }

  return len;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2202      	movs	r2, #2
 8006816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	2100      	movs	r1, #0
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fda9 	bl	8007384 <USBD_LL_Transmit>

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	2100      	movs	r1, #0
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fd98 	bl	8007384 <USBD_LL_Transmit>

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2203      	movs	r2, #3
 800686e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	2100      	movs	r1, #0
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fdb3 	bl	80073f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	2100      	movs	r1, #0
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fda2 	bl	80073f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068ca:	2300      	movs	r3, #0
 80068cc:	2200      	movs	r2, #0
 80068ce:	2100      	movs	r1, #0
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fd57 	bl	8007384 <USBD_LL_Transmit>

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2205      	movs	r2, #5
 80068ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068f0:	2300      	movs	r3, #0
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fd7c 	bl	80073f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800690c:	2200      	movs	r2, #0
 800690e:	4912      	ldr	r1, [pc, #72]	; (8006958 <MX_USB_DEVICE_Init+0x50>)
 8006910:	4812      	ldr	r0, [pc, #72]	; (800695c <MX_USB_DEVICE_Init+0x54>)
 8006912:	f7fe fec7 	bl	80056a4 <USBD_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800691c:	f7f9 fe02 	bl	8000524 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006920:	490f      	ldr	r1, [pc, #60]	; (8006960 <MX_USB_DEVICE_Init+0x58>)
 8006922:	480e      	ldr	r0, [pc, #56]	; (800695c <MX_USB_DEVICE_Init+0x54>)
 8006924:	f7fe feee 	bl	8005704 <USBD_RegisterClass>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800692e:	f7f9 fdf9 	bl	8000524 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006932:	490c      	ldr	r1, [pc, #48]	; (8006964 <MX_USB_DEVICE_Init+0x5c>)
 8006934:	4809      	ldr	r0, [pc, #36]	; (800695c <MX_USB_DEVICE_Init+0x54>)
 8006936:	f7fe fe19 	bl	800556c <USBD_CDC_RegisterInterface>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006940:	f7f9 fdf0 	bl	8000524 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006944:	4805      	ldr	r0, [pc, #20]	; (800695c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7fe ff04 	bl	8005752 <USBD_Start>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006950:	f7f9 fde8 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000130 	.word	0x20000130
 800695c:	20000270 	.word	0x20000270
 8006960:	20000018 	.word	0x20000018
 8006964:	2000011c 	.word	0x2000011c

08006968 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800696c:	2200      	movs	r2, #0
 800696e:	4905      	ldr	r1, [pc, #20]	; (8006984 <CDC_Init_FS+0x1c>)
 8006970:	4805      	ldr	r0, [pc, #20]	; (8006988 <CDC_Init_FS+0x20>)
 8006972:	f7fe fe10 	bl	8005596 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006976:	4905      	ldr	r1, [pc, #20]	; (800698c <CDC_Init_FS+0x24>)
 8006978:	4803      	ldr	r0, [pc, #12]	; (8006988 <CDC_Init_FS+0x20>)
 800697a:	f7fe fe25 	bl	80055c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800697e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000d40 	.word	0x20000d40
 8006988:	20000270 	.word	0x20000270
 800698c:	20000540 	.word	0x20000540

08006990 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006994:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006996:	4618      	mov	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	71fb      	strb	r3, [r7, #7]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b23      	cmp	r3, #35	; 0x23
 80069b4:	d84a      	bhi.n	8006a4c <CDC_Control_FS+0xac>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <CDC_Control_FS+0x1c>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	08006a4d 	.word	0x08006a4d
 80069c0:	08006a4d 	.word	0x08006a4d
 80069c4:	08006a4d 	.word	0x08006a4d
 80069c8:	08006a4d 	.word	0x08006a4d
 80069cc:	08006a4d 	.word	0x08006a4d
 80069d0:	08006a4d 	.word	0x08006a4d
 80069d4:	08006a4d 	.word	0x08006a4d
 80069d8:	08006a4d 	.word	0x08006a4d
 80069dc:	08006a4d 	.word	0x08006a4d
 80069e0:	08006a4d 	.word	0x08006a4d
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006a4d 	.word	0x08006a4d
 80069f0:	08006a4d 	.word	0x08006a4d
 80069f4:	08006a4d 	.word	0x08006a4d
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	08006a4d 	.word	0x08006a4d
 8006a00:	08006a4d 	.word	0x08006a4d
 8006a04:	08006a4d 	.word	0x08006a4d
 8006a08:	08006a4d 	.word	0x08006a4d
 8006a0c:	08006a4d 	.word	0x08006a4d
 8006a10:	08006a4d 	.word	0x08006a4d
 8006a14:	08006a4d 	.word	0x08006a4d
 8006a18:	08006a4d 	.word	0x08006a4d
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	08006a4d 	.word	0x08006a4d
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a4d 	.word	0x08006a4d
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a4d 	.word	0x08006a4d
 8006a44:	08006a4d 	.word	0x08006a4d
 8006a48:	08006a4d 	.word	0x08006a4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006a4c:	bf00      	nop
  }

  return (USBD_OK);
 8006a4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4805      	ldr	r0, [pc, #20]	; (8006a80 <CDC_Receive_FS+0x24>)
 8006a6a:	f7fe fdad 	bl	80055c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a6e:	4804      	ldr	r0, [pc, #16]	; (8006a80 <CDC_Receive_FS+0x24>)
 8006a70:	f7fe fdee 	bl	8005650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006a74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000270 	.word	0x20000270

08006a84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <CDC_Transmit_FS+0x48>)
 8006a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e00b      	b.n	8006ac2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4806      	ldr	r0, [pc, #24]	; (8006acc <CDC_Transmit_FS+0x48>)
 8006ab2:	f7fe fd70 	bl	8005596 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ab6:	4805      	ldr	r0, [pc, #20]	; (8006acc <CDC_Transmit_FS+0x48>)
 8006ab8:	f7fe fd9a 	bl	80055f0 <USBD_CDC_TransmitPacket>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000270 	.word	0x20000270

08006ad0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2212      	movs	r2, #18
 8006b04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20000150 	.word	0x20000150

08006b18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	6039      	str	r1, [r7, #0]
 8006b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2204      	movs	r2, #4
 8006b28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b2a:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	20000170 	.word	0x20000170

08006b3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	6039      	str	r1, [r7, #0]
 8006b46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d105      	bne.n	8006b5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	4907      	ldr	r1, [pc, #28]	; (8006b70 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b52:	4808      	ldr	r0, [pc, #32]	; (8006b74 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b54:	f7ff fdf7 	bl	8006746 <USBD_GetString>
 8006b58:	e004      	b.n	8006b64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	4904      	ldr	r1, [pc, #16]	; (8006b70 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b5e:	4805      	ldr	r0, [pc, #20]	; (8006b74 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b60:	f7ff fdf1 	bl	8006746 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20001540 	.word	0x20001540
 8006b74:	08007760 	.word	0x08007760

08006b78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	4904      	ldr	r1, [pc, #16]	; (8006b98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b88:	4804      	ldr	r0, [pc, #16]	; (8006b9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b8a:	f7ff fddc 	bl	8006746 <USBD_GetString>
  return USBD_StrDesc;
 8006b8e:	4b02      	ldr	r3, [pc, #8]	; (8006b98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20001540 	.word	0x20001540
 8006b9c:	08007778 	.word	0x08007778

08006ba0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	221a      	movs	r2, #26
 8006bb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006bb2:	f000 f855 	bl	8006c60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006bb6:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000174 	.word	0x20000174

08006bc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4907      	ldr	r1, [pc, #28]	; (8006bf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bda:	4808      	ldr	r0, [pc, #32]	; (8006bfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bdc:	f7ff fdb3 	bl	8006746 <USBD_GetString>
 8006be0:	e004      	b.n	8006bec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	4904      	ldr	r1, [pc, #16]	; (8006bf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006be6:	4805      	ldr	r0, [pc, #20]	; (8006bfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006be8:	f7ff fdad 	bl	8006746 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20001540 	.word	0x20001540
 8006bfc:	0800778c 	.word	0x0800778c

08006c00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d105      	bne.n	8006c1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4907      	ldr	r1, [pc, #28]	; (8006c34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c16:	4808      	ldr	r0, [pc, #32]	; (8006c38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c18:	f7ff fd95 	bl	8006746 <USBD_GetString>
 8006c1c:	e004      	b.n	8006c28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4904      	ldr	r1, [pc, #16]	; (8006c34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c22:	4805      	ldr	r0, [pc, #20]	; (8006c38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c24:	f7ff fd8f 	bl	8006746 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20001540 	.word	0x20001540
 8006c38:	08007798 	.word	0x08007798

08006c3c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	220c      	movs	r2, #12
 8006c4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006c4e:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000164 	.word	0x20000164

08006c60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c66:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <Get_SerialNum+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <Get_SerialNum+0x48>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <Get_SerialNum+0x4c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c86:	2208      	movs	r2, #8
 8006c88:	4909      	ldr	r1, [pc, #36]	; (8006cb0 <Get_SerialNum+0x50>)
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f814 	bl	8006cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c90:	2204      	movs	r2, #4
 8006c92:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <Get_SerialNum+0x54>)
 8006c94:	68b8      	ldr	r0, [r7, #8]
 8006c96:	f000 f80f 	bl	8006cb8 <IntToUnicode>
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	1fff7590 	.word	0x1fff7590
 8006ca8:	1fff7594 	.word	0x1fff7594
 8006cac:	1fff7598 	.word	0x1fff7598
 8006cb0:	20000176 	.word	0x20000176
 8006cb4:	20000186 	.word	0x20000186

08006cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
 8006cce:	e027      	b.n	8006d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	0f1b      	lsrs	r3, r3, #28
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	d80b      	bhi.n	8006cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	0f1b      	lsrs	r3, r3, #28
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3230      	adds	r2, #48	; 0x30
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e00a      	b.n	8006d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	0f1b      	lsrs	r3, r3, #28
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	440b      	add	r3, r1
 8006d00:	3237      	adds	r2, #55	; 0x37
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	3301      	adds	r3, #1
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	4413      	add	r3, r2
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
 8006d20:	7dfa      	ldrb	r2, [r7, #23]
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3d3      	bcc.n	8006cd0 <IntToUnicode+0x18>
  }
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d3c:	f107 0314 	add.w	r3, r7, #20
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d54:	d14e      	bne.n	8006df4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5a:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d62:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d74:	2302      	movs	r3, #2
 8006d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d80:	230a      	movs	r3, #10
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d8e:	f7f9 fe81 	bl	8000a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d92:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d9e:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006daa:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d114      	bne.n	8006de0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006db6:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	4a10      	ldr	r2, [pc, #64]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006dce:	f7fb f90f 	bl	8001ff0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd6:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <HAL_PCD_MspInit+0xc8>)
 8006dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8006dde:	e001      	b.n	8006de4 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006de0:	f7fb f906 	bl	8001ff0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006de4:	2200      	movs	r2, #0
 8006de6:	2100      	movs	r1, #0
 8006de8:	2043      	movs	r0, #67	; 0x43
 8006dea:	f7f9 fe1c 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006dee:	2043      	movs	r0, #67	; 0x43
 8006df0:	f7f9 fe35 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006df4:	bf00      	nop
 8006df6:	3728      	adds	r7, #40	; 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40021000 	.word	0x40021000

08006e00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f7fe fce6 	bl	80057e8 <USBD_LL_SetupStage>
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f7fe fd1e 	bl	800588e <USBD_LL_DataOutStage>
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3348      	adds	r3, #72	; 0x48
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	4619      	mov	r1, r3
 8006e82:	f7fe fd67 	bl	8005954 <USBD_LL_DataInStage>
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fe6b 	bl	8005b78 <USBD_LL_SOF>
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d001      	beq.n	8006ec2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ebe:	f7f9 fb31 	bl	8000524 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ec8:	7bfa      	ldrb	r2, [r7, #15]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fe18 	bl	8005b02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fdd1 	bl	8005a80 <USBD_LL_Reset>
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fe07 	bl	8005b22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <HAL_PCD_SuspendCallback+0x48>)
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	4a03      	ldr	r2, [pc, #12]	; (8006f30 <HAL_PCD_SuspendCallback+0x48>)
 8006f22:	f043 0306 	orr.w	r3, r3, #6
 8006f26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	e000ed00 	.word	0xe000ed00

08006f34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f4e:	f023 0301 	bic.w	r3, r3, #1
 8006f52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f5c:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <HAL_PCD_ResumeCallback+0x4c>)
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <HAL_PCD_ResumeCallback+0x4c>)
 8006f62:	f023 0306 	bic.w	r3, r3, #6
 8006f66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006f68:	f000 fade 	bl	8007528 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fdea 	bl	8005b4c <USBD_LL_Resume>
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f96:	78fa      	ldrb	r2, [r7, #3]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fe13 	bl	8005bc6 <USBD_LL_IsoOUTIncomplete>
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fba:	78fa      	ldrb	r2, [r7, #3]
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fdf4 	bl	8005bac <USBD_LL_IsoINIncomplete>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fe00 	bl	8005be0 <USBD_LL_DevConnected>
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fdfd 	bl	8005bf6 <USBD_LL_DevDisconnected>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d13c      	bne.n	800708e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007014:	4a20      	ldr	r2, [pc, #128]	; (8007098 <USBD_LL_Init+0x94>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a1e      	ldr	r2, [pc, #120]	; (8007098 <USBD_LL_Init+0x94>)
 8007020:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007024:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <USBD_LL_Init+0x94>)
 8007026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800702a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800702c:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <USBD_LL_Init+0x94>)
 800702e:	2206      	movs	r2, #6
 8007030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007032:	4b19      	ldr	r3, [pc, #100]	; (8007098 <USBD_LL_Init+0x94>)
 8007034:	2202      	movs	r2, #2
 8007036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007038:	4b17      	ldr	r3, [pc, #92]	; (8007098 <USBD_LL_Init+0x94>)
 800703a:	2202      	movs	r2, #2
 800703c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800703e:	4b16      	ldr	r3, [pc, #88]	; (8007098 <USBD_LL_Init+0x94>)
 8007040:	2200      	movs	r2, #0
 8007042:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007044:	4b14      	ldr	r3, [pc, #80]	; (8007098 <USBD_LL_Init+0x94>)
 8007046:	2200      	movs	r2, #0
 8007048:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <USBD_LL_Init+0x94>)
 800704c:	2200      	movs	r2, #0
 800704e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007050:	4b11      	ldr	r3, [pc, #68]	; (8007098 <USBD_LL_Init+0x94>)
 8007052:	2200      	movs	r2, #0
 8007054:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007056:	4b10      	ldr	r3, [pc, #64]	; (8007098 <USBD_LL_Init+0x94>)
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800705c:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <USBD_LL_Init+0x94>)
 800705e:	2200      	movs	r2, #0
 8007060:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007062:	480d      	ldr	r0, [pc, #52]	; (8007098 <USBD_LL_Init+0x94>)
 8007064:	f7f9 fec0 	bl	8000de8 <HAL_PCD_Init>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800706e:	f7f9 fa59 	bl	8000524 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007072:	2180      	movs	r1, #128	; 0x80
 8007074:	4808      	ldr	r0, [pc, #32]	; (8007098 <USBD_LL_Init+0x94>)
 8007076:	f7fa ff22 	bl	8001ebe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800707a:	2240      	movs	r2, #64	; 0x40
 800707c:	2100      	movs	r1, #0
 800707e:	4806      	ldr	r0, [pc, #24]	; (8007098 <USBD_LL_Init+0x94>)
 8007080:	f7fa fed6 	bl	8001e30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007084:	2280      	movs	r2, #128	; 0x80
 8007086:	2101      	movs	r1, #1
 8007088:	4803      	ldr	r0, [pc, #12]	; (8007098 <USBD_LL_Init+0x94>)
 800708a:	f7fa fed1 	bl	8001e30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20001740 	.word	0x20001740

0800709c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 ffbc 	bl	8001030 <HAL_PCD_Start>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d816      	bhi.n	80070f0 <USBD_LL_Start+0x54>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <USBD_LL_Start+0x2c>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070df 	.word	0x080070df
 80070d0:	080070e5 	.word	0x080070e5
 80070d4:	080070eb 	.word	0x080070eb
    case HAL_OK :
      usb_status = USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
    break;
 80070dc:	e00b      	b.n	80070f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070de:	2303      	movs	r3, #3
 80070e0:	73fb      	strb	r3, [r7, #15]
    break;
 80070e2:	e008      	b.n	80070f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e005      	b.n	80070f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
    break;
 80070ee:	e002      	b.n	80070f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	bf00      	nop
  }
  return usb_status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	4603      	mov	r3, r0
 8007110:	70fb      	strb	r3, [r7, #3]
 8007112:	460b      	mov	r3, r1
 8007114:	70bb      	strb	r3, [r7, #2]
 8007116:	4613      	mov	r3, r2
 8007118:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007128:	78bb      	ldrb	r3, [r7, #2]
 800712a:	883a      	ldrh	r2, [r7, #0]
 800712c:	78f9      	ldrb	r1, [r7, #3]
 800712e:	f7fa fb77 	bl	8001820 <HAL_PCD_EP_Open>
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b03      	cmp	r3, #3
 800713a:	d817      	bhi.n	800716c <USBD_LL_OpenEP+0x6c>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <USBD_LL_OpenEP+0x44>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	08007155 	.word	0x08007155
 8007148:	0800715b 	.word	0x0800715b
 800714c:	08007161 	.word	0x08007161
 8007150:	08007167 	.word	0x08007167
    case HAL_OK :
      usb_status = USBD_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
    break;
 8007158:	e00b      	b.n	8007172 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800715a:	2303      	movs	r3, #3
 800715c:	73fb      	strb	r3, [r7, #15]
    break;
 800715e:	e008      	b.n	8007172 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]
    break;
 8007164:	e005      	b.n	8007172 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	73fb      	strb	r3, [r7, #15]
    break;
 800716a:	e002      	b.n	8007172 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800716c:	2303      	movs	r3, #3
 800716e:	73fb      	strb	r3, [r7, #15]
    break;
 8007170:	bf00      	nop
  }
  return usb_status;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007196:	78fa      	ldrb	r2, [r7, #3]
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f7fa fba8 	bl	80018f0 <HAL_PCD_EP_Close>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d816      	bhi.n	80071d8 <USBD_LL_CloseEP+0x5c>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBD_LL_CloseEP+0x34>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c7 	.word	0x080071c7
 80071b8:	080071cd 	.word	0x080071cd
 80071bc:	080071d3 	.word	0x080071d3
    case HAL_OK :
      usb_status = USBD_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
    break;
 80071c4:	e00b      	b.n	80071de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	73fb      	strb	r3, [r7, #15]
    break;
 80071ca:	e008      	b.n	80071de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
    break;
 80071d0:	e005      	b.n	80071de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	73fb      	strb	r3, [r7, #15]
    break;
 80071d6:	e002      	b.n	80071de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]
    break;
 80071dc:	bf00      	nop
  }
  return usb_status;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa fc4f 	bl	8001aaa <HAL_PCD_EP_SetStall>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b03      	cmp	r3, #3
 8007214:	d816      	bhi.n	8007244 <USBD_LL_StallEP+0x5c>
 8007216:	a201      	add	r2, pc, #4	; (adr r2, 800721c <USBD_LL_StallEP+0x34>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	0800722d 	.word	0x0800722d
 8007220:	08007233 	.word	0x08007233
 8007224:	08007239 	.word	0x08007239
 8007228:	0800723f 	.word	0x0800723f
    case HAL_OK :
      usb_status = USBD_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	e00b      	b.n	800724a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	73fb      	strb	r3, [r7, #15]
    break;
 8007236:	e008      	b.n	800724a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
    break;
 800723c:	e005      	b.n	800724a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800723e:	2303      	movs	r3, #3
 8007240:	73fb      	strb	r3, [r7, #15]
    break;
 8007242:	e002      	b.n	800724a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	73fb      	strb	r3, [r7, #15]
    break;
 8007248:	bf00      	nop
  }
  return usb_status;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fa fc7b 	bl	8001b6e <HAL_PCD_EP_ClrStall>
 8007278:	4603      	mov	r3, r0
 800727a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b03      	cmp	r3, #3
 8007280:	d816      	bhi.n	80072b0 <USBD_LL_ClearStallEP+0x5c>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <USBD_LL_ClearStallEP+0x34>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	08007299 	.word	0x08007299
 800728c:	0800729f 	.word	0x0800729f
 8007290:	080072a5 	.word	0x080072a5
 8007294:	080072ab 	.word	0x080072ab
    case HAL_OK :
      usb_status = USBD_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
    break;
 800729c:	e00b      	b.n	80072b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800729e:	2303      	movs	r3, #3
 80072a0:	73fb      	strb	r3, [r7, #15]
    break;
 80072a2:	e008      	b.n	80072b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
    break;
 80072a8:	e005      	b.n	80072b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072aa:	2303      	movs	r3, #3
 80072ac:	73fb      	strb	r3, [r7, #15]
    break;
 80072ae:	e002      	b.n	80072b6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	73fb      	strb	r3, [r7, #15]
    break;
 80072b4:	bf00      	nop
  }
  return usb_status;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	da0b      	bge.n	80072f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	4613      	mov	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	333e      	adds	r3, #62	; 0x3e
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	e00b      	b.n	800730c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800730a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007332:	78fa      	ldrb	r2, [r7, #3]
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f7fa fa4d 	bl	80017d6 <HAL_PCD_SetAddress>
 800733c:	4603      	mov	r3, r0
 800733e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b03      	cmp	r3, #3
 8007344:	d816      	bhi.n	8007374 <USBD_LL_SetUSBAddress+0x5c>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBD_LL_SetUSBAddress+0x34>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	0800735d 	.word	0x0800735d
 8007350:	08007363 	.word	0x08007363
 8007354:	08007369 	.word	0x08007369
 8007358:	0800736f 	.word	0x0800736f
    case HAL_OK :
      usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
    break;
 8007360:	e00b      	b.n	800737a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007362:	2303      	movs	r3, #3
 8007364:	73fb      	strb	r3, [r7, #15]
    break;
 8007366:	e008      	b.n	800737a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
    break;
 800736c:	e005      	b.n	800737a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800736e:	2303      	movs	r3, #3
 8007370:	73fb      	strb	r3, [r7, #15]
    break;
 8007372:	e002      	b.n	800737a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007374:	2303      	movs	r3, #3
 8007376:	73fb      	strb	r3, [r7, #15]
    break;
 8007378:	bf00      	nop
  }
  return usb_status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	460b      	mov	r3, r1
 8007392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073a2:	7af9      	ldrb	r1, [r7, #11]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	f7fa fb42 	bl	8001a30 <HAL_PCD_EP_Transmit>
 80073ac:	4603      	mov	r3, r0
 80073ae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80073b0:	7dbb      	ldrb	r3, [r7, #22]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d816      	bhi.n	80073e4 <USBD_LL_Transmit+0x60>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <USBD_LL_Transmit+0x38>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073d3 	.word	0x080073d3
 80073c4:	080073d9 	.word	0x080073d9
 80073c8:	080073df 	.word	0x080073df
    case HAL_OK :
      usb_status = USBD_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
    break;
 80073d0:	e00b      	b.n	80073ea <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073d2:	2303      	movs	r3, #3
 80073d4:	75fb      	strb	r3, [r7, #23]
    break;
 80073d6:	e008      	b.n	80073ea <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
    break;
 80073dc:	e005      	b.n	80073ea <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	75fb      	strb	r3, [r7, #23]
    break;
 80073e2:	e002      	b.n	80073ea <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	75fb      	strb	r3, [r7, #23]
    break;
 80073e8:	bf00      	nop
  }
  return usb_status;
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	460b      	mov	r3, r1
 8007402:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007412:	7af9      	ldrb	r1, [r7, #11]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	f7fa fab4 	bl	8001984 <HAL_PCD_EP_Receive>
 800741c:	4603      	mov	r3, r0
 800741e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007420:	7dbb      	ldrb	r3, [r7, #22]
 8007422:	2b03      	cmp	r3, #3
 8007424:	d816      	bhi.n	8007454 <USBD_LL_PrepareReceive+0x60>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <USBD_LL_PrepareReceive+0x38>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800743d 	.word	0x0800743d
 8007430:	08007443 	.word	0x08007443
 8007434:	08007449 	.word	0x08007449
 8007438:	0800744f 	.word	0x0800744f
    case HAL_OK :
      usb_status = USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	75fb      	strb	r3, [r7, #23]
    break;
 8007440:	e00b      	b.n	800745a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007442:	2303      	movs	r3, #3
 8007444:	75fb      	strb	r3, [r7, #23]
    break;
 8007446:	e008      	b.n	800745a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007448:	2301      	movs	r3, #1
 800744a:	75fb      	strb	r3, [r7, #23]
    break;
 800744c:	e005      	b.n	800745a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
    break;
 8007452:	e002      	b.n	800745a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	75fb      	strb	r3, [r7, #23]
    break;
 8007458:	bf00      	nop
  }
  return usb_status;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fa fac0 	bl	8001a00 <HAL_PCD_EP_GetRxCount>
 8007480:	4603      	mov	r3, r0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_PCDEx_LPM_Callback+0x18>
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d01f      	beq.n	80074e2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80074a2:	e03b      	b.n	800751c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80074ac:	f000 f83c 	bl	8007528 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074b0:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <HAL_PCDEx_LPM_Callback+0x98>)
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	4a1b      	ldr	r2, [pc, #108]	; (8007524 <HAL_PCDEx_LPM_Callback+0x98>)
 80074b6:	f023 0306 	bic.w	r3, r3, #6
 80074ba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ce:	f023 0301 	bic.w	r3, r3, #1
 80074d2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fb36 	bl	8005b4c <USBD_LL_Resume>
    break;
 80074e0:	e01c      	b.n	800751c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fb0e 	bl	8005b22 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_PCDEx_LPM_Callback+0x98>)
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4a04      	ldr	r2, [pc, #16]	; (8007524 <HAL_PCDEx_LPM_Callback+0x98>)
 8007514:	f043 0306 	orr.w	r3, r3, #6
 8007518:	6113      	str	r3, [r2, #16]
    break;
 800751a:	bf00      	nop
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	e000ed00 	.word	0xe000ed00

08007528 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800752c:	f7f8 fe8c 	bl	8000248 <SystemClock_Config>
}
 8007530:	bf00      	nop
 8007532:	bd80      	pop	{r7, pc}

08007534 <__errno>:
 8007534:	4b01      	ldr	r3, [pc, #4]	; (800753c <__errno+0x8>)
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000190 	.word	0x20000190

08007540 <__libc_init_array>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4e0d      	ldr	r6, [pc, #52]	; (8007578 <__libc_init_array+0x38>)
 8007544:	4c0d      	ldr	r4, [pc, #52]	; (800757c <__libc_init_array+0x3c>)
 8007546:	1ba4      	subs	r4, r4, r6
 8007548:	10a4      	asrs	r4, r4, #2
 800754a:	2500      	movs	r5, #0
 800754c:	42a5      	cmp	r5, r4
 800754e:	d109      	bne.n	8007564 <__libc_init_array+0x24>
 8007550:	4e0b      	ldr	r6, [pc, #44]	; (8007580 <__libc_init_array+0x40>)
 8007552:	4c0c      	ldr	r4, [pc, #48]	; (8007584 <__libc_init_array+0x44>)
 8007554:	f000 f8ea 	bl	800772c <_init>
 8007558:	1ba4      	subs	r4, r4, r6
 800755a:	10a4      	asrs	r4, r4, #2
 800755c:	2500      	movs	r5, #0
 800755e:	42a5      	cmp	r5, r4
 8007560:	d105      	bne.n	800756e <__libc_init_array+0x2e>
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007568:	4798      	blx	r3
 800756a:	3501      	adds	r5, #1
 800756c:	e7ee      	b.n	800754c <__libc_init_array+0xc>
 800756e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007572:	4798      	blx	r3
 8007574:	3501      	adds	r5, #1
 8007576:	e7f2      	b.n	800755e <__libc_init_array+0x1e>
 8007578:	080077e8 	.word	0x080077e8
 800757c:	080077e8 	.word	0x080077e8
 8007580:	080077e8 	.word	0x080077e8
 8007584:	080077ec 	.word	0x080077ec

08007588 <malloc>:
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <malloc+0xc>)
 800758a:	4601      	mov	r1, r0
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f000 b861 	b.w	8007654 <_malloc_r>
 8007592:	bf00      	nop
 8007594:	20000190 	.word	0x20000190

08007598 <free>:
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <free+0xc>)
 800759a:	4601      	mov	r1, r0
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f000 b80b 	b.w	80075b8 <_free_r>
 80075a2:	bf00      	nop
 80075a4:	20000190 	.word	0x20000190

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <_free_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4605      	mov	r5, r0
 80075bc:	2900      	cmp	r1, #0
 80075be:	d045      	beq.n	800764c <_free_r+0x94>
 80075c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c4:	1f0c      	subs	r4, r1, #4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bfb8      	it	lt
 80075ca:	18e4      	addlt	r4, r4, r3
 80075cc:	f000 f8ac 	bl	8007728 <__malloc_lock>
 80075d0:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <_free_r+0x98>)
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	4610      	mov	r0, r2
 80075d6:	b933      	cbnz	r3, 80075e6 <_free_r+0x2e>
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	6014      	str	r4, [r2, #0]
 80075dc:	4628      	mov	r0, r5
 80075de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e2:	f000 b8a2 	b.w	800772a <__malloc_unlock>
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	d90c      	bls.n	8007604 <_free_r+0x4c>
 80075ea:	6821      	ldr	r1, [r4, #0]
 80075ec:	1862      	adds	r2, r4, r1
 80075ee:	4293      	cmp	r3, r2
 80075f0:	bf04      	itt	eq
 80075f2:	681a      	ldreq	r2, [r3, #0]
 80075f4:	685b      	ldreq	r3, [r3, #4]
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	bf04      	itt	eq
 80075fa:	1852      	addeq	r2, r2, r1
 80075fc:	6022      	streq	r2, [r4, #0]
 80075fe:	6004      	str	r4, [r0, #0]
 8007600:	e7ec      	b.n	80075dc <_free_r+0x24>
 8007602:	4613      	mov	r3, r2
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	b10a      	cbz	r2, 800760c <_free_r+0x54>
 8007608:	42a2      	cmp	r2, r4
 800760a:	d9fa      	bls.n	8007602 <_free_r+0x4a>
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	1858      	adds	r0, r3, r1
 8007610:	42a0      	cmp	r0, r4
 8007612:	d10b      	bne.n	800762c <_free_r+0x74>
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	4401      	add	r1, r0
 8007618:	1858      	adds	r0, r3, r1
 800761a:	4282      	cmp	r2, r0
 800761c:	6019      	str	r1, [r3, #0]
 800761e:	d1dd      	bne.n	80075dc <_free_r+0x24>
 8007620:	6810      	ldr	r0, [r2, #0]
 8007622:	6852      	ldr	r2, [r2, #4]
 8007624:	605a      	str	r2, [r3, #4]
 8007626:	4401      	add	r1, r0
 8007628:	6019      	str	r1, [r3, #0]
 800762a:	e7d7      	b.n	80075dc <_free_r+0x24>
 800762c:	d902      	bls.n	8007634 <_free_r+0x7c>
 800762e:	230c      	movs	r3, #12
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	e7d3      	b.n	80075dc <_free_r+0x24>
 8007634:	6820      	ldr	r0, [r4, #0]
 8007636:	1821      	adds	r1, r4, r0
 8007638:	428a      	cmp	r2, r1
 800763a:	bf04      	itt	eq
 800763c:	6811      	ldreq	r1, [r2, #0]
 800763e:	6852      	ldreq	r2, [r2, #4]
 8007640:	6062      	str	r2, [r4, #4]
 8007642:	bf04      	itt	eq
 8007644:	1809      	addeq	r1, r1, r0
 8007646:	6021      	streq	r1, [r4, #0]
 8007648:	605c      	str	r4, [r3, #4]
 800764a:	e7c7      	b.n	80075dc <_free_r+0x24>
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	20000264 	.word	0x20000264

08007654 <_malloc_r>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	1ccd      	adds	r5, r1, #3
 8007658:	f025 0503 	bic.w	r5, r5, #3
 800765c:	3508      	adds	r5, #8
 800765e:	2d0c      	cmp	r5, #12
 8007660:	bf38      	it	cc
 8007662:	250c      	movcc	r5, #12
 8007664:	2d00      	cmp	r5, #0
 8007666:	4606      	mov	r6, r0
 8007668:	db01      	blt.n	800766e <_malloc_r+0x1a>
 800766a:	42a9      	cmp	r1, r5
 800766c:	d903      	bls.n	8007676 <_malloc_r+0x22>
 800766e:	230c      	movs	r3, #12
 8007670:	6033      	str	r3, [r6, #0]
 8007672:	2000      	movs	r0, #0
 8007674:	bd70      	pop	{r4, r5, r6, pc}
 8007676:	f000 f857 	bl	8007728 <__malloc_lock>
 800767a:	4a21      	ldr	r2, [pc, #132]	; (8007700 <_malloc_r+0xac>)
 800767c:	6814      	ldr	r4, [r2, #0]
 800767e:	4621      	mov	r1, r4
 8007680:	b991      	cbnz	r1, 80076a8 <_malloc_r+0x54>
 8007682:	4c20      	ldr	r4, [pc, #128]	; (8007704 <_malloc_r+0xb0>)
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	b91b      	cbnz	r3, 8007690 <_malloc_r+0x3c>
 8007688:	4630      	mov	r0, r6
 800768a:	f000 f83d 	bl	8007708 <_sbrk_r>
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f000 f838 	bl	8007708 <_sbrk_r>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d124      	bne.n	80076e6 <_malloc_r+0x92>
 800769c:	230c      	movs	r3, #12
 800769e:	6033      	str	r3, [r6, #0]
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f842 	bl	800772a <__malloc_unlock>
 80076a6:	e7e4      	b.n	8007672 <_malloc_r+0x1e>
 80076a8:	680b      	ldr	r3, [r1, #0]
 80076aa:	1b5b      	subs	r3, r3, r5
 80076ac:	d418      	bmi.n	80076e0 <_malloc_r+0x8c>
 80076ae:	2b0b      	cmp	r3, #11
 80076b0:	d90f      	bls.n	80076d2 <_malloc_r+0x7e>
 80076b2:	600b      	str	r3, [r1, #0]
 80076b4:	50cd      	str	r5, [r1, r3]
 80076b6:	18cc      	adds	r4, r1, r3
 80076b8:	4630      	mov	r0, r6
 80076ba:	f000 f836 	bl	800772a <__malloc_unlock>
 80076be:	f104 000b 	add.w	r0, r4, #11
 80076c2:	1d23      	adds	r3, r4, #4
 80076c4:	f020 0007 	bic.w	r0, r0, #7
 80076c8:	1ac3      	subs	r3, r0, r3
 80076ca:	d0d3      	beq.n	8007674 <_malloc_r+0x20>
 80076cc:	425a      	negs	r2, r3
 80076ce:	50e2      	str	r2, [r4, r3]
 80076d0:	e7d0      	b.n	8007674 <_malloc_r+0x20>
 80076d2:	428c      	cmp	r4, r1
 80076d4:	684b      	ldr	r3, [r1, #4]
 80076d6:	bf16      	itet	ne
 80076d8:	6063      	strne	r3, [r4, #4]
 80076da:	6013      	streq	r3, [r2, #0]
 80076dc:	460c      	movne	r4, r1
 80076de:	e7eb      	b.n	80076b8 <_malloc_r+0x64>
 80076e0:	460c      	mov	r4, r1
 80076e2:	6849      	ldr	r1, [r1, #4]
 80076e4:	e7cc      	b.n	8007680 <_malloc_r+0x2c>
 80076e6:	1cc4      	adds	r4, r0, #3
 80076e8:	f024 0403 	bic.w	r4, r4, #3
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d005      	beq.n	80076fc <_malloc_r+0xa8>
 80076f0:	1a21      	subs	r1, r4, r0
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f808 	bl	8007708 <_sbrk_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d0cf      	beq.n	800769c <_malloc_r+0x48>
 80076fc:	6025      	str	r5, [r4, #0]
 80076fe:	e7db      	b.n	80076b8 <_malloc_r+0x64>
 8007700:	20000264 	.word	0x20000264
 8007704:	20000268 	.word	0x20000268

08007708 <_sbrk_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4c06      	ldr	r4, [pc, #24]	; (8007724 <_sbrk_r+0x1c>)
 800770c:	2300      	movs	r3, #0
 800770e:	4605      	mov	r5, r0
 8007710:	4608      	mov	r0, r1
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	f7f8 ff80 	bl	8000618 <_sbrk>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_sbrk_r+0x1a>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	b103      	cbz	r3, 8007722 <_sbrk_r+0x1a>
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20001b48 	.word	0x20001b48

08007728 <__malloc_lock>:
 8007728:	4770      	bx	lr

0800772a <__malloc_unlock>:
 800772a:	4770      	bx	lr

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr


rftune.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d30  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f1c  08001f1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f1c  08001f1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f1c  08001f1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f1c  08001f1c  00011f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f20  08001f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001f30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001f30  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad18  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000166b  00000000  00000000  0002ad54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002ced8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029a59  00000000  00000000  0002d928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090e1  00000000  00000000  00057381  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8de2  00000000  00000000  00060462  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d98  00000000  00000000  001592c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001ec4 	.word	0x08001ec4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001ec4 	.word	0x08001ec4

080001ec <_Z8delay_usmP17TIM_HandleTypeDef>:

#include "main.h"
#include "delay.h"

void delay_us (uint32_t us, TIM_HandleTypeDef *htim)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2200      	movs	r2, #0
 80001fc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	429a      	cmp	r2, r3
 8000208:	bf8c      	ite	hi
 800020a:	2301      	movhi	r3, #1
 800020c:	2300      	movls	r3, #0
 800020e:	b2db      	uxtb	r3, r3
 8000210:	2b00      	cmp	r3, #0
 8000212:	d000      	beq.n	8000216 <_Z8delay_usmP17TIM_HandleTypeDef+0x2a>
 8000214:	e7f3      	b.n	80001fe <_Z8delay_usmP17TIM_HandleTypeDef+0x12>
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 f9df 	bl	80005ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f814 	bl	8000258 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8cc 	bl	80003cc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000234:	f000 f86e 	bl	8000314 <_ZL12MX_TIM2_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  delay_us(1000000, &htim2);
 8000238:	4904      	ldr	r1, [pc, #16]	; (800024c <main+0x28>)
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0x2c>)
 800023c:	f7ff ffd6 	bl	80001ec <_Z8delay_usmP17TIM_HandleTypeDef>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <main+0x30>)
 8000246:	f000 fcd5 	bl	8000bf4 <HAL_GPIO_TogglePin>
	  delay_us(1000000, &htim2);
 800024a:	e7f5      	b.n	8000238 <main+0x14>
 800024c:	20000028 	.word	0x20000028
 8000250:	000f4240 	.word	0x000f4240
 8000254:	48000400 	.word	0x48000400

08000258 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b096      	sub	sp, #88	; 0x58
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2244      	movs	r2, #68	; 0x44
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fe24 	bl	8001eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027a:	2301      	movs	r3, #1
 800027c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	2303      	movs	r3, #3
 800028a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800028c:	2301      	movs	r3, #1
 800028e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000290:	2314      	movs	r3, #20
 8000292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000298:	2302      	movs	r3, #2
 800029a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fd23 	bl	8000cf0 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	2301      	movne	r3, #1
 80002b2:	2300      	moveq	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <_Z18SystemClock_Configv+0x66>
  {
    Error_Handler();
 80002ba:	f000 f8c7 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	2104      	movs	r1, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f930 	bl	800153c <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	bf14      	ite	ne
 80002e2:	2301      	movne	r3, #1
 80002e4:	2300      	moveq	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80002ec:	f000 f8ae 	bl	800044c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f4:	f000 fca6 	bl	8000c44 <HAL_PWREx_ControlVoltageScaling>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bf14      	ite	ne
 80002fe:	2301      	movne	r3, #1
 8000300:	2300      	moveq	r3, #0
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 8000308:	f000 f8a0 	bl	800044c <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	3758      	adds	r7, #88	; 0x58
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000338:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800033a:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 800033c:	2250      	movs	r2, #80	; 0x50
 800033e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000346:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000348:	f04f 32ff 	mov.w	r2, #4294967295
 800034c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000354:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800035a:	481b      	ldr	r0, [pc, #108]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 800035c:	f001 faba 	bl	80018d4 <HAL_TIM_Base_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	bf14      	ite	ne
 8000366:	2301      	movne	r3, #1
 8000368:	2300      	moveq	r3, #0
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000370:	f000 f86c 	bl	800044c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4811      	ldr	r0, [pc, #68]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8000382:	f001 fafe 	bl	8001982 <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	bf14      	ite	ne
 800038c:	2301      	movne	r3, #1
 800038e:	2300      	moveq	r3, #0
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8000396:	f000 f859 	bl	800044c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	4808      	ldr	r0, [pc, #32]	; (80003c8 <_ZL12MX_TIM2_Initv+0xb4>)
 80003a8:	f001 fcd8 	bl	8001d5c <HAL_TIMEx_MasterConfigSynchronization>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	bf14      	ite	ne
 80003b2:	2301      	movne	r3, #1
 80003b4:	2300      	moveq	r3, #0
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80003bc:	f000 f846 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000028 	.word	0x20000028

080003cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <_ZL12MX_GPIO_Initv+0x78>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	4a17      	ldr	r2, [pc, #92]	; (8000444 <_ZL12MX_GPIO_Initv+0x78>)
 80003e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <_ZL12MX_GPIO_Initv+0x78>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <_ZL12MX_GPIO_Initv+0x78>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	4a11      	ldr	r2, [pc, #68]	; (8000444 <_ZL12MX_GPIO_Initv+0x78>)
 8000400:	f043 0302 	orr.w	r3, r3, #2
 8000404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <_ZL12MX_GPIO_Initv+0x78>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	f003 0302 	and.w	r3, r3, #2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <_ZL12MX_GPIO_Initv+0x7c>)
 800041a:	f000 fbd3 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800041e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	4619      	mov	r1, r3
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <_ZL12MX_GPIO_Initv+0x7c>)
 8000438:	f000 fa32 	bl	80008a0 <HAL_GPIO_Init>

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	48000400 	.word	0x48000400

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000452:	e7fe      	b.n	8000452 <Error_Handler+0x6>

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_MspInit+0x44>)
 800045c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <HAL_MspInit+0x44>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6613      	str	r3, [r2, #96]	; 0x60
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_MspInit+0x44>)
 8000468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_MspInit+0x44>)
 8000474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <HAL_MspInit+0x44>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	6593      	str	r3, [r2, #88]	; 0x58
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_MspInit+0x44>)
 8000480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ac:	d10b      	bne.n	80004c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_TIM_Base_MspInit+0x38>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <HAL_TIM_Base_MspInit+0x38>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6593      	str	r3, [r2, #88]	; 0x58
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_TIM_Base_MspInit+0x38>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 f8b6 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <SystemInit+0x64>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <SystemInit+0x64>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <SystemInit+0x68>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <SystemInit+0x68>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <SystemInit+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <SystemInit+0x68>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <SystemInit+0x68>)
 8000558:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800055c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000560:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <SystemInit+0x68>)
 8000564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000568:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <SystemInit+0x68>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <SystemInit+0x68>)
 8000570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000574:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <SystemInit+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <SystemInit+0x64>)
 800057e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000582:	609a      	str	r2, [r3, #8]
#endif
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00
 8000594:	40021000 	.word	0x40021000

08000598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800059c:	f7ff ffc6 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005a2:	e003      	b.n	80005ac <LoopCopyDataInit>

080005a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005aa:	3104      	adds	r1, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80005b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005b4:	d3f6      	bcc.n	80005a4 <CopyDataInit>
	ldr	r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005b8:	e002      	b.n	80005c0 <LoopFillZerobss>

080005ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005bc:	f842 3b04 	str.w	r3, [r2], #4

080005c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <LoopForever+0x16>)
	cmp	r2, r3
 80005c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005c4:	d3f9      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c6:	f001 fc51 	bl	8001e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ca:	f7ff fe2b 	bl	8000224 <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d0:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80005d4:	08001f24 	.word	0x08001f24
	ldr	r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005dc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005e0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005e4:	20000078 	.word	0x20000078

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>

080005ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f91f 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f80e 	bl	800061c <HAL_InitTick>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e001      	b.n	8000610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800060c:	f7ff ff22 	bl	8000454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000610:	79fb      	ldrb	r3, [r7, #7]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_InitTick+0x6c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d023      	beq.n	8000678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_InitTick+0x70>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_InitTick+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f91d 	bl	8000886 <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10f      	bne.n	8000672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d809      	bhi.n	800066c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f8f5 	bl	800084e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_InitTick+0x74>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e007      	b.n	800067c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e004      	b.n	800067c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e001      	b.n	800067c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	20000000 	.word	0x20000000
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000074 	.word	0x20000074

080006bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000074 	.word	0x20000074

080006d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <__NVIC_SetPriorityGrouping+0x44>)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	60d3      	str	r3, [r2, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_GetPriorityGrouping+0x18>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	f003 0307 	and.w	r3, r3, #7
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff47 	bl	80006d4 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff5c 	bl	800071c <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffb0 	bl	80007f4 <SysTick_Config>
 8000894:	4603      	mov	r3, r0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	e166      	b.n	8000b7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	2101      	movs	r1, #1
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 8158 	beq.w	8000b78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d00b      	beq.n	80008e8 <HAL_GPIO_Init+0x48>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d007      	beq.n	80008e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008dc:	2b11      	cmp	r3, #17
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b12      	cmp	r3, #18
 80008e6:	d130      	bne.n	800094a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800091e:	2201      	movs	r2, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	f003 0201 	and.w	r2, r3, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d003      	beq.n	800098a <HAL_GPIO_Init+0xea>
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b12      	cmp	r3, #18
 8000988:	d123      	bne.n	80009d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3208      	adds	r2, #8
 8000992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	220f      	movs	r2, #15
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	691a      	ldr	r2, [r3, #16]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	08da      	lsrs	r2, r3, #3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3208      	adds	r2, #8
 80009cc:	6939      	ldr	r1, [r7, #16]
 80009ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0203 	and.w	r2, r3, #3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 80b2 	beq.w	8000b78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <HAL_GPIO_Init+0x2fc>)
 8000a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a18:	4a60      	ldr	r2, [pc, #384]	; (8000b9c <HAL_GPIO_Init+0x2fc>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a20:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <HAL_GPIO_Init+0x2fc>)
 8000a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a2c:	4a5c      	ldr	r2, [pc, #368]	; (8000ba0 <HAL_GPIO_Init+0x300>)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a56:	d02b      	beq.n	8000ab0 <HAL_GPIO_Init+0x210>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a52      	ldr	r2, [pc, #328]	; (8000ba4 <HAL_GPIO_Init+0x304>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d025      	beq.n	8000aac <HAL_GPIO_Init+0x20c>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a51      	ldr	r2, [pc, #324]	; (8000ba8 <HAL_GPIO_Init+0x308>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d01f      	beq.n	8000aa8 <HAL_GPIO_Init+0x208>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a50      	ldr	r2, [pc, #320]	; (8000bac <HAL_GPIO_Init+0x30c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d019      	beq.n	8000aa4 <HAL_GPIO_Init+0x204>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a4f      	ldr	r2, [pc, #316]	; (8000bb0 <HAL_GPIO_Init+0x310>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d013      	beq.n	8000aa0 <HAL_GPIO_Init+0x200>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a4e      	ldr	r2, [pc, #312]	; (8000bb4 <HAL_GPIO_Init+0x314>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d00d      	beq.n	8000a9c <HAL_GPIO_Init+0x1fc>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4d      	ldr	r2, [pc, #308]	; (8000bb8 <HAL_GPIO_Init+0x318>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d007      	beq.n	8000a98 <HAL_GPIO_Init+0x1f8>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a4c      	ldr	r2, [pc, #304]	; (8000bbc <HAL_GPIO_Init+0x31c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d101      	bne.n	8000a94 <HAL_GPIO_Init+0x1f4>
 8000a90:	2307      	movs	r3, #7
 8000a92:	e00e      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000a94:	2308      	movs	r3, #8
 8000a96:	e00c      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000a98:	2306      	movs	r3, #6
 8000a9a:	e00a      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	e008      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	e004      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <HAL_GPIO_Init+0x212>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	f002 0203 	and.w	r2, r2, #3
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	4093      	lsls	r3, r2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac2:	4937      	ldr	r1, [pc, #220]	; (8000ba0 <HAL_GPIO_Init+0x300>)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000af4:	4a32      	ldr	r2, [pc, #200]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b48:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <HAL_GPIO_Init+0x320>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f47f ae91 	bne.w	80008b0 <HAL_GPIO_Init+0x10>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	371c      	adds	r7, #28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	48000c00 	.word	0x48000c00
 8000bb0:	48001000 	.word	0x48001000
 8000bb4:	48001400 	.word	0x48001400
 8000bb8:	48001800 	.word	0x48001800
 8000bbc:	48001c00 	.word	0x48001c00
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000be0:	e002      	b.n	8000be8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	041a      	lsls	r2, r3, #16
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43d9      	mvns	r1, r3
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	400b      	ands	r3, r1
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40007000 	.word	0x40007000

08000c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c52:	d130      	bne.n	8000cb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c60:	d038      	beq.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2232      	movs	r2, #50	; 0x32
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0c9b      	lsrs	r3, r3, #18
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c88:	e002      	b.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9c:	d102      	bne.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f2      	bne.n	8000c8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb0:	d110      	bne.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e00f      	b.n	8000cd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc2:	d007      	beq.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ccc:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40007000 	.word	0x40007000
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	431bde83 	.word	0x431bde83

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f000 bc16 	b.w	8001530 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d04:	4ba0      	ldr	r3, [pc, #640]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d0e:	4b9e      	ldr	r3, [pc, #632]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 80e4 	beq.w	8000eee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d007      	beq.n	8000d3c <HAL_RCC_OscConfig+0x4c>
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	2b0c      	cmp	r3, #12
 8000d30:	f040 808b 	bne.w	8000e4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	f040 8087 	bne.w	8000e4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d3c:	4b92      	ldr	r3, [pc, #584]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <HAL_RCC_OscConfig+0x64>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e3ed      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1a      	ldr	r2, [r3, #32]
 8000d58:	4b8b      	ldr	r3, [pc, #556]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <HAL_RCC_OscConfig+0x7e>
 8000d64:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d6c:	e005      	b.n	8000d7a <HAL_RCC_OscConfig+0x8a>
 8000d6e:	4b86      	ldr	r3, [pc, #536]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d74:	091b      	lsrs	r3, r3, #4
 8000d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d223      	bcs.n	8000dc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fd46 	bl	8001814 <RCC_SetFlashLatencyFromMSIRange>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e3ce      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d92:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7c      	ldr	r2, [pc, #496]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b7a      	ldr	r3, [pc, #488]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4977      	ldr	r1, [pc, #476]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db0:	4b75      	ldr	r3, [pc, #468]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	4972      	ldr	r1, [pc, #456]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
 8000dc4:	e025      	b.n	8000e12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc6:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6f      	ldr	r2, [pc, #444]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	496a      	ldr	r1, [pc, #424]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	4965      	ldr	r1, [pc, #404]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fd06 	bl	8001814 <RCC_SetFlashLatencyFromMSIRange>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e38e      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e12:	f000 fc75 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 8000e16:	4601      	mov	r1, r0
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	4a5a      	ldr	r2, [pc, #360]	; (8000f8c <HAL_RCC_OscConfig+0x29c>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	4a58      	ldr	r2, [pc, #352]	; (8000f90 <HAL_RCC_OscConfig+0x2a0>)
 8000e30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e32:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <HAL_RCC_OscConfig+0x2a4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fbf0 	bl	800061c <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d052      	beq.n	8000eec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	e372      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d032      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc2d 	bl	80006bc <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc29 	bl	80006bc <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e35b      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e78:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e84:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3f      	ldr	r2, [pc, #252]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	493a      	ldr	r1, [pc, #232]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	4935      	ldr	r1, [pc, #212]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	e01a      	b.n	8000eee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbfa 	bl	80006bc <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fbf6 	bl	80006bc <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e328      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1dc>
 8000eea:	e000      	b.n	8000eee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d073      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_OscConfig+0x21c>
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	d10e      	bne.n	8000f24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d10b      	bne.n	8000f24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d063      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x2f0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d15f      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e305      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d106      	bne.n	8000f3c <HAL_RCC_OscConfig+0x24c>
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01d      	b.n	8000f78 <HAL_RCC_OscConfig+0x288>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x270>
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0x288>
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <HAL_RCC_OscConfig+0x298>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01b      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb9c 	bl	80006bc <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f86:	e010      	b.n	8000faa <HAL_RCC_OscConfig+0x2ba>
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	08001edc 	.word	0x08001edc
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fb90 	bl	80006bc <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e2c2      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000faa:	4baf      	ldr	r3, [pc, #700]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x2a8>
 8000fb6:	e014      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fb80 	bl	80006bc <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fb7c 	bl	80006bc <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e2ae      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fd2:	4ba5      	ldr	r3, [pc, #660]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2d0>
 8000fde:	e000      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d060      	beq.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d005      	beq.n	8001000 <HAL_RCC_OscConfig+0x310>
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b0c      	cmp	r3, #12
 8000ff8:	d119      	bne.n	800102e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d116      	bne.n	800102e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001000:	4b99      	ldr	r3, [pc, #612]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_RCC_OscConfig+0x328>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e28b      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001018:	4b93      	ldr	r3, [pc, #588]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	061b      	lsls	r3, r3, #24
 8001026:	4990      	ldr	r1, [pc, #576]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800102c:	e040      	b.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d023      	beq.n	800107e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001036:	4b8c      	ldr	r3, [pc, #560]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a8b      	ldr	r2, [pc, #556]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001042:	f7ff fb3b 	bl	80006bc <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fb37 	bl	80006bc <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e269      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800105c:	4b82      	ldr	r3, [pc, #520]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4b7f      	ldr	r3, [pc, #508]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	061b      	lsls	r3, r3, #24
 8001076:	497c      	ldr	r1, [pc, #496]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
 800107c:	e018      	b.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107e:	4b7a      	ldr	r3, [pc, #488]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a79      	ldr	r2, [pc, #484]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fb17 	bl	80006bc <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fb13 	bl	80006bc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e245      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a4:	4b70      	ldr	r3, [pc, #448]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f0      	bne.n	8001092 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d03c      	beq.n	8001136 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d01c      	beq.n	80010fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	4a67      	ldr	r2, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d4:	f7ff faf2 	bl	80006bc <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff faee 	bl	80006bc <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e220      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ee:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80010f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ef      	beq.n	80010dc <HAL_RCC_OscConfig+0x3ec>
 80010fc:	e01b      	b.n	8001136 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fe:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001104:	4a58      	ldr	r2, [pc, #352]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110e:	f7ff fad5 	bl	80006bc <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001116:	f7ff fad1 	bl	80006bc <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e203      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001128:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1ef      	bne.n	8001116 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80a6 	beq.w	8001290 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10d      	bne.n	8001170 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	4a43      	ldr	r2, [pc, #268]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6593      	str	r3, [r2, #88]	; 0x58
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116c:	2301      	movs	r3, #1
 800116e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <HAL_RCC_OscConfig+0x57c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d118      	bne.n	80011ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_RCC_OscConfig+0x57c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a3a      	ldr	r2, [pc, #232]	; (800126c <HAL_RCC_OscConfig+0x57c>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001188:	f7ff fa98 	bl	80006bc <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001190:	f7ff fa94 	bl	80006bc <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1c6      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_RCC_OscConfig+0x57c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4d8>
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011bc:	4a2a      	ldr	r2, [pc, #168]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011c6:	e024      	b.n	8001212 <HAL_RCC_OscConfig+0x522>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d110      	bne.n	80011f2 <HAL_RCC_OscConfig+0x502>
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	4a24      	ldr	r2, [pc, #144]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e6:	4a20      	ldr	r2, [pc, #128]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f0:	e00f      	b.n	8001212 <HAL_RCC_OscConfig+0x522>
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 8001204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800120a:	f023 0304 	bic.w	r3, r3, #4
 800120e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d016      	beq.n	8001248 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fa4f 	bl	80006bc <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fa4b 	bl	80006bc <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e17b      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x578>)
 800123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0ed      	beq.n	8001222 <HAL_RCC_OscConfig+0x532>
 8001246:	e01a      	b.n	800127e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001248:	f7ff fa38 	bl	80006bc <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800124e:	e00f      	b.n	8001270 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001250:	f7ff fa34 	bl	80006bc <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d906      	bls.n	8001270 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e164      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001270:	4ba8      	ldr	r3, [pc, #672]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e8      	bne.n	8001250 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800127e:	7ffb      	ldrb	r3, [r7, #31]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d105      	bne.n	8001290 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001284:	4ba3      	ldr	r3, [pc, #652]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	4aa2      	ldr	r2, [pc, #648]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 800128a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d03c      	beq.n	8001316 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01c      	beq.n	80012de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012a4:	4b9b      	ldr	r3, [pc, #620]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80012a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012aa:	4a9a      	ldr	r2, [pc, #616]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fa02 	bl	80006bc <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012bc:	f7ff f9fe 	bl	80006bc <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e130      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ce:	4b91      	ldr	r3, [pc, #580]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80012d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ef      	beq.n	80012bc <HAL_RCC_OscConfig+0x5cc>
 80012dc:	e01b      	b.n	8001316 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012de:	4b8d      	ldr	r3, [pc, #564]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80012e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e4:	4a8b      	ldr	r2, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ee:	f7ff f9e5 	bl	80006bc <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012f6:	f7ff f9e1 	bl	80006bc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e113      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001308:	4b82      	ldr	r3, [pc, #520]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 800130a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ef      	bne.n	80012f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8107 	beq.w	800152e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	2b02      	cmp	r3, #2
 8001326:	f040 80cb 	bne.w	80014c0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800132a:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0203 	and.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	429a      	cmp	r2, r3
 800133c:	d12c      	bne.n	8001398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	3b01      	subs	r3, #1
 800134a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d123      	bne.n	8001398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d11b      	bne.n	8001398 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d113      	bne.n	8001398 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	3b01      	subs	r3, #1
 800137e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d109      	bne.n	8001398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	3b01      	subs	r3, #1
 8001392:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d06d      	beq.n	8001474 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d068      	beq.n	8001470 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800139e:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d105      	bne.n	80013b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013aa:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0ba      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80013c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c6:	f7ff f979 	bl	80006bc <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff f975 	bl	80006bc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0a7      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e0:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x828>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013fc:	3a01      	subs	r2, #1
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	4311      	orrs	r1, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001406:	0212      	lsls	r2, r2, #8
 8001408:	4311      	orrs	r1, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800140e:	0852      	lsrs	r2, r2, #1
 8001410:	3a01      	subs	r2, #1
 8001412:	0552      	lsls	r2, r2, #21
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800141a:	0852      	lsrs	r2, r2, #1
 800141c:	3a01      	subs	r2, #1
 800141e:	0652      	lsls	r2, r2, #25
 8001420:	4311      	orrs	r1, r2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001426:	06d2      	lsls	r2, r2, #27
 8001428:	430a      	orrs	r2, r1
 800142a:	493a      	ldr	r1, [pc, #232]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 800142c:	4313      	orrs	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a37      	ldr	r2, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800143a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800143c:	4b35      	ldr	r3, [pc, #212]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a34      	ldr	r2, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001448:	f7ff f938 	bl	80006bc <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff f934 	bl	80006bc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e066      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800146e:	e05e      	b.n	800152e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e05d      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d156      	bne.n	800152e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 8001492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001496:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001498:	f7ff f910 	bl	80006bc <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff f90c 	bl	80006bc <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e03e      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x7b0>
 80014be:	e036      	b.n	800152e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d031      	beq.n	800152a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014e4:	f023 0303 	bic.w	r3, r3, #3
 80014e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x824>)
 80014f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff f8df 	bl	80006bc <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001500:	e00c      	b.n	800151c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f8db 	bl	80006bc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d905      	bls.n	800151c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e00d      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
 8001514:	40021000 	.word	0x40021000
 8001518:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_RCC_OscConfig+0x848>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ec      	bne.n	8001502 <HAL_RCC_OscConfig+0x812>
 8001528:	e001      	b.n	800152e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0c8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b66      	ldr	r3, [pc, #408]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d910      	bls.n	8001580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 0207 	bic.w	r2, r3, #7
 8001566:	4961      	ldr	r1, [pc, #388]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b0      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d04c      	beq.n	8001626 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001594:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d121      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e09e      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d115      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e092      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c4:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e086      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e07e      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 0203 	bic.w	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	493f      	ldr	r1, [pc, #252]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f6:	f7ff f861 	bl	80006bc <HAL_GetTick>
 80015fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff f85d 	bl	80006bc <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e066      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 020c 	and.w	r2, r3, #12
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	429a      	cmp	r2, r3
 8001624:	d1eb      	bne.n	80015fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	492c      	ldr	r1, [pc, #176]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d210      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4924      	ldr	r1, [pc, #144]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1b0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e036      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4918      	ldr	r1, [pc, #96]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4910      	ldr	r1, [pc, #64]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016b2:	f000 f825 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016b6:	4601      	mov	r1, r0
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	fa21 f303 	lsr.w	r3, r1, r3
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ffa0 	bl	800061c <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	72fb      	strb	r3, [r7, #11]

  return status;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08001edc 	.word	0x08001edc
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x34>
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d121      	bne.n	8001772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d11e      	bne.n	8001772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001734:	4b33      	ldr	r3, [pc, #204]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e005      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800175c:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <HAL_RCC_GetSysClockFreq+0x108>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d102      	bne.n	800177e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_GetSysClockFreq+0x10c>)
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	e004      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d101      	bne.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_GetSysClockFreq+0x110>)
 8001786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d133      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0xa4>
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0xaa>
 80017a2:	e005      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_GetSysClockFreq+0x10c>)
 80017a6:	617b      	str	r3, [r7, #20]
      break;
 80017a8:	e005      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ac:	617b      	str	r3, [r7, #20]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	617b      	str	r3, [r7, #20]
      break;
 80017b4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	3301      	adds	r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	fb02 f203 	mul.w	r2, r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_GetSysClockFreq+0x104>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0e5b      	lsrs	r3, r3, #25
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017f6:	69bb      	ldr	r3, [r7, #24]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3724      	adds	r7, #36	; 0x24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000
 8001808:	08001eec 	.word	0x08001eec
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200

08001814 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800182c:	f7ff f9fc 	bl	8000c28 <HAL_PWREx_GetVoltageRange>
 8001830:	6178      	str	r0, [r7, #20]
 8001832:	e014      	b.n	800185e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a24      	ldr	r2, [pc, #144]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800184c:	f7ff f9ec 	bl	8000c28 <HAL_PWREx_GetVoltageRange>
 8001850:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001864:	d10b      	bne.n	800187e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b80      	cmp	r3, #128	; 0x80
 800186a:	d919      	bls.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2ba0      	cmp	r3, #160	; 0xa0
 8001870:	d902      	bls.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001872:	2302      	movs	r3, #2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e013      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	e010      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d902      	bls.n	800188a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001884:	2303      	movs	r3, #3
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e00a      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b80      	cmp	r3, #128	; 0x80
 800188e:	d102      	bne.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001890:	2302      	movs	r3, #2
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e004      	b.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b70      	cmp	r3, #112	; 0x70
 800189a:	d101      	bne.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 0207 	bic.w	r2, r3, #7
 80018a8:	4909      	ldr	r1, [pc, #36]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e049      	b.n	800197a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fdce 	bl	800049c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f000 f8ee 	bl	8001af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_TIM_ConfigClockSource+0x18>
 8001996:	2302      	movs	r3, #2
 8001998:	e0a8      	b.n	8001aec <HAL_TIM_ConfigClockSource+0x16a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d067      	beq.n	8001aa6 <HAL_TIM_ConfigClockSource+0x124>
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d80b      	bhi.n	80019f2 <HAL_TIM_ConfigClockSource+0x70>
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d073      	beq.n	8001ac6 <HAL_TIM_ConfigClockSource+0x144>
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d802      	bhi.n	80019e8 <HAL_TIM_ConfigClockSource+0x66>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06f      	beq.n	8001ac6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019e6:	e078      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d06c      	beq.n	8001ac6 <HAL_TIM_ConfigClockSource+0x144>
 80019ec:	2b30      	cmp	r3, #48	; 0x30
 80019ee:	d06a      	beq.n	8001ac6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80019f0:	e073      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80019f2:	2b70      	cmp	r3, #112	; 0x70
 80019f4:	d00d      	beq.n	8001a12 <HAL_TIM_ConfigClockSource+0x90>
 80019f6:	2b70      	cmp	r3, #112	; 0x70
 80019f8:	d804      	bhi.n	8001a04 <HAL_TIM_ConfigClockSource+0x82>
 80019fa:	2b50      	cmp	r3, #80	; 0x50
 80019fc:	d033      	beq.n	8001a66 <HAL_TIM_ConfigClockSource+0xe4>
 80019fe:	2b60      	cmp	r3, #96	; 0x60
 8001a00:	d041      	beq.n	8001a86 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8001a02:	e06a      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a08:	d066      	beq.n	8001ad8 <HAL_TIM_ConfigClockSource+0x156>
 8001a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0e:	d017      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8001a10:	e063      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f000 f97b 	bl	8001d1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	609a      	str	r2, [r3, #8]
      break;
 8001a3e:	e04c      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f000 f964 	bl	8001d1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a62:	609a      	str	r2, [r3, #8]
      break;
 8001a64:	e039      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f000 f8d8 	bl	8001c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2150      	movs	r1, #80	; 0x50
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f931 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001a84:	e029      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f000 f8f7 	bl	8001c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2160      	movs	r1, #96	; 0x60
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f921 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001aa4:	e019      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6859      	ldr	r1, [r3, #4]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f000 f8b8 	bl	8001c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f911 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001ac4:	e009      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f000 f908 	bl	8001ce6 <TIM_ITRx_SetConfig>
        break;
 8001ad6:	e000      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x158>
      break;
 8001ad8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a40      	ldr	r2, [pc, #256]	; (8001c08 <TIM_Base_SetConfig+0x114>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d013      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b12:	d00f      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	; (8001c0c <TIM_Base_SetConfig+0x118>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00b      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <TIM_Base_SetConfig+0x11c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <TIM_Base_SetConfig+0x120>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <TIM_Base_SetConfig+0x40>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <TIM_Base_SetConfig+0x124>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d108      	bne.n	8001b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a2f      	ldr	r2, [pc, #188]	; (8001c08 <TIM_Base_SetConfig+0x114>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01f      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d01b      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <TIM_Base_SetConfig+0x118>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d017      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <TIM_Base_SetConfig+0x11c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <TIM_Base_SetConfig+0x120>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00f      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <TIM_Base_SetConfig+0x124>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <TIM_Base_SetConfig+0x128>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <TIM_Base_SetConfig+0x12c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_Base_SetConfig+0x9a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <TIM_Base_SetConfig+0x130>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <TIM_Base_SetConfig+0x114>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00f      	beq.n	8001bec <TIM_Base_SetConfig+0xf8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <TIM_Base_SetConfig+0x124>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00b      	beq.n	8001bec <TIM_Base_SetConfig+0xf8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <TIM_Base_SetConfig+0x128>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <TIM_Base_SetConfig+0xf8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <TIM_Base_SetConfig+0x12c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <TIM_Base_SetConfig+0xf8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <TIM_Base_SetConfig+0x130>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d103      	bne.n	8001bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	40013400 	.word	0x40013400
 8001c1c:	40014000 	.word	0x40014000
 8001c20:	40014400 	.word	0x40014400
 8001c24:	40014800 	.word	0x40014800

08001c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f023 0201 	bic.w	r2, r3, #1
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f023 030a 	bic.w	r3, r3, #10
 8001c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	621a      	str	r2, [r3, #32]
}
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f023 0210 	bic.w	r2, r3, #16
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	031b      	lsls	r3, r3, #12
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	621a      	str	r2, [r3, #32]
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f043 0307 	orr.w	r3, r3, #7
 8001d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	021a      	lsls	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	609a      	str	r2, [r3, #8]
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e068      	b.n	8001e46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2e      	ldr	r2, [pc, #184]	; (8001e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d108      	bne.n	8001dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01d      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d018      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1a      	ldr	r2, [pc, #104]	; (8001e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00e      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10c      	bne.n	8001e34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40013400 	.word	0x40013400
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40014000 	.word	0x40014000

08001e6c <__libc_init_array>:
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	4e0d      	ldr	r6, [pc, #52]	; (8001ea4 <__libc_init_array+0x38>)
 8001e70:	4c0d      	ldr	r4, [pc, #52]	; (8001ea8 <__libc_init_array+0x3c>)
 8001e72:	1ba4      	subs	r4, r4, r6
 8001e74:	10a4      	asrs	r4, r4, #2
 8001e76:	2500      	movs	r5, #0
 8001e78:	42a5      	cmp	r5, r4
 8001e7a:	d109      	bne.n	8001e90 <__libc_init_array+0x24>
 8001e7c:	4e0b      	ldr	r6, [pc, #44]	; (8001eac <__libc_init_array+0x40>)
 8001e7e:	4c0c      	ldr	r4, [pc, #48]	; (8001eb0 <__libc_init_array+0x44>)
 8001e80:	f000 f820 	bl	8001ec4 <_init>
 8001e84:	1ba4      	subs	r4, r4, r6
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	2500      	movs	r5, #0
 8001e8a:	42a5      	cmp	r5, r4
 8001e8c:	d105      	bne.n	8001e9a <__libc_init_array+0x2e>
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e94:	4798      	blx	r3
 8001e96:	3501      	adds	r5, #1
 8001e98:	e7ee      	b.n	8001e78 <__libc_init_array+0xc>
 8001e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e9e:	4798      	blx	r3
 8001ea0:	3501      	adds	r5, #1
 8001ea2:	e7f2      	b.n	8001e8a <__libc_init_array+0x1e>
 8001ea4:	08001f1c 	.word	0x08001f1c
 8001ea8:	08001f1c 	.word	0x08001f1c
 8001eac:	08001f1c 	.word	0x08001f1c
 8001eb0:	08001f20 	.word	0x08001f20

08001eb4 <memset>:
 8001eb4:	4402      	add	r2, r0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d100      	bne.n	8001ebe <memset+0xa>
 8001ebc:	4770      	bx	lr
 8001ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8001ec2:	e7f9      	b.n	8001eb8 <memset+0x4>

08001ec4 <_init>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	bf00      	nop
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr

08001ed0 <_fini>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr
